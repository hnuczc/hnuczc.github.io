<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Southblock&#39;s Blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-31T11:32:29.713Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Southblock</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC6%E5%B1%82%20%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC6%E5%B1%82%20%E5%BA%94%E7%94%A8%E5%B1%82/</id>
    <published>2020-10-31T11:33:56.753Z</published>
    <updated>2020-10-31T11:32:29.713Z</updated>
    
    <content type="html"><![CDATA[<p>应用层的协议就是服务。</p><h1 id="6-1-域名协议DNS-Domain-Name-System-（转载学习）"><a href="#6-1-域名协议DNS-Domain-Name-System-（转载学习）" class="headerlink" title="6.1 域名协议DNS(Domain Name System)（转载学习）"></a>6.1 域名协议DNS(Domain Name System)（转载学习）</h1><h2 id="6-1-1-作用"><a href="#6-1-1-作用" class="headerlink" title="6.1.1 作用"></a>6.1.1 作用</h2><p>把域名解析为IP地址。例如打得开QQ(可以直接用IP地址登陆)，打不开网络可能是域名问题。<br>8.8.8.8 是google的DNS服务器，222.222.222.222是电信的DNS服务器，能够用来帮忙解析域名地址。</p><h2 id="6-1-2-域名"><a href="#6-1-2-域名" class="headerlink" title="6.1.2 域名"></a>6.1.2 域名</h2><p>根 .<br>顶级域名 com, edu, net,cn,org,gov<br>二级域名 91xueit, inhe，例如91xueit.com是全球唯一的域名。<br>三级域名 dba，例如<a href="http://www.dba.91xueit.com/">www.dba.91xueit.com</a><br><img src="https://img-blog.csdnimg.cn/20200105224546868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Ping或nslookup能得到IP地址。或者直接输入网址。<br><img src="https://img-blog.csdnimg.cn/20200105224559915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="6-2-动态主机配置系统DHCP-同一个网段"><a href="#6-2-动态主机配置系统DHCP-同一个网段" class="headerlink" title="6.2 动态主机配置系统DHCP(同一个网段)"></a>6.2 动态主机配置系统DHCP(同一个网段)</h1><p>(1)静态IP地址<br><img src="https://img-blog.csdnimg.cn/20200105224616347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)动态IP地址<br><img src="https://img-blog.csdnimg.cn/20200105224628673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(3)DHCP客户端请求IP地址的过程<br>我的理解这是一个动态IP地址的请求和分配过程。客户机在网中发广播请求地址，目标IP是4个255，目标MAC地址是全FF。DHCP收到后，会从地址池里选一个给客户机。如果网络中有2个DHCP服务端且都给了反馈，此时计算机还需要返回一个数据通知他选择了谁提供的地址。另一个DHCP客户端发现没要他的，于是收回他提供的。从这个角度看，网络中不能有太多的DHCP服务端。<br><img src="https://img-blog.csdnimg.cn/20200105224643189.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(4)DHCP服务器的安装<br>必须是固定的IP地址。释放命令为ipconfig /release<br>(5)DHCP跨网段配置IP地址<br>需要DHCP配IP地址的计算机，需要在他所在的网络的路由器的网关上配置IPhelper address，再访问到DHCP。</p><h1 id="6-3-文件传输协议FTP-File-Transfer-Protocol"><a href="#6-3-文件传输协议FTP-File-Transfer-Protocol" class="headerlink" title="6.3 文件传输协议FTP(File Transfer Protocol)"></a>6.3 文件传输协议FTP(File Transfer Protocol)</h1><h2 id="6-3-1-FTP使用的两个TCP连接"><a href="#6-3-1-FTP使用的两个TCP连接" class="headerlink" title="6.3.1 FTP使用的两个TCP连接"></a>6.3.1 FTP使用的两个TCP连接</h2><p><img src="https://img-blog.csdnimg.cn/20200105224653853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>FTP的连接方式包括控制连接和数据连接。每上传/下载一个文件就会建立一个会话。<br>控制连接：标准端口为21，用于发送FTP命令信息。<br>数据连接：标准端口为20，用于上传/下载数据。</p><h2 id="6-3-2-FTP数据连接-上图的TCP数据连接"><a href="#6-3-2-FTP数据连接-上图的TCP数据连接" class="headerlink" title="6.3.2 FTP数据连接(上图的TCP数据连接)"></a>6.3.2 FTP数据连接(上图的TCP数据连接)</h2><p>涉及到主动模式和被动模式<br>(1)主动模式：FTP客户端告诉FTP服务器(的21端口)它在使用什么端口侦听，然后FTP服务器(的20端口)主动地和FTP客户端的这个端口建立连接。<br><img src="https://img-blog.csdnimg.cn/20200105224711725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)被动模式：FTP服务器端打开在指定范围内的某个新的端口(例如1089端口)并且进行侦听，被动地等待客户端发起连接。<br><img src="https://img-blog.csdnimg.cn/2020010522472251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>综上，在有防火墙的情况下，如果使用被动模式，防火墙不得不开很多端口来监听。因此应该使用主动模式来进行数据连接，并在防火墙开21和20端口。</p><h2 id="6-3-3-FTP传输模式"><a href="#6-3-3-FTP传输模式" class="headerlink" title="6.3.3 FTP传输模式"></a>6.3.3 FTP传输模式</h2><p>文本模式：ASCII模式，以文本序列传输数据。<br>二进制模式：Binary模式，以二进制序列传输数据。</p><h1 id="6-4-远程终端协议telnet"><a href="#6-4-远程终端协议telnet" class="headerlink" title="6.4 远程终端协议telnet"></a>6.4 远程终端协议telnet</h1><p>默认使用TDP23端口。</p><h1 id="6-5-远程桌面协议RDP-Remote-Desktop-Protocol"><a href="#6-5-远程桌面协议RDP-Remote-Desktop-Protocol" class="headerlink" title="6.5 远程桌面协议RDP(Remote Desktop Protocol)"></a>6.5 远程桌面协议RDP(Remote Desktop Protocol)</h1><h1 id="6-6-超文本传输协议HTTP-Hyper-Text-Transfer-Protocol"><a href="#6-6-超文本传输协议HTTP-Hyper-Text-Transfer-Protocol" class="headerlink" title="6.6 超文本传输协议HTTP(Hyper Text Transfer Protocol)"></a>6.6 超文本传输协议HTTP(Hyper Text Transfer Protocol)</h1><p>通过这个协议访问网站。</p><h2 id="6-6-1-万维网www-World-Wide-Web"><a href="#6-6-1-万维网www-World-Wide-Web" class="headerlink" title="6.6.1 万维网www(World Wide Web)"></a>6.6.1 万维网www(World Wide Web)</h2><p>(1)www提供分布式服务<br><img src="https://img-blog.csdnimg.cn/20200105224801732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(2)统一资源定位系统URL(Uniform Resource Locator)<br>有点像地址。<br><img src="https://img-blog.csdnimg.cn/20200105224813275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>网站的标识有多种方式，不同的端口，不同的IP地址，不同的域名(主机头)来区分。</p><h2 id="6-6-2-使用web代理服务器访问网站"><a href="#6-6-2-使用web代理服务器访问网站" class="headerlink" title="6.6.2 使用web代理服务器访问网站"></a>6.6.2 使用web代理服务器访问网站</h2><p>内网其它主机不能通过路由访问Internet，只能由web代理(在同一个网段里)访问外网，然后内网其它主机访问这个web代理来实现上网功能。如果web代理在外网，反而速度更慢。<br>(1)节省内网访问Internet的带宽(便于访问内容变化不大的网站)。<br>(2)绕过防火墙访问外网。例如访问某个禁止的网站A，但是假如通过在与A同一个网络中的web代理，就可以访问该网站。<br>(3)通过web代理避免被跟踪。</p><h1 id="6-7-电子邮件-SMTP-POP3-IMAP"><a href="#6-7-电子邮件-SMTP-POP3-IMAP" class="headerlink" title="6.7 电子邮件(SMTP, POP3, IMAP)"></a>6.7 电子邮件(SMTP, POP3, IMAP)</h1><p>SMTP发, POP3和IMAP是收。<br><img src="https://img-blog.csdnimg.cn/20200105224823180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考文献<br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;应用层的协议就是服务。&lt;/p&gt;
&lt;h1 id=&quot;6-1-域名协议DNS-Domain-Name-System-（转载学习）&quot;&gt;&lt;a href=&quot;#6-1-域名协议DNS-Domain-Name-System-（转载学习）&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC7%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC7%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</id>
    <published>2020-10-31T11:33:56.753Z</published>
    <updated>2020-10-31T11:33:08.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-1-网络安全介绍-转载学习"><a href="#7-1-网络安全介绍-转载学习" class="headerlink" title="7.1 网络安全介绍(转载学习)"></a>7.1 网络安全介绍(转载学习)</h1><h2 id="7-1-1-一个入侵实例"><a href="#7-1-1-一个入侵实例" class="headerlink" title="7.1.1 一个入侵实例"></a>7.1.1 一个入侵实例</h2><p>(1)端口扫描，指定一个公网范围扫描端口的地址，调查哪些主机开了1433端口。<br>(2)将地址拷贝到某个破解数据库管理员密码的软件。</p><h2 id="7-1-2-安全包括哪些方面"><a href="#7-1-2-安全包括哪些方面" class="headerlink" title="7.1.2 安全包括哪些方面"></a>7.1.2 安全包括哪些方面</h2><p>(1)数据(文件/文件夹)存储安全<br>(2)应用程序安全<br>(3)操作系统安全<br>(4)网络安全<br>(5)物理安全<br>(6)用户安全教育</p><h1 id="7-2-计算机网络上的通信面临的威胁"><a href="#7-2-计算机网络上的通信面临的威胁" class="headerlink" title="7.2 计算机网络上的通信面临的威胁"></a>7.2 计算机网络上的通信面临的威胁</h1><p>(1)截获——从网络上窃听他人的通信内容。(被动攻击)(例如cain软件)<br>(2)中断——有意中断他人在网络上的通信。(主动攻击)<br>(3)篡改——故意篡改网络上发送的报文。(主动攻击)(例如cain软件)<br>(4)伪造——伪造信息在网络上传送。(主动攻击)<br>例如，cain软件能够截获和篡改本网段的的报文。它是在主机通过ARP协议寻找网关地址(想上网)的时候，用ARP欺骗，把本电脑的地址发给那个主机，此时，网段内的所有的计算机的报文都会发给cain，这样主机访问外网的时候，都是通过cain访问的(主机访问cain提供的假域名，cain去访问真的域名，再把信息转给主机，这是一种DNS劫持)，既能篡改DNS解析结果，还能获取密码。同样的道理，局域网管理员可以在网关设置监视端口，获得本网段的所有信息。<br><img src="https://img-blog.csdnimg.cn/20200106175122956.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-2-1-被动攻击和主动攻击"><a href="#7-2-1-被动攻击和主动攻击" class="headerlink" title="7.2.1 被动攻击和主动攻击"></a>7.2.1 被动攻击和主动攻击</h2><p><img src="https://img-blog.csdnimg.cn/20200106175133444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>中断——拒绝服务式攻击<br>举例：DoS拒绝服务式攻击，通过在网络上拥挤一些没用的数据包来组断网络。一般会占用下载通道ADSL而不是上传通道UDP，因为下载的带宽要大得多。<br>DDoS分布式攻击，可以在网络上找很多有漏洞的网站(肉鸡)，给指定的服务器发流量来使网络拥挤吃掉带宽，对于这种方式没有什么好办法。<br><img src="https://img-blog.csdnimg.cn/2020010617514251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>篡改——修改域名解析的结果<br>类似于钓鱼网站，当用户想出入建设银行的域名，解析错误导致用户访问了错误的网站，当用户输入账号密码的话就会导致信息泄漏。<br>伪造——伪装成其它主机的IP地址<br>趁其它主机关机时，把IP地址伪装成该主机的IP地址，从而获取信息。</p><h1 id="7-3-计算机面临的威胁——恶意程序-rogue-program"><a href="#7-3-计算机面临的威胁——恶意程序-rogue-program" class="headerlink" title="7.3 计算机面临的威胁——恶意程序(rogue program)"></a>7.3 计算机面临的威胁——恶意程序(rogue program)</h1><p>(1)计算机病毒——会“传染”其它程序，“传染”是通过修改其它程序来把自身或其变种复制进去完成的。(熊猫烧香)<br>(2)计算机蠕虫——通过网络的通信功能将自身从一个结点发送到另一个结点并启动运行的程序。(消耗CPU资源)<br>(3)特洛伊木马——一种程序，它执行的功能超过所声称的功能。(和(1)(2)的区别是会和外界通信)<br>(4)逻辑炸弹——一种当运行环境满足某种特定条件时执行其它特殊功能的程序。</p><h2 id="7-3-1-木马程序的识别"><a href="#7-3-1-木马程序的识别" class="headerlink" title="7.3.1 木马程序的识别"></a>7.3.1 木马程序的识别</h2><p>查看会话netstat -n看看是否有可疑的会话；<br>运行msconfig服务，把隐藏微软服务掉，看看剩下的有哪些刻意；<br>杀毒软件。</p><h1 id="7-4-加密技术"><a href="#7-4-加密技术" class="headerlink" title="7.4 加密技术"></a>7.4 加密技术</h1><p>广泛应用于应用层加密。</p><h2 id="7-4-1-对称加密"><a href="#7-4-1-对称加密" class="headerlink" title="7.4.1 对称加密"></a>7.4.1 对称加密</h2><p>加密密钥和解密密钥是同一个。<br>缺点：密钥不适合在网上传；密钥是一对一的，如果有很多主机相互通信，有很多密钥需要维护；<br>优点：效率高。<br>加密包括加密算法和加密密钥。</p><h2 id="7-4-2-数据加密标准DES"><a href="#7-4-2-数据加密标准DES" class="headerlink" title="7.4.2 数据加密标准DES"></a>7.4.2 数据加密标准DES</h2><p>(1)它属于常规密钥密码体制，是一种分组密码。在加密前，先对整个铭文进行分组，每一个租场为64位，然后对每一个64位二进制数据进行加密处理，产生一组64位密文数据。最后将各组密文串接起来，即得出整个密文。使用的密钥是64位(实际密钥长度位56位，有8位数用来奇偶校验)。<br>(2)DES的保密性<br>仅取决于对密钥的保密，而算法本身是公开的。尽管人在破译DES上有很多进展，但是至今没有找到比穷举搜索密钥更有效的方法。<br>DES是世界上第一个公认的使用密码算法标准，它曾对密码学的发展做出了重大贡献。<br>目前较为严重的问题是DES的密钥的长度。<br>现在已经设计出来搜索DES密钥的专用芯片。<br>DES算法公开，所以破解取决于密钥长度，56位密码破解需要3.5-21min；128位密钥破解需要5.4*10^18年。</p><h2 id="7-4-2-非对称加密"><a href="#7-4-2-非对称加密" class="headerlink" title="7.4.2 非对称加密"></a>7.4.2 非对称加密</h2><p>(1) 加密密钥和解密密钥是不同的，有一对密钥对，公钥和私钥。<br>要么公钥加密私钥解密；要么私钥加密公钥解密。<br>(2)优点：给出私钥和公钥其中一个无法算出另一个。<br>(3)缺点：效率低。<br>(4)非对称加密实现细节：<br>设A是非对称加密机制；B为对称加密机制；A1要给A2传一组数据，很大，如果直接用非对称加密花的时间很长；为了加快速度，用对称加密手段B来加密这个数据得到加密后数据B’和密钥B给A1，速度很快；然后A1对密钥B进行非对称加密得到公钥A1’；A1把密钥A1’和数据B’发给A2；A2运用私钥解密A1’获得密钥B，再用密钥B解密这个数据，最终得到想要的结果。<br>通过这种对数据采用对称加密，对对称加密的密钥进行非对称加密的方式能实现快速加密。<br><img src="https://img-blog.csdnimg.cn/20200106175216686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-4-3-数字签名"><a href="#7-4-3-数字签名" class="headerlink" title="7.4.3 数字签名"></a>7.4.3 数字签名</h2><p><img src="https://img-blog.csdnimg.cn/20200106175232980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>防止抵赖，能够检查签名后的内容有没有被更改过。</p><h2 id="7-4-4-证书颁发机构CA"><a href="#7-4-4-证书颁发机构CA" class="headerlink" title="7.4.4 证书颁发机构CA"></a>7.4.4 证书颁发机构CA</h2><p>来验证公钥是否是证书颁发机构认证过。<br>为企业和用户办法数字证书，确认这些企业和个人的身份；<br>如果证书丢失，它要发布证书吊销列表；<br>企业和个人是信任证书颁发机构的。</p><h1 id="7-5-Internet上使用的安全协议"><a href="#7-5-Internet上使用的安全协议" class="headerlink" title="7.5 Internet上使用的安全协议"></a>7.5 Internet上使用的安全协议</h1><h2 id="7-5-1-安全套接字SSL-Secure-Sockets-Layer"><a href="#7-5-1-安全套接字SSL-Secure-Sockets-Layer" class="headerlink" title="7.5.1 安全套接字SSL(Secure Sockets Layer)"></a>7.5.1 安全套接字SSL(Secure Sockets Layer)</h2><p>(1)SSL的位置<br>是在应用层和传输层之间进行加密。好处是应用层和传输层都不需要来加密。不需要应用程序(应用层)来支持，但是需要在服务器配置证书。<br>例如，不使用SSL加密使用的是http://，使用SSL加密是https://。<br>注意，http://使用的是TCP的80端口，而https://使用的是TCP的443端口。<br><img src="https://img-blog.csdnimg.cn/20200106175250764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)SSL的配置(加密的实现)(https://)<br>客户端有一个浏览器IE，想要访问服务器端的网站web；<br>浏览器IE要访问网站web，此时网站web会把他的公钥给浏览器IE；<br>浏览器IE通过校验CA证书确保网站web的公钥是可靠的；<br>浏览器IE会产生一个对称密钥；<br>浏览器IE拿着网站web的公钥对它的对称密钥进行加密，发给网站web；<br>网站web用它的私钥进行解密，就得到了浏览器IE的对称密钥；<br>所以说，本质上是用对称密钥对数据进行加密的，公钥和私钥是用来对这个对称密钥进行加密的。这也是为什么https://刚开始打开的时候会有一些慢。<br>(3)另外一些协议使用的安全套接字SSL时对应的TCP端口<br>imaps tcp-993<br>pop3s tcp-995<br>smtps tcp-465<br>https tcp-443<br>(4)SSL提供的三个功能<br>-&gt;SSL服务器鉴别：允许用户证实服务器的身份；具有SSL功能的浏览器维持一个表，上面有一些可信赖的认证中心CA(Certificate Authority)和它们的公钥。<br>-&gt;加密的SSL会话：客户和服务器交互的所有数据都在发送方加密，在接收方解密。<br>-&gt;SSL客户鉴别：允许服务器证实客户的身份。</p><h2 id="7-5-2-网络层安全IPSec"><a href="#7-5-2-网络层安全IPSec" class="headerlink" title="7.5.2 网络层安全IPSec"></a>7.5.2 网络层安全IPSec</h2><p>网络层安全是底层安全，不需要应用程序支持，也不需要配置证书，对用户是透明的(感觉不到)。<br>(1)安全关联SA(Security Association)<br>在使用AH或ESP之前，先要从源主机到目的主机建立一条网络层的逻辑连接。此逻辑连接叫做安全关联SA。<br>IPsec就把传统的Internet无连接的网络层转换为具有逻辑连接的层。<br>SA是构成IPSec的基础，是两个通信实体经过协商(利用IKE协议)建立起来的一种协定，它决定了用来保护数据分组安全的安全协议(AH协议(只签名：只关心发送方的身份而不关心数据是否被窃取)或ESP协议(既签名又对数据加密))，转码方式，密钥及密钥的生存周期等。<br>(2)IPsec中最主要的2个协议<br>-&gt;鉴别首部AH(Authentication Header):AH鉴别源点和检查数据完整性，但不能保密。<br>在使用AH时，把AH首部插在原数据报数据部分的签名，同时把IP首部中的协议字段设置为51.<br>在传输过程中，中间的路由器都不查看AH首部。当数据报到达终点时，目的主机才会处理AH字段，以鉴别源点和检查数据报的完整性。<br><img src="https://img-blog.csdnimg.cn/20200106175317765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>-&gt;封装安全有效载荷ESP(Encapsulation Security Payload):ESP比AH复杂的多，它鉴别源点，检查数据完整性和提供保密。<br>使用ESP时，IP数据报首部的协议字段设置为50.当IP首部检查到协议字段是50时，就知道在IP首部后面紧跟着ESP首部，同时在原IP数据报后面增加了2个字段，即ESP尾部和ESP数据。<br><img src="https://img-blog.csdnimg.cn/20200106175332616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="7-6-数据链路层安全-链路加密与端到端加密"><a href="#7-6-数据链路层安全-链路加密与端到端加密" class="headerlink" title="7.6 数据链路层安全(链路加密与端到端加密)"></a>7.6 数据链路层安全(链路加密与端到端加密)</h1><p>PPP 身份验证<br>ADSL</p><h1 id="7-7-防火墙-firewall"><a href="#7-7-防火墙-firewall" class="headerlink" title="7.7 防火墙(firewall)"></a>7.7 防火墙(firewall)</h1><p>防火墙用来解决内联网和外联网的安全问题。<br>防火墙是由软件，硬件构成的系统，是一种特殊编程的路由器，用来在两个网络之间实施接入控制策略。接入控制策略是由防火墙的单位自行制定的，为的是可以最适合本单位的需要。<br>防火墙内的网络称为“可信赖的网络”(trusted network)，而将外部的Internet称为“不可信赖的网络”(untrusted network)。</p><h2 id="7-7-2-防火墙在互联网中的位置"><a href="#7-7-2-防火墙在互联网中的位置" class="headerlink" title="7.7.2 防火墙在互联网中的位置"></a>7.7.2 防火墙在互联网中的位置</h2><p><img src="https://img-blog.csdnimg.cn/20200106175739708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-7-3-防火墙的功能"><a href="#7-7-3-防火墙的功能" class="headerlink" title="7.7.3 防火墙的功能"></a>7.7.3 防火墙的功能</h2><p>(1)阻止：阻止某种类型的通信量通过防火墙(从外部网络到内部网络，或反过来)。<br>(2)允许：允许某种类型的通信量通过防火墙(从外部网络到内部网络，或反过来)。<br>防火墙必须能够识别通信量的各种类型。一般是阻止功能。</p><h2 id="7-7-4-防火墙技术的分类"><a href="#7-7-4-防火墙技术的分类" class="headerlink" title="7.7.4 防火墙技术的分类"></a>7.7.4 防火墙技术的分类</h2><p>(1)网络层防火墙：用来防止整个网络出现外来非法的入侵。属于这类的有分组过滤和授权服务器。前者检查所有流入本网络的信息，然后拒绝不符合事先制订好的一套准则的数据，而后者则是检查用户的登录是否合法。<br>可以基于数据包，源地址，目标地址，协议和端口来控制流量。<br>(2)应用层防火墙：从应用程序来进行接入控制，通常使用应用网关或代理服务器来区分各种应用。例如，可以只允许用过访问www的应用，而阻止FTP应用的通过。<br>应用级防火墙可以检查数据报的内容。<br>可以基于数据包，源地址，目标地址，协议和端口，用户名，时间段来控制内容，可以放病毒，可见功能更强大。</p><h2 id="7-7-5-防火墙的结构"><a href="#7-7-5-防火墙的结构" class="headerlink" title="7.7.5 防火墙的结构"></a>7.7.5 防火墙的结构</h2><p>(1)边缘防火墙<br><img src="https://img-blog.csdnimg.cn/20200106175901517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)三向外围网<br><img src="https://img-blog.csdnimg.cn/20200106175907267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>DMZ是公司内部的服务器。内网可以访问外网，外网不能访问内网，只能访问服务器DMZ。<br>(3)背靠背防火墙<br><img src="https://img-blog.csdnimg.cn/20200106175931459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(4)单一网卡防火墙<br><img src="https://img-blog.csdnimg.cn/20200106175947262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考文献<br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;7-1-网络安全介绍-转载学习&quot;&gt;&lt;a href=&quot;#7-1-网络安全介绍-转载学习&quot; class=&quot;headerlink&quot; title=&quot;7.1 网络安全介绍(转载学习)&quot;&gt;&lt;/a&gt;7.1 网络安全介绍(转载学习)&lt;/h1&gt;&lt;h2 id=&quot;7-1-1-一个入侵实</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC8%E5%B1%82%20Internet%E4%B8%8A%E7%9A%84%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC8%E5%B1%82%20Internet%E4%B8%8A%E7%9A%84%E9%9F%B3%E9%A2%91%E8%A7%86%E9%A2%91/</id>
    <published>2020-10-31T11:33:56.753Z</published>
    <updated>2020-10-31T11:33:26.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="8-1-Internet上传输音频视频面临的问题（转载学习）"><a href="#8-1-Internet上传输音频视频面临的问题（转载学习）" class="headerlink" title="8.1 Internet上传输音频视频面临的问题（转载学习）"></a>8.1 Internet上传输音频视频面临的问题（转载学习）</h1><p>占用带宽高，要求网速恒定延迟低。而数据信息，对带宽要求低，网速不稳定，延迟高也没事。<br>(1)延迟：发送时延，传播时延，排队时延，处理时延(路由的路径选择)，不过对于非交互式的音频视频的影响会小一些。<br>(2)带宽不稳定。需要在接收端设置缓存(看电影时可以弥补数据包没按顺序接收到的问题)。</p><h1 id="8-2-Internet上提供的音频-视频服务的类型"><a href="#8-2-Internet上提供的音频-视频服务的类型" class="headerlink" title="8.2 Internet上提供的音频/视频服务的类型"></a>8.2 Internet上提供的音频/视频服务的类型</h1><p>(1)流式存储音频/视频——边下载边播放。<br>(节省客户端硬盘空间，不用下载；保护视频版权)<br>(2)流式实况音频/视频——边录制边发送。<br>(通过网络，现场直播)<br>(3)交互式音频/视频——实时交互式通信。<br>(流式：streaming)</p><h1 id="8-3-流式实况音频-视频"><a href="#8-3-流式实况音频-视频" class="headerlink" title="8.3 流式实况音频/视频"></a>8.3 流式实况音频/视频</h1><p><img src="https://img-blog.csdnimg.cn/20200106123534114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="8-4-IP电话"><a href="#8-4-IP电话" class="headerlink" title="8.4 IP电话"></a>8.4 IP电话</h1><p>狭义的IP电话：IP网络上打点电话。“IP网络”指“使用IP协议的分组交换网”的简称。<br>广义的IP电话：不仅仅是电话通信，而且还可以是在IP网络上进行交互式多媒体实时通信(包括话音/视像等)，甚至还包括即时传信IM(Instant Messaging)(QQ聊天/视频)。</p><h2 id="8-4-1-IP电话网关的机中连接方法"><a href="#8-4-1-IP电话网关的机中连接方法" class="headerlink" title="8.4.1 IP电话网关的机中连接方法"></a>8.4.1 IP电话网关的机中连接方法</h2><p><img src="https://img-blog.csdnimg.cn/20200106123538502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="8-4-2-IP电话的通话质量"><a href="#8-4-2-IP电话的通话质量" class="headerlink" title="8.4.2 IP电话的通话质量"></a>8.4.2 IP电话的通话质量</h2><p>由2个因素决定。<br>(1)通话双方端到端的时延和时延抖动。<br>(2)话音分组的丢失率。<br>但是这两个因素是不确定的，是取决于当时网络上的通信量。<br>经验证明，在电话交谈中，端到端的时延不应超过250ms，否则交谈者就能感受到不自然。</p><h2 id="8-4-3-改进网络层“尽最大努力交付”的服务"><a href="#8-4-3-改进网络层“尽最大努力交付”的服务" class="headerlink" title="8.4.3 改进网络层“尽最大努力交付”的服务"></a>8.4.3 改进网络层“尽最大努力交付”的服务</h2><p>注意，网络层的目的就是“尽最大努力交付”，他不关心数据包是什么，谁着急。但是音频/视频就应该优先级更高，所以需要改进网络层“尽最大努力交付”的服务(QoS)。<br>服务质量QoS是服务性能的总效果，此效果决定了一个用户对服务的满意程度。因此在最简单的意义上，有服务质量的服务就是能够满足用户的应用需求的服务。<br>服务质量可用若干基本的性能指标来描述，包括可用性，差错率，响应时间，吞吐量，分组丢失率，连接建立时间，故障检测和改正时间等。服务提供者可向其用户保证某一种等级的服务质量。</p><h2 id="8-4-4-服务器如何实现优先传输音频-视频数据包"><a href="#8-4-4-服务器如何实现优先传输音频-视频数据包" class="headerlink" title="8.4.4 服务器如何实现优先传输音频/视频数据包"></a>8.4.4 服务器如何实现优先传输音频/视频数据包</h2><p>QoS的一些手段：<br>(1)基于标记的优先级确认<br><img src="https://img-blog.csdnimg.cn/20200106123553294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(H1-&gt;H3是实时音频通信，H2-&gt;H4是文件传输)<br>需要给不同性质的分组打上不同的”标记”。当H1和H2的分组进入R1时，R1应能识别实时数据分组，并使这些分组以高优先级进入输出队列，而仅在队列有多余空间时才准许低优先级的FTP数据分组进入。</p><p>(2)基于分类的优先级确认<br><img src="https://img-blog.csdnimg.cn/20200106123615185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>应当使路由器增加分类(Classification)机制，即路由器根据某些准则(例如根据发送数据的地址)对输入分组进行分类，然后对不同类别的通信量给予不同的优先级。</p><p>(3)流量管制机制<img src="https://img-blog.csdnimg.cn/20200106123628613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>路由器应能对数据流进行通信量的管制(policing)，使该数据流不影响其它正常数据流在网络中通过。例如可将H1的数据率限定为1Mb/s。R1不停地监视H1的数据率。只要其数据率超过规定的1Mb/s，R1就将其中的某些分组丢弃。</p><p>(4)调度机制<br><img src="https://img-blog.csdnimg.cn/20200106123636302.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>应在路由器中再增加调度(scheduling)机制。利用调度功能给实时音频分配1.0Mb/s的带宽,给文教传送分配0.5Mb/s的带宽(相当于在带宽为1.5Mb/s的链路中划分出两个逻辑链路)，因而对这两种应用都有相应的服务质量保证。</p><p>(5)呼叫接纳<br><img src="https://img-blog.csdnimg.cn/20200106123656660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>总数据率已经超过1.5Mb/s链路的带宽。比较合理的做法是让一个数据流通过1.5Mb/s的链路，而组织另一个数据流的通过。这就需要呼叫接纳(call admission)机制。数据流要预先声明所需的服务质量，然后要么被准许进入网络，要么被拒绝进入。</p><p>参考文献<br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;8-1-Internet上传输音频视频面临的问题（转载学习）&quot;&gt;&lt;a href=&quot;#8-1-Internet上传输音频视频面临的问题（转载学习）&quot; class=&quot;headerlink&quot; title=&quot;8.1 Internet上传输音频视频面临的问题（转载学习）&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC5%E5%B1%82%20%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC5%E5%B1%82%20%E4%BC%A0%E8%BE%93%E5%B1%82/</id>
    <published>2020-10-31T11:33:56.753Z</published>
    <updated>2020-10-31T11:32:48.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第五章-传输层（转载学习）"><a href="#第五章-传输层（转载学习）" class="headerlink" title="第五章 传输层（转载学习）"></a>第五章 传输层（转载学习）</h1><p>-&gt;传输层协议UDP和TCP<br>-&gt;网络安全<br>-&gt;TCP可靠传输的实现<br>-&gt;TCP的流量控制<br>-&gt;TCP的拥塞控制<br>-&gt;TCP的运输连接管理</p><h1 id="5-1-OSI和DoD模型"><a href="#5-1-OSI和DoD模型" class="headerlink" title="5.1 OSI和DoD模型"></a>5.1 OSI和DoD模型</h1><p>下图必须背下来。尤其是传输层和网络层的协议。<br><img src="https://img-blog.csdnimg.cn/20200104182238490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>传输层最大数据包是65535字节，而网络层数据最大只有1480字节。所以需要分段，但是只要分段，就有可能丢包，因为网络层不负责可靠传输。所以要求服务器和客户端保持会话，直到数据传输完成。</p><p>-&gt;TCP(Transmission Control Protocol)传输控制协议<br>应用场景：需要将要传输的文件分段传输时；就需要TCP协议来建立会话实现可靠传输；同时也有流量控制功能。(例如QQ传文件)<br>查看会话 netstat -n<br>查看建立会话的进程 netstat -nb</p><p>-&gt;UDP(User Data Protocol)用户数据报协议<br>应用场景：一个数据包就能完成数据通信；不需要建立会话和流量控制；多播/广播；是一种不可靠传输。(例如QQ聊天，屏幕广播)</p><h1 id="5-2-传输层协议和应用层协议的关系"><a href="#5-2-传输层协议和应用层协议的关系" class="headerlink" title="5.2 传输层协议和应用层协议的关系"></a>5.2 传输层协议和应用层协议的关系</h1><p><img src="https://img-blog.csdnimg.cn/2020010418225712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(1)TCP和UDP协议和不同的端口即可对应一个应用层的协议。注意，53大部分是与UDP相连。<br>(2)熟知数值一般为0-1023，登记端口号数值1024-49151，客户端口号数值为49152-65535.<br>(3)常用的应用层协议使用的端口(号)：<br>http = TCP + 80<br>Https = TCP + 443<br>RDP = TCP + 3389<br>ftp = TCP + 21<br>共享文件夹 = TCP + 445<br>SMTP = TCP + 25<br>POP3 = TCP + 110<br>telnet = TCP + 23<br>SQL = TCP + 1433<br>DNS = UDP + 53<br>(注意与4.6 的协议号的区别)</p><h1 id="5-3-服务和应用层协议的关系"><a href="#5-3-服务和应用层协议的关系" class="headerlink" title="5.3 服务和应用层协议的关系"></a>5.3 服务和应用层协议的关系</h1><p>防火墙是基于网卡的，只打开必要的端口，不必要的端口不允许接收数据，不影响服务的运行和监听。<br>服务使用TCP或UDP的端口侦听客户端请求；<br>客户端使用IP地址定位服务器，使用目标端口，定位服务；<br>可以在服务器网卡上设置只开放必要的端口，实现服务器网络安全。</p><h2 id="5-3-1-如何在Windows上安装服务"><a href="#5-3-1-如何在Windows上安装服务" class="headerlink" title="5.3.1 如何在Windows上安装服务"></a>5.3.1 如何在Windows上安装服务</h2><p>DNS服务<br>Web服务<br>SMTP<br>POP3</p><h2 id="5-3-2-如何查看服务侦听的端口"><a href="#5-3-2-如何查看服务侦听的端口" class="headerlink" title="5.3.2 如何查看服务侦听的端口"></a>5.3.2 如何查看服务侦听的端口</h2><p>netstat -a<br>netstat -an 以数字的形式查看端口<br>netstat -n 查看建立的会话<br>netstat -nb 查看建立会话的进程<br>telnet 192.168.80.100 3389 测试到远程计算机某个端口是否打开<br><img src="https://img-blog.csdnimg.cn/20200104182334264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-3-3-如何更改服务使用默认端口"><a href="#5-3-3-如何更改服务使用默认端口" class="headerlink" title="5.3.3 如何更改服务使用默认端口"></a>5.3.3 如何更改服务使用默认端口</h2><p>可以迷惑病毒，使系统更加安全。</p><h2 id="5-3-4-如何设置Windows网络安全"><a href="#5-3-4-如何设置Windows网络安全" class="headerlink" title="5.3.4 如何设置Windows网络安全"></a>5.3.4 如何设置Windows网络安全</h2><p>设置本地连接 TCP/IP筛选</p><h1 id="5-4-传输层功能和端口范围"><a href="#5-4-传输层功能和端口范围" class="headerlink" title="5.4 传输层功能和端口范围"></a>5.4 传输层功能和端口范围</h1><p><img src="https://img-blog.csdnimg.cn/20200104182348169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-4-1-传输层协议和网络层协议的主要区别"><a href="#5-4-1-传输层协议和网络层协议的主要区别" class="headerlink" title="5.4.1 传输层协议和网络层协议的主要区别"></a>5.4.1 传输层协议和网络层协议的主要区别</h2><p>网络层实现如何把数据包从这个地址(服务器)发送到另一个地址(服务器)。<br>传输层实现如何让这个应用程序找到对应计算机的应用程序(相对应的应用程序实现逻辑通信)。<br><img src="https://img-blog.csdnimg.cn/20200104182407430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-4-2-传输层的主要功能"><a href="#5-4-2-传输层的主要功能" class="headerlink" title="5.4.2 传输层的主要功能"></a>5.4.2 传输层的主要功能</h2><p>(1)传输层为应用进程之间提供了端到端的逻辑通信(但网络层是为主机之间提供逻辑通信)。<br>(2)传输层还要对收到的报文进行差错检验。<br>(3)传输层提供面向连接(TCP)和无连接(UDP)的服务。</p><h2 id="5-4-3-传输层的端口"><a href="#5-4-3-传输层的端口" class="headerlink" title="5.4.3 传输层的端口"></a>5.4.3 传输层的端口</h2><p><img src="https://img-blog.csdnimg.cn/20200104182425652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(1)TCP的端口<br>端口用一个16位端口号进行标志。<br>端口号只具有本地意义，即端口号只是为了标志本计算机应用层的各进程。在Internet中不同计算机的相同端口号是没有联系的(最好不要有冲突)。</p><h1 id="5-5-UDP协议"><a href="#5-5-UDP协议" class="headerlink" title="5.5 UDP协议"></a>5.5 UDP协议</h1><p>(1)UDP是无连接的，即发送数据之前不需要建立连接。<br>(2)UDP使用尽最大努力交付，即不保证可靠交付，同时也不使用拥塞控制。<br>(3)UDP是面向报文的，适合多媒体通信的要求。<br>(4)UDP支持一对一，一对多，多对一，多对多交互通信。<br>(5)UDP首部开销小，只有8个字节。<br><img src="https://img-blog.csdnimg.cn/20200104182437891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-5-1-UDP的首部格式"><a href="#5-5-1-UDP的首部格式" class="headerlink" title="5.5.1 UDP的首部格式"></a>5.5.1 UDP的首部格式</h2><p><img src="https://img-blog.csdnimg.cn/20200104182453304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首部中的长度指的是UDP用户数据报的长度(首部+数据)。<br>伪首部用于检验和，我的理解是伪首部是IP数据包首部的后部分。<br><img src="https://img-blog.csdnimg.cn/20200104182503206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="5-6-TCP协议"><a href="#5-6-TCP协议" class="headerlink" title="5.6 TCP协议"></a>5.6 TCP协议</h1><p>(1)TCP是面向连接的传输层协议。(三次握手)<br>(2)每一条TCP连接智能有两个端点(endpoint)，每一条TCP连接只能时点对点的(一对一)。<br>(3)TCP提供可靠交付的服务。(确保不丢包)<br>(4)TCP提供全双工通信。(因为需要接收端的反馈，例如如果接收端处理不过来，可让发送端慢一点，流量控制)<br>(5)面向字节流。<br><img src="https://img-blog.csdnimg.cn/20200104182520945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果要传输一个比较大的数据，首先一次只会传输一小块，这个数据块的大小是没有规律的。加上数据包数据帧的头，发送给接收端，接收端去掉首部，再次拼接。</p><h2 id="5-6-1-TCP的连接"><a href="#5-6-1-TCP的连接" class="headerlink" title="5.6.1 TCP的连接"></a>5.6.1 TCP的连接</h2><p>(1)TCP把连接作为最基本的抽象。<br>(2)每一条TCP连接有两个端点。<br>(3)TCP连接的端点不是主机，不是主机的IP地址，不是应用程序，也不是传输层协议端口，TCP连接的端点叫 套接字(socket).<br>-&gt;套接字socket = (IP地址:端口号)<br>-&gt;每一条TCP连接唯一地被通信两端的两个套接字所确定，即：<br>-&gt;TCP连接 ::= {socket1, socket2} = {(IP1:port1), (IP2:port2)}<br>(4)端口号拼接到IP地址即构成了套接字。</p><h1 id="5-7-TCP如何实现可靠传输"><a href="#5-7-TCP如何实现可靠传输" class="headerlink" title="5.7 TCP如何实现可靠传输"></a>5.7 TCP如何实现可靠传输</h1><p>(1)可靠传输的工作原理——停止等待协议。<br><img src="https://img-blog.csdnimg.cn/20200104182536235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>-&gt;在发送完一个分组后，必须暂时保留已发送的分组的副本。<br>-&gt;分组和确认分组都必须进行编号。<br>-&gt;超时计时器的重传时间应当比数据在分组传输的平均往返时间更长一些。<br>(2)确认丢失和确认迟到<br><img src="https://img-blog.csdnimg.cn/20200104182551725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(3)可靠通信的实现<br>-&gt;使用上述的确认和重传机制，微秒就可以在不可靠的传输网络上实现可靠的通信。<br>-&gt;这种可靠传输的协议常称为自动重传请求ARQ(Automatic Repeat reQuest)。<br>-&gt;ARQ表明重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组。<br>-&gt;缺点，信道利用率低。<br><img src="https://img-blog.csdnimg.cn/202001041825590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>-&gt;信道利用率U<br><img src="https://img-blog.csdnimg.cn/20200104182617681.png" alt="在这里插入图片描述"><br>(4)流水线传输(发送方)<br>发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。由于信道上一直有数据不间断的传送，这种传输方式可获得很高的信道利用率。<br><img src="https://img-blog.csdnimg.cn/20200104182630295.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(5)连续ARQ协议<br><img src="https://img-blog.csdnimg.cn/20200104182635697.png" alt="在这里插入图片描述"><br>如果1确认收到了，则滑动窗口。<br><img src="https://img-blog.csdnimg.cn/20200104182647647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如果12收到了，3没有收到，则滑动窗口会会回溯到3位置，重新发送。<br>(6)累计确认(接收方)<br>接收方一般采用累计确认的方式。<br>优点：容易实现，信道利用率高。<br>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息。</p><h1 id="5-8-TCP报文段的首部格式"><a href="#5-8-TCP报文段的首部格式" class="headerlink" title="5.8 TCP报文段的首部格式"></a>5.8 TCP报文段的首部格式</h1><p><img src="https://img-blog.csdnimg.cn/20200104182702877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(1)源端口：2个字节16位。<br>(2)目的端口：2个字节16位。<br>(3)序号：当前数据的第一个字节在整个文件中的序号。<br>(4)确认号ack：接收端发送，提示发送端下一次该发的数据在整个文件中的序号。接收端收到后，会把这个序号之前的数据从缓存中删掉。<br>(5)数据偏移：当前TCP报文段第多少个字节后是TCP的数据部分了。数据偏移最多表示1111，即15，他最多可以表示15乘以4，即60个字节的偏移量，所以选项+填充最多只能是40个字节。<br>(6)保留：6位，无作用。<br>(7)URG：urgent，意思是优先级高，发送端优先发送，而不是在缓存中排队。<br>(8)ACK：acknowledge，1意味着确认建立了会话。<br>(9)PSH：1意味着接收端优先读取，而不是在缓存中排队。<br>(10)RST：reset，1意味着TCP会话出现严重错误，必须释放和重新连接。<br>(11)SYN：同步。1意味着要发起会话。<br>(12)FIN：finish，1意味着释放连接。<br>(13)窗口：接收端先发，发送端根据接收端的窗口尺寸确定发送端窗口尺寸。<br>(14)检验和：<br>(15)紧急指针：只有URG为1才有用。</p><h2 id="5-8-1-抓包分析P64"><a href="#5-8-1-抓包分析P64" class="headerlink" title="5.8.1 抓包分析P64"></a>5.8.1 抓包分析P64</h2><p>(1)<br><img src="https://img-blog.csdnimg.cn/2020010418271350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一步，ARP，建立可靠传输<br>第二步，UDP(DNS同时占用UDP和TCP的53端口)，域名解析<br>第三步，TCP，识别网关MAC地址</p><p>(2)cmd打开控制台如下，当前是建立了2个会话。<br><img src="https://img-blog.csdnimg.cn/20200104182730288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(3)浅蓝：请求的数据包；深蓝：得到的结果；<br>192是我方地址；8是服务器地址；<br><img src="https://img-blog.csdnimg.cn/20200104182741822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(4)两个SYN是双方确认建立了会话，MSS意思是最大数据包1460字节，web端(219.148.36.48)最多能缓存win=64240字节，我端(192.168.80.63)最多能缓存win=65535字节,如果某一方发了另一方win字节个数据对方都没有确认，那么就暂停。标记为TCP这三行(12,13,14)，不光是建立对话，还协商了一些参数。<br><img src="https://img-blog.csdnimg.cn/20200104182755319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(5)第15行，开始正式通信，HTTP。GET的意思是我要访问这个网站了。白框内写着各个层的数据首部的结构。<br><img src="https://img-blog.csdnimg.cn/20200104182804430.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目标端口Src Port是80，源端口Dst Port是1057，序号Sep是1，确认号Ack是1，数据部分长度是1-203字节。<br><img src="https://img-blog.csdnimg.cn/20200104182816908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(6)219-&gt;192是发送网页信息，192-&gt;219是确认反馈。注意，16第一次发送数据和19反馈接收是没有数据len=0。<br><img src="https://img-blog.csdnimg.cn/20200104182826925.png" alt="在这里插入图片描述"><br>从建立会话，到传输数据到确认反馈的一个过程如下，15-19。<br><img src="https://img-blog.csdnimg.cn/2020010418283931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="5-9-TCP如何实现可靠传输P67"><a href="#5-9-TCP如何实现可靠传输P67" class="headerlink" title="5.9 TCP如何实现可靠传输P67"></a>5.9 TCP如何实现可靠传输P67</h1><h2 id="5-9-1-以字节为单位的滑动窗口技术"><a href="#5-9-1-以字节为单位的滑动窗口技术" class="headerlink" title="5.9.1 以字节为单位的滑动窗口技术"></a>5.9.1 以字节为单位的滑动窗口技术</h2><p>A的发送窗口是由B的接受窗口长度决定的。<br>在没有收到B确认收到之前，A不能删掉滑动窗口内的内容。<br>A可以持续给B发送，直到A的滑动窗口内数据都发了。<br><img src="https://img-blog.csdnimg.cn/20200104182910778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>B收到后给A发确认收到的反馈ACK，序号是下一个应该发送的字节的序号，A收到后，就可以滑动窗口到对应的位置。例如B反馈ACK是7，那么A的滑窗可以移动到7位置，1-6删除。21-26可以发送。<br><img src="https://img-blog.csdnimg.cn/20200104182934629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>B收到1-6之后，也开始滑窗，B的应用程序可以读取1-6的数据。B的滑窗继续接收。<br><img src="https://img-blog.csdnimg.cn/2020010418294182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上是正常状态下的情况。如果出现丢失情况，例如7-9丢失，此时B反馈的ACK=7.因为10-12收到了，因此B发送SACK(选择性确认)，A只发送7-9.<br><img src="https://img-blog.csdnimg.cn/20200104182958855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-9-2-超时重传时间的确定"><a href="#5-9-2-超时重传时间的确定" class="headerlink" title="5.9.2 超时重传时间的确定"></a>5.9.2 超时重传时间的确定</h2><p>TCP美发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传时间到了，但是还没有收到数据，那么就重传这一报文段。<br>RTTs(new) = (1 - alpha) x (RTTs(old)) + alpha x (new RTT样本)<br>超时重传时间应略大于上面得出的加权平均往返时间RTTs。alpha推荐值是0.125.<br>这个公式的目的是根据网速和带宽的实时情况调整往返时间。</p><h1 id="5-10-TCP如何实现流量控制P68"><a href="#5-10-TCP如何实现流量控制P68" class="headerlink" title="5.10 TCP如何实现流量控制P68"></a>5.10 TCP如何实现流量控制P68</h1><p>解决通信两端处理时间不一样的问题。通过实时调整滑窗尺寸的大小(尺寸甚至可以是0)来实现流量控制。接收端主动调整滑窗大小，发送端根据接收端发送的报文调整相应的滑窗。发送端也会定时发送报文向接收端确认滑窗信息，避免接收端发送的相关调整滑窗大小的报文丢失带来的影响。</p><h1 id="5-11-TCP如何避免网络拥塞"><a href="#5-11-TCP如何避免网络拥塞" class="headerlink" title="5.11 TCP如何避免网络拥塞"></a>5.11 TCP如何避免网络拥塞</h1><p>(1)出现资源拥塞的条件：对资源需求的总和&gt;可用资源。<br>(2)拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由区，以及与降低网络传输性能有关的所有因素。<br>(3)流量控制往往指在给定的发送端和接收端之间的点对点通信量的控制，它所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p><h2 id="5-11-1-拥塞控制起到的作用"><a href="#5-11-1-拥塞控制起到的作用" class="headerlink" title="5.11.1 拥塞控制起到的作用"></a>5.11.1 拥塞控制起到的作用</h2><p>红线和绿线之间是数据丢失内容。<br><img src="https://img-blog.csdnimg.cn/20200104183007298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.11.2 慢开始和拥塞避免<br>(1)发送方维持 拥塞窗口cwnd(congestion window)<br>(2)发送方控制拥塞窗口的原则是：<br>只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去；<br>只要网络出现拥塞，拥塞窗口就减少一些，以减少注入到网络中的分组数。<br>(3)慢开始算法的原理<br><img src="https://img-blog.csdnimg.cn/20200104183026234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(4)设置慢开始门限状态变量ssthresh<br>慢开始门限状态变量ssthresh的用法如下：<br>当cwnd&lt;ssthresh时，使用慢开始算法；<br>当cwnd&gt;ssthresh时，停止使用慢开始算法，改用拥塞避免算法；<br>当cwnd=ssthresh时，使用慢开始算法或拥塞避免算法均可；<br>(5)拥塞避免算法的思路<br>让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍，使拥塞窗口cwnd按线性规律缓慢增长。<br>(6)当网络出现拥塞时对策<br>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞(其根据就是没有按时收到确认)，就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半(但是不能小于2)。<br>然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。<br>这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够的时间吧队列中积压的分组处理完毕。<br>(7)慢开始和拥塞避免算法的实现举例<br><img src="https://img-blog.csdnimg.cn/20200104183041722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>-&gt;拥塞避免并非指完全能够避免拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。<br>-&gt;拥塞避免是说在拥塞避免阶段吧拥塞避免窗口控制为按线性规律增长，使网络比较不容易出现拥塞。</p><h2 id="5-11-3-快重传和快恢复"><a href="#5-11-3-快重传和快恢复" class="headerlink" title="5.11.3 快重传和快恢复"></a>5.11.3 快重传和快恢复</h2><p>快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方。<br>当发送端收到连续三个重复的确认时，就执行“乘法减少”算法，即把慢开始门限ssthresh减半，但拥塞窗口cwnd现在不设置为1，而是设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法(“加法增大”)，使拥塞窗口缓慢地线性增大。<br><img src="https://img-blog.csdnimg.cn/20200104183058971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-11-4-发送窗口的实际上限制"><a href="#5-11-4-发送窗口的实际上限制" class="headerlink" title="5.11.4 发送窗口的实际上限制"></a>5.11.4 发送窗口的实际上限制</h2><p>取接收方窗口和 拥塞窗口 这两个变量中的较小值。<br>发送窗口的上限制 = min {rwnd, cwnd}.</p><h1 id="5-12-TCP传输连接管理"><a href="#5-12-TCP传输连接管理" class="headerlink" title="5.12 TCP传输连接管理"></a>5.12 TCP传输连接管理</h1><p>传输连接有三个阶段，即：连接建立，数据传送，连接释放。<br>TCP连接的建立都是采用客户服务器方式。<br>主动发起连接建立的应用进程叫做客户(client)。<br>被动等待连接建立的应用进程叫做服务器(server)。<br><img src="https://img-blog.csdnimg.cn/20200104183113214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>头两次握手除了确定双方都能联通外，还通知了双方的一些端口信息。<br>第三次握手原因：假如把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机A和B之间的通信，假定A给B发送一个连接请求分组，B收到了这个分组，并发送了确认应答分组。按照两次握手的协定，B认为连接已经成功地建立了，可以开始发送数据分组。可是，B的应答分组在传输中被丢失的情况下，A将不知道B是否已准备好，A认为连接还未建立成功，将忽略B发来的任何数据分组，这样就形成了死锁。<br><img src="https://img-blog.csdnimg.cn/2020010418312417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考文献<br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第五章-传输层（转载学习）&quot;&gt;&lt;a href=&quot;#第五章-传输层（转载学习）&quot; class=&quot;headerlink&quot; title=&quot;第五章 传输层（转载学习）&quot;&gt;&lt;/a&gt;第五章 传输层（转载学习）&lt;/h1&gt;&lt;p&gt;-&amp;gt;传输层协议UDP和TCP&lt;br&gt;-&amp;gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC4%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC4%E5%B1%82%20%E7%BD%91%E7%BB%9C%E5%B1%82/</id>
    <published>2020-10-31T11:33:56.748Z</published>
    <updated>2020-10-31T11:30:55.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-1-网络层提供的服务-转载学习"><a href="#4-1-网络层提供的服务-转载学习" class="headerlink" title="4.1 网络层提供的服务(转载学习)"></a>4.1 网络层提供的服务(转载学习)</h1><h2 id="4-1-1-网络层的作用"><a href="#4-1-1-网络层的作用" class="headerlink" title="4.1.1 网络层的作用"></a>4.1.1 网络层的作用</h2><p>负责在不同的网络之间(基于数据包的IP地址)尽力转发数据包，不负责丢包重传和接收顺序。<br>有点像送快递，一个人往另一个地方寄快递，每个快递走不同的路线，可能后发的先到了，也可能丢件了。但是网络层不管这些，只管寄快递。<br><img src="https://img-blog.csdnimg.cn/20200103224039867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数据包在Internet中的传输，Internet既有局域网，又有广域网，既有光纤，又有铜线，无线，还有不同的协议，这是Internet复杂所在。<br>路由器是三层设备：能看到网络层的IP地址来选择路径。<br><img src="https://img-blog.csdnimg.cn/20200103224044522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-1-2-互联网络与虚拟互联网络"><a href="#4-1-2-互联网络与虚拟互联网络" class="headerlink" title="4.1.2 互联网络与虚拟互联网络"></a>4.1.2 互联网络与虚拟互联网络</h2><p>(1)互联网互联的设备<br>中间设备又称为中间系统或中继(relay)系统。</p><blockquote><p>-&gt;物理层中继系统：转发器(repeater)，有点像集线器。<br>-&gt;数据链路层中继系统：网桥或桥接器(bridge)。<br>-&gt;网络层中继系统：路由器(router)。<br>-&gt;传输层/应用层中继系统：网关(gateway)器。<br>网关就是路由器接口的地址。一般是本网段第一个地址。</p></blockquote><p>(2)网络需要解决的问题<br><img src="https://img-blog.csdnimg.cn/20200105161422907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(3)虚拟网络把复杂的Internet看成一个网络，化简问题。虚拟互联网络就是逻辑互联网络，他的意思就是互联起来的各种物理网络的异构性本来就是客观存在的， 但是我们利用IP协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络，而不用考虑具体的网络异构细节。<br><img src="https://img-blog.csdnimg.cn/20200103224137911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-2-网络设备和OSI参考模型的关系"><a href="#4-2-网络设备和OSI参考模型的关系" class="headerlink" title="4.2 网络设备和OSI参考模型的关系"></a>4.2 网络设备和OSI参考模型的关系</h1><h2 id="4-2-1举例，PC4向PC3传输数据"><a href="#4-2-1举例，PC4向PC3传输数据" class="headerlink" title="4.2.1举例，PC4向PC3传输数据"></a>4.2.1举例，PC4向PC3传输数据</h2><p><img src="https://img-blog.csdnimg.cn/20200103224145981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>PC：计算机；Hub：集线器；Switch：交换机；Router：路由</p><p><strong>发送端(封装)：</strong></p><blockquote><p>(1)应用层准备要传输的数据；<br>(2)传输层把文件进行分段并编号；(数据段)<br>(3)网络层把传输层的每一个数据包增加原IP地址和目标IP地址；(数据包)<br>(4)数据链路层把每个数据加上MAC地址；两种情况：(数据帧)<br>使用自己的子网掩码，判断自己和目标地址分别在哪个网段，若在同一个网段(不过路由器)，通过ARP协议广播的方式得到目标IP地址的MAC地址，然后就能封装出一个数据帧；如果子网掩码不是一个网段(用与运算)，通过ARP协议广播的方式得到路由器(网关)的MAC地址，然后把数据通过交换机发送到路由器M2，因为M2和M3是点对点通信，没有别的主机，所以它们之间的MAC地址就是FF。<br>(5)物理层把数据帧变成数字信号(bit流)</p></blockquote><p><strong>接收端(解封)：</strong></p><blockquote><p>(1)交换机Hub0接收bit流，能对数据进行存储转发。它根据数据帧的MAC地址，确定数据是从哪来的，要去哪。<br>(2)路由器M2获取交换机的数据包，识别其中的IP地址，根据路由表选择出口，它无法识别数据段内容。<br>(3)路由器M2到M3是点对点通信，遵守PPP协议。<br>(4)PC3收到bit流后，数据链路层发现MAC地址是自己的，去掉MAC地址给它的网络层，网络层去掉IP地址给传输层，传输层把数据给应用层，应用层把各个数据拼接起来。</p></blockquote><h2 id="4-2-2-路由器-交换机-集线器会不会中病毒"><a href="#4-2-2-路由器-交换机-集线器会不会中病毒" class="headerlink" title="4.2.2 路由器/交换机/集线器会不会中病毒"></a>4.2.2 路由器/交换机/集线器会不会中病毒</h2><p>不会，路由器不能识别数据内容。它只负责信息的传递。但是病毒会影响网络设备。因为病毒会占用网络流量。</p><h1 id="4-3-ARP协议"><a href="#4-3-ARP协议" class="headerlink" title="4.3 ARP协议"></a>4.3 ARP协议</h1><h2 id="4-3-1-TCP-IP协议层次关系"><a href="#4-3-1-TCP-IP协议层次关系" class="headerlink" title="4.3.1 TCP/IP协议层次关系"></a>4.3.1 TCP/IP协议层次关系</h2><p><img src="https://img-blog.csdnimg.cn/20200103224222401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>IP协议：把数据包从一个网段转到另一个网段，就是用来选择路径用的。<br>ARP为IP服务，IP为ICMP/IGMP服务。</p><h2 id="4-3-2-ARP协议的作用"><a href="#4-3-2-ARP协议的作用" class="headerlink" title="4.3.2 ARP协议的作用"></a>4.3.2 ARP协议的作用</h2><p>将IP地址通过广播(本网段，不通过路由器)，目标MAC地址是FF-FF-FF-FF-FF-FF，解析目标IP地址的MAC地址。<br>ARP是解决同一个局域网上的主机或路由器的IP地址和MAC地址的映射关系。如果所找的主机和原主机不在同一个局域网上，那么就要通过ARP找一个位于本局域网上的某个路由器的MAC地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。<br>从IP地址到MAC地址的解析是自动进行的，主机的用户对这种地址解析过程是不知情的。<br>只要主机或路由器要和本网络上的另一个已知IP地址的主机或路由器进行通信，ARP协议就会自动地将该IP地址解析为链路层所需要的MAC地址。</p><h2 id="4-3-3-使用ARP的四种典型情况"><a href="#4-3-3-使用ARP的四种典型情况" class="headerlink" title="4.3.3 使用ARP的四种典型情况"></a>4.3.3 使用ARP的四种典型情况</h2><p>(1)发送方是主机，要把IP数据报发送到本网络的另一个主机，此时用ARP找到目标主机的MAC地址；<br>(2)发送方是主机，要把IP数据报发送到另一个网络的另一个主机，此时用ARP找到本网络上一个路由器的MAC地址，剩下的工作由路由器进行；<br>(3)发送方是路由器，要把IP数据报发送到本网络的另一个主机，此时用ARP找到目标主机的MAC地址；<br>(4)发送方是路由器，要把IP数据报发送到另一个网络的另一个主机，此时用ARP找到本网络上一个路由器的MAC地址，剩下的工作由路由器进行；</p><h2 id="4-3-4-逆地址解析协议RARP"><a href="#4-3-4-逆地址解析协议RARP" class="headerlink" title="4.3.4 逆地址解析协议RARP"></a>4.3.4 逆地址解析协议RARP</h2><p>只知道自己MAC地址就能获得其IP地址。</p><h2 id="4-3-5-ARP欺骗-网络执法官-ARP防火墙-实验课"><a href="#4-3-5-ARP欺骗-网络执法官-ARP防火墙-实验课" class="headerlink" title="4.3.5 ARP欺骗/网络执法官/ARP防火墙-实验课"></a>4.3.5 ARP欺骗/网络执法官/ARP防火墙-实验课</h2><p>如果同一网段中有电脑中毒，可能会把中毒电脑的MAC地址传回去。</p><h1 id="4-4-网际控制报文协议ICMP"><a href="#4-4-网际控制报文协议ICMP" class="headerlink" title="4.4 网际控制报文协议ICMP"></a>4.4 网际控制报文协议ICMP</h1><h2 id="4-4-1-ICMP"><a href="#4-4-1-ICMP" class="headerlink" title="4.4.1 ICMP"></a>4.4.1 ICMP</h2><p>ICMP：在IP之上，用来测试网络层有没有故障。使用最多的命令是ping。<br>为了提高IP数据报交付成功的机会，在网络层使用了ICMP(Internet Control Message Protocol)。<br>ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告；<br>ICMP不是高层协议，而是IP层协议；<br>ICMP报文件为IP层数据报的数据加上数据报的首部，组成IP数据报发送出去。</p><h2 id="4-4-2-ping-Packet-Internet-Grope-命令诊断网络故障"><a href="#4-4-2-ping-Packet-Internet-Grope-命令诊断网络故障" class="headerlink" title="4.4.2 ping(Packet Internet Grope)命令诊断网络故障"></a>4.4.2 ping(Packet Internet Grope)命令诊断网络故障</h2><p>PING是网络层命令。<br>TTL是数据报的生存时间每过一个路由器就会减1，作用是防止数据报在网络中循环。TTL默认初始值如下：<br>Linux 64<br>Windows 128<br>Unix 256<br>可以根据TTL值粗略判定对方是什么系统。</p><p>(1)PING,因特网包套所起，用于测试网络连接量的程序。ping发送一饿ICMP回声请求消息给目的地并报告是否收到所希望的ICMP回声应答。<br>(2)ping指端对端联通，通常用作可用性检测，但是某些病毒会强行大量远程执行ping命令抢占你的网络资源，导致系统网速变慢。严禁ping入侵作为大多数防火墙的一个基本功能提供给用户进行选择。<br>(3)如果打开IE浏览器访问网站失败，可以通过ping命令测试到Internet的网络连通，可以为你排除网络故障提供线索。</p><h2 id="4-4-3-ping和pathping命令"><a href="#4-4-3-ping和pathping命令" class="headerlink" title="4.4.3 ping和pathping命令"></a>4.4.3 ping和pathping命令</h2><p>QQ能登上，网页打不开是为什么？ 网络层没有问题，域名解析有问题。<br>pathping 能跟踪数据包路径，发现出问题的位置。<br>Windows上跟踪数据包路径的命令：tracerert 10.7.1.53<br>路由器上跟踪数据包路径的命令：traceroute 12.0.0.3</p><h1 id="4-5-IGMP协议和多播组播"><a href="#4-5-IGMP协议和多播组播" class="headerlink" title="4.5 IGMP协议和多播组播"></a>4.5 IGMP协议和多播组播</h1><p>点到点通信：<br>广播：目标MAC地址全是F，目标IP地址全是255，也就是全是1.全网广播不能跨越路由器。<br>组播=多播：分组广播。</p><h2 id="4-5-1-访问多播视频节目"><a href="#4-5-1-访问多播视频节目" class="headerlink" title="4.5.1 访问多播视频节目"></a>4.5.1 访问多播视频节目</h2><p>使用多播一般用于直播，网络会议，能够节省带宽。<br>IGMP协议的作用就是周期性扫描本网段内有没有主机在访问多播数据包。</p><h1 id="4-6-IP数据包的结构"><a href="#4-6-IP数据包的结构" class="headerlink" title="4.6 IP数据包的结构"></a>4.6 IP数据包的结构</h1><p>注意，ARP数据包不是这个格式。<br>首部：第一部分是固定长度，20字节，是所有IP数据包必须具有的。后一部分是可选字段，长度可变。<br><img src="https://img-blog.csdnimg.cn/20200103224342694.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>每一行32bit相当于1个字节，一共5行，共20字节。<br><img src="https://img-blog.csdnimg.cn/20200103224429788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(1)版本：用来表示TCP/IP是哪个版本，ipv4还是ipv6.<br>(2)区分服务：确定更高的传输优先级。<br>(3)总长度：确定数据部分长度。一共是16位，最多有2^16-1=65535字节。</p><blockquote><p>注意，网络层，数据包最大65535字节；而数据链路层数据最大是1500字节，是不一样的。所以说，一旦超过数据链路层的最大要求时(网络层数据部分超过1480字节)，数据包会分片。最大传输单元MTU。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200103224445401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>数据包分片：把数据分割，分别添加IP地址，通过网络发给目标MAC地址。目标在通过网络层拼接。传送过程中可能会丢包，或者后发的先到(泪滴攻击就是利用目标机发送破坏的IP包(重叠的包货过大的包负荷)可以通过TCP/IP协议来瘫痪各种不同的操作系统)。所以需要编号。</p></blockquote><p>(4)标识：如果出现数据包分片，那么标识用来确定哪些数据包是需要组合的。<br>(5)标志：确定该数据包是完整的还是分片中的一部分。占3位，只有前两位有用，标志字段最低位是MF(More Fragment)，MF=1表示后面还有分片，MF=0表示最后一个分片。标志字段中间一位是DF(Don’t Fragment)，只有DF=0才允许分片。<br>(6)片偏移：偏移等于当前字节在数据部分的第几个再除以8.(下图是一个举例)<br><img src="https://img-blog.csdnimg.cn/2020010322450658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(7)生存时间：就是TTL，time to live，每过一个路由器就减1。8位二进制。防止数据包在网络中循环。<br>(8)协议：用协议号标识数据部分是什么数据。<br><img src="https://img-blog.csdnimg.cn/20200103224518593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>ICMP协议号：1；<br>IGMP协议号：2；<br>TCP协议号：6；<br>UDP协议号：17；域名解析<br>IPv6协议号：41；<br>OSPF协议号：89；</p></blockquote><p>(9)首部检验和：16位，只检验数据报的首部，不检验数据部分。这里不是采用CRC检验码而是采用简单的计算方法。每经过一个路由器就会检验一次。<br><img src="https://img-blog.csdnimg.cn/20200103224539933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(10)源地址和目的地址都是IP地址，32位，只符合IPv4。IPv6是128位。<br>(11)可变部分：一般没用。</p><h1 id="4-7-IP协议"><a href="#4-7-IP协议" class="headerlink" title="4.7 IP协议"></a>4.7 IP协议</h1><p>(1)网络畅通的条件<br>沿途路由器必须知道下一跳给谁，数据包有去有回。<br><img src="https://img-blog.csdnimg.cn/20200103224613301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-7-1-静态路由"><a href="#4-7-1-静态路由" class="headerlink" title="4.7.1 静态路由"></a>4.7.1 静态路由</h2><p>需要管理员告诉路由器所有没有直连的网络下一跳给谁。<br>适合于小规模网络，不能自动调整路由。</p><h2 id="4-7-2-动态路由"><a href="#4-7-2-动态路由" class="headerlink" title="4.7.2 动态路由"></a>4.7.2 动态路由</h2><p>(1)RIP协议<br>周期性广播(30s)路由表，选择路径的依据是最少的跳数，最大跳数是15跳，所以一般不适合大网络。<br>(2)OSPF协议<br>根据带宽选择路径。</p><h1 id="4-8-子网掩码"><a href="#4-8-子网掩码" class="headerlink" title="4.8 子网掩码"></a>4.8 子网掩码</h1><p>能够帮助路由器判断对应主机是否在同一个网段中。<br><img src="https://img-blog.csdnimg.cn/20200105161511780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-9-ABCDE类网络地址"><a href="#4-9-ABCDE类网络地址" class="headerlink" title="4.9 ABCDE类网络地址"></a>4.9 ABCDE类网络地址</h1><p>网络地址(网络号)唯一指定了每个网络。同一网络中的每台计算机都共享相同的网络地址，并用它作为自己IP地址的一部分。ABC对应的子网掩码分别是255.0.0.0和255.255.0.0和255.255.255.0<br><img src="https://img-blog.csdnimg.cn/20200105161549762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>特殊的几个地址</p><blockquote><p>127.0.0.1 本地换回地址<br>169.254.0.0<br>10.0.0.0，172.16.0.0–172.31.0.0，192.168.0.0–192.168.255.0 保留的私网地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200105161615892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-10-子网划分"><a href="#4-10-子网划分" class="headerlink" title="4.10 子网划分"></a>4.10 子网划分</h1><p><img src="https://img-blog.csdnimg.cn/20200105161720106.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200105161740472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意，全为1是广播，所以63，127，191，254不选<br><img src="https://img-blog.csdnimg.cn/20200105161804726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>参考文献</strong><br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-1-网络层提供的服务-转载学习&quot;&gt;&lt;a href=&quot;#4-1-网络层提供的服务-转载学习&quot; class=&quot;headerlink&quot; title=&quot;4.1 网络层提供的服务(转载学习)&quot;&gt;&lt;/a&gt;4.1 网络层提供的服务(转载学习)&lt;/h1&gt;&lt;h2 id=&quot;4-1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC2%E5%B1%82%20%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC2%E5%B1%82%20%E7%89%A9%E7%90%86%E5%B1%82/</id>
    <published>2020-10-31T11:33:56.748Z</published>
    <updated>2020-10-31T11:29:38.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-1-物理层定义的标准-转载学习"><a href="#2-1-物理层定义的标准-转载学习" class="headerlink" title="2.1 物理层定义的标准(转载学习)"></a>2.1 物理层定义的标准(转载学习)</h1><p>物理层解决如何在链接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。<br>物理层的主要任务：确定传输媒体的接口的一些特性，包括，<br>机械特性：接口形状，大小，引线数量<br>电气特性：例如规定电压范围(-5V-5V)<br>功能特性：例如规定-5V上0，+5V是1<br>过程特性：也称规程特性，规定建立连接时各个相关部件的工作步骤</p><h1 id="2-2-数据通信基础知识"><a href="#2-2-数据通信基础知识" class="headerlink" title="2.2 数据通信基础知识"></a>2.2 数据通信基础知识</h1><p><img src="https://img-blog.csdnimg.cn/20200102124548980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-1-通信的目的是传送消息"><a href="#2-2-1-通信的目的是传送消息" class="headerlink" title="2.2.1 通信的目的是传送消息"></a>2.2.1 通信的目的是传送消息</h2><p>数据(data)——运送消息的实体。<br>信号(signal)——数据的电气或电磁的表现。<br>-&gt;模拟信号——代表信息的参数的取值是连续的。<br>-&gt;数字信号——代表信息的参数的取值是离散的。<br>码元(code)——在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形。<br>-&gt;在数字通信中常常用时间间隔相同的符号表示一个二进制数字，这样的时间间隔内的信号称为二进制码元。这个间隔称为码元长度，1 code可以携带n bit信息量(此时电压会有多个取值，例如1，2，…,7V，而不是只有2个取值)。</p><h2 id="2-2-2-信道的概念"><a href="#2-2-2-信道的概念" class="headerlink" title="2.2.2 信道的概念"></a>2.2.2 信道的概念</h2><p>信道一般表示向一个方向传输信息的媒体。所以通信线路往往包含一条发送信息的信道和一条接收信息的信道。<br>-&gt;单向通信(单工通信)——只能有一个方向的通信，没有反向交互。<br>-&gt;双向交替通信(半双工通信)——通信的双方都可以发送信息，但是不能双方同时发送或接收。<br>-&gt;双向同时通信(全双工通信)——通信的双发可以同时发送和接收。</p><h2 id="2-2-3-什么是基带-baseband-和带通-base-pass-信号？"><a href="#2-2-3-什么是基带-baseband-和带通-base-pass-信号？" class="headerlink" title="2.2.3 什么是基带(baseband)和带通(base pass)信号？"></a>2.2.3 什么是基带(baseband)和带通(base pass)信号？</h2><p>基带信号(基本频率信号)——来自信源的信号，例如计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，比如说我们说话的声波。<br>带通信号——把基带信号经过载波调制后，把信号的频率范围迁移到较高的频段以便在信道中传输(即仅在一段频率范围内能够通过信道)。<br>因此在传输距离较近时，采用基带传输方式(衰减不大，信号内容不会变化)。传输距离较远时，采用带通传输方式，例如从计算机到监视器，打印机等外设的信号。<br><img src="https://img-blog.csdnimg.cn/20200102124938625.png" alt="在这里插入图片描述"></p><h2 id="2-2-4-几种基本的调制方法"><a href="#2-2-4-几种基本的调制方法" class="headerlink" title="2.2.4 几种基本的调制方法"></a>2.2.4 几种基本的调制方法</h2><p>从基带信号到带通信号，涉及到 调频(AM)，调频(FM)，调相(PM)。<br><img src="https://img-blog.csdnimg.cn/20200102125052514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-5-常用编码方式"><a href="#2-2-5-常用编码方式" class="headerlink" title="2.2.5 常用编码方式"></a>2.2.5 常用编码方式</h2><p>单极性不归零编码：只使用一个电压值，高电平表示1，低电平表示0.<br>双极性不归零编码：用幅值相等的正负电平表示二进制数1和0.<br>单极性归零编码：发送码1时高电平在整个码元期间只持续一段时间，其余时间返回零电平。<br>双极性归零编码：正负零三个电平，信号本事携带同步信息。<br><img src="https://img-blog.csdnimg.cn/202001021251409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>曼彻斯特编码：单极性编码的缺点是没有办法区分此时是没有信号，还是有信号，但是信号是0.<br>-&gt;这种编码方式是bit中间有信号，低-高跳转表示0，高-低跳转表示1，一个时钟周期只可以表示一个bit，并且必须通过两次采样才能得到一个bit。它能携带时钟信号，而且能区分此时是没有信号还是信号为0.<br><img src="https://img-blog.csdnimg.cn/20200102125200692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="左图是差分曼彻斯特编码"><br>差分曼彻斯特编码：抗干扰能力比曼彻斯特编码更强。bit与bit之间有信号跳变，表示下一个bit为0，bit与bit之间没有信号跳变，表示下一个bit为1。<br><img src="https://img-blog.csdnimg.cn/20200102125343549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-6-信道极限容量"><a href="#2-2-6-信道极限容量" class="headerlink" title="2.2.6 信道极限容量"></a>2.2.6 信道极限容量</h2><p>信道极限容量取决于失真的大小，当失真过大时，接收信号无法还原发送信号。<br><img src="https://img-blog.csdnimg.cn/2020010212540244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-7-奈氏-Nyquist-准则"><a href="#2-2-7-奈氏-Nyquist-准则" class="headerlink" title="2.2.7 奈氏(Nyquist)准则"></a>2.2.7 奈氏(Nyquist)准则</h2><p>在理想条件下(无噪声/干扰/失真)，为了避免码间串扰，码元的传输速率是有上限的。如果信道的频带越宽(信号高频分量越多)，则用更高的速率传输码元也不会出现码间串扰。</p><h2 id="2-2-8-信噪比和香农-Shannon-公式"><a href="#2-2-8-信噪比和香农-Shannon-公式" class="headerlink" title="2.2.8 信噪比和香农(Shannon)公式"></a>2.2.8 信噪比和香农(Shannon)公式</h2><p>信道的极限信息传输速率C(带宽受限且有Gauss白噪声干扰时的信道极限且无差错时的信息传输速率)可表示为，<br>C = W log2(1 + S / N) b/s<br>-&gt;W是信道的带宽(Hz)；<br>-&gt;S是信道内所传信号的平均功率；<br>-&gt;N是信道内的Gauss噪声的功率。<br>可以发现，减少速度和增大功率能提高准确度。<br>信道的带宽或信道中的信噪比(S/N)越大，则信息的极限传输速率C就越高；<br>只要信息传输速率小于信道的极限传输速率C，就一定能实现某种无差错传输；<br>若带宽W或信噪比(S/N)没有上限，则极限传输速率C也没有上限(虽然不可能)；<br>实际上，信道能达到的最高传输速率要比C低不少；</p><h2 id="2-2-9-奈氏-Nyquist-准则和香农公式的应用范围"><a href="#2-2-9-奈氏-Nyquist-准则和香农公式的应用范围" class="headerlink" title="2.2.9 奈氏(Nyquist)准则和香农公式的应用范围"></a>2.2.9 奈氏(Nyquist)准则和香农公式的应用范围</h2><p><img src="https://img-blog.csdnimg.cn/20200102125508584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-3-物理层下面的传输介质"><a href="#2-3-物理层下面的传输介质" class="headerlink" title="2.3 物理层下面的传输介质"></a>2.3 物理层下面的传输介质</h1><h2 id="2-3-1-导向传输媒体"><a href="#2-3-1-导向传输媒体" class="headerlink" title="2.3.1 导向传输媒体"></a>2.3.1 导向传输媒体</h2><p>导向传输媒体中，电磁波沿着固体媒体传播。<br>双绞线：<br>-&gt;屏蔽/非屏蔽双绞线(STP/UTP)<br><img src="https://img-blog.csdnimg.cn/2020010212553584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同轴电缆：<br>-&gt;50欧姆同轴电缆(基带同轴电缆)——用于数字传输，多用于基带传输；<br>-&gt;75欧姆同轴电缆(宽带同轴电缆)——用于模拟传输，多用于带通传输；<br><img src="https://img-blog.csdnimg.cn/20200102125556959.png" alt="在这里插入图片描述"><br>光缆：<br>网线：<br>-&gt;直通线——双绞线夹线顺序两端一致(1白橙2橙3白绿4蓝5白蓝6绿7白棕8棕，口诀“橙白橙/绿白蓝/蓝白绿/棕白棕”)，这是100M的标准(568B)，也称正线/标准线/直通线。当用于10M和100M时，下图只用了1，3，2，6线。对于1000M的网络，8根线都会用上。<br><img src="https://img-blog.csdnimg.cn/20200102125618389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>直通线应用最广，这种类型的以太网电缆用来实现以下连接：主机到交换机/集线器，路由器到交换机/集线器。<br>-&gt;交叉线——一般不同设备连接用直通线，同类设备用交叉线。也用于集线器到交换机，路由器到主机连接。<br><img src="https://img-blog.csdnimg.cn/20200102125705746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意，现在网卡能够自动协商，所以交叉线和直通线已经无所谓了，连错了也没关系。<br>光纤：<br><img src="https://img-blog.csdnimg.cn/2020010212572797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单模光纤——只能传输一种电磁波；直径小；用于有线电视网络，传播特性好，带宽可达10GHz，可以在一根光纤中传输60套PAL-D电视节目。<br><img src="https://img-blog.csdnimg.cn/20200102125745955.png" alt="在这里插入图片描述"><br>多模光纤——能传输多种电磁波；直径大；<br><img src="https://img-blog.csdnimg.cn/20200102125755384.png" alt="在这里插入图片描述"></p><h2 id="2-3-2-非导向传输媒体"><a href="#2-3-2-非导向传输媒体" class="headerlink" title="2.3.2 非导向传输媒体"></a>2.3.2 非导向传输媒体</h2><p>非导向传输媒体指自由空间，其中的电磁波传输称为无线传输。<br>无线传输的频段很广。<br>短波通信主要是靠电离层的反射，但短波信道的通信质量较差；<br>微波在空间主要是直线传播(延迟大)——地面微波接力通信；微信通信。<br>电信领域使用的电磁波的频谱如下，<br><img src="https://img-blog.csdnimg.cn/20200102125822870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-3-3-物理层设备"><a href="#2-3-3-物理层设备" class="headerlink" title="2.3.3 物理层设备"></a>2.3.3 物理层设备</h2><p>集线器：<br>工作特点是在网络中只起到信号放大和重发作用，目的是扩大网络的传输范围，而不具备信号的定向传送能力。最大传输距离是100m；集线器是一个大的冲突域(意思是某个时间点只能是2台设备进行通信)。<br><img src="https://img-blog.csdnimg.cn/2020010212590985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>现在很少用集线器了，它不安全，一般用交换机。</p><h1 id="2-4-信道复用技术"><a href="#2-4-信道复用技术" class="headerlink" title="2.4 信道复用技术"></a>2.4 信道复用技术</h1><p>复用(multiplexing)是通信技术中的基本概念。<br><img src="https://img-blog.csdnimg.cn/20200102125945333.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-1-频分复用-FDN-frequency-division-multiplexing"><a href="#2-4-1-频分复用-FDN-frequency-division-multiplexing" class="headerlink" title="2.4.1 频分复用(FDN: frequency division multiplexing)"></a>2.4.1 频分复用(FDN: frequency division multiplexing)</h2><p>用户在分配到一定的频带后，在通信过程中始终站用这个频带。频分复用的所有用户在同样的时间占用不同的带宽资源(带宽指频率带宽不是数据的发送速率)。<br><img src="https://img-blog.csdnimg.cn/20200102130014245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-2-时分复用-TDN-time-division-multiplexing"><a href="#2-4-2-时分复用-TDN-time-division-multiplexing" class="headerlink" title="2.4.2 时分复用(TDN: time division multiplexing)"></a>2.4.2 时分复用(TDN: time division multiplexing)</h2><p><img src="https://img-blog.csdnimg.cn/20200102130042980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实现机制：<br><img src="https://img-blog.csdnimg.cn/20200102130118549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>时分复用可能会造成线路资源的浪费，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般不高。<br><img src="https://img-blog.csdnimg.cn/2020010213013860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-3-统计时分复用-STDM-statistic-TDM"><a href="#2-4-3-统计时分复用-STDM-statistic-TDM" class="headerlink" title="2.4.3 统计时分复用(STDM: statistic TDM)"></a>2.4.3 统计时分复用(STDM: statistic TDM)</h2><p><img src="https://img-blog.csdnimg.cn/20200102130206938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要在放置前添加标记。</p><h2 id="2-4-4-波分复用-WDM-wavelength-division-multiplexing"><a href="#2-4-4-波分复用-WDM-wavelength-division-multiplexing" class="headerlink" title="2.4.4 波分复用(WDM: wavelength division multiplexing)"></a>2.4.4 波分复用(WDM: wavelength division multiplexing)</h2><p>就是光的频分复用。<br><img src="https://img-blog.csdnimg.cn/2020010213023966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-4-5-码分复用"><a href="#2-4-5-码分复用" class="headerlink" title="2.4.5 码分复用"></a>2.4.5 码分复用</h2><p>常用的名词是码分多址CDMA(Code Division Multiple Access)<br>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。<br>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。<br>每一个比特时间划分为m个短的间隔，称为码片(chip)。<br><img src="https://img-blog.csdnimg.cn/20200106112052415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>任何一个码片向量和该码片向量自己的规格化内积都是1.<br>任何一个码片向量和该码片反码向量的规格化内积都是-1.<br><img src="https://img-blog.csdnimg.cn/20200106112106614.png" alt="在这里插入图片描述"><br>缺点：表示一个bit需要更多的数据。</p><h1 id="2-5-数字传输系统"><a href="#2-5-数字传输系统" class="headerlink" title="2.5 数字传输系统"></a>2.5 数字传输系统</h1><p>主要讲的是广域网的数据传输。<br>脉码调制(PCM)技术。欧洲是E1标准(30路)，北美是T1(24路，时分复用)。</p><h1 id="2-6-带宽接入技术"><a href="#2-6-带宽接入技术" class="headerlink" title="2.6 带宽接入技术"></a>2.6 带宽接入技术</h1><h2 id="2-6-1-非对称数字用户链路ADSL"><a href="#2-6-1-非对称数字用户链路ADSL" class="headerlink" title="2.6.1 非对称数字用户链路ADSL"></a>2.6.1 非对称数字用户链路ADSL</h2><p>使用电话线。用数字技术对现有的模拟电话用户线进行改造(xDSL)，把0-4kHz留给传统电话使用，把原来没有利用的高频谱段留给用户上网使用。<br><img src="https://img-blog.csdnimg.cn/20200102130314457.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>基于ADSL的接入网组成如下图，<br><img src="https://img-blog.csdnimg.cn/20200102130325183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>数字用户线接入复用器DSLAM(DSL Access Multiplexer)<br>接入端单元(Access Termination Unit)<br>ATU-C(C表示端局Central Office)<br>ATU-R(R代表远端Remote)<br>电话分离器PS(POTS Splitter)</p><h2 id="2-6-2-DMT技术"><a href="#2-6-2-DMT技术" class="headerlink" title="2.6.2 DMT技术"></a>2.6.2 DMT技术</h2><p>采用频分复用，把40kHz以上一直到1.1MHz的高频谱划分为徐队子信道，其中25个子信道用于上行信道，249个子信道用于下行信道(因为下载的情景多于上传)。每个子信道占据4kHz的带宽，并使用不同的载波进行数字调制。这种做法相当于在一对用户线上使用许多小的调制解调器并行地传输数据。</p><h2 id="2-6-3-光纤同轴混合网HFC-Hybrid-Fiber-Coax"><a href="#2-6-3-光纤同轴混合网HFC-Hybrid-Fiber-Coax" class="headerlink" title="2.6.3 光纤同轴混合网HFC(Hybrid Fiber Coax)"></a>2.6.3 光纤同轴混合网HFC(Hybrid Fiber Coax)</h2><p>HFC网是在目前覆盖范围很广的有线电视网CATV基础上开发的一种居民宽带接入网。除了可以传送CATV外，还可以提供电话/数据/和其它宽带交互型业务。现有CATV网是树形拓扑结构的同轴电缆网络，它采用 模拟技术的频分复用 对电视节目进行单向传输。HFC需要对CATV网进行改造。<br><img src="https://img-blog.csdnimg.cn/20200102130415388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>每个用户要安装一个用户接口盒。<br><img src="https://img-blog.csdnimg.cn/2020010213044034.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-6-4-FTT技术-光纤到XX技术"><a href="#2-6-4-FTT技术-光纤到XX技术" class="headerlink" title="2.6.4 FTT技术(光纤到XX技术)"></a>2.6.4 FTT技术(光纤到XX技术)</h1><p>-&gt;光纤到家技术(Fiber to the home):光纤一直铺设到用户家庭(155MB/s)。<br>-&gt;光纤到大楼技术(Fiber to the building):光纤进入大楼后就转为电信号，然后用电缆或双绞线分配到各用户。<br>-&gt;光纤到路边技术(Fiber to the curb):从路边到各用户可以使用星形结构的双绞线作为传输媒体(155MB/s)。</p><p>参考文献<br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-1-物理层定义的标准-转载学习&quot;&gt;&lt;a href=&quot;#2-1-物理层定义的标准-转载学习&quot; class=&quot;headerlink&quot; title=&quot;2.1 物理层定义的标准(转载学习)&quot;&gt;&lt;/a&gt;2.1 物理层定义的标准(转载学习)&lt;/h1&gt;&lt;p&gt;物理层解决如何在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC3%E5%B1%82%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC3%E5%B1%82%20%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</id>
    <published>2020-10-31T11:33:56.748Z</published>
    <updated>2020-10-31T11:30:19.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-1-数据链路层的基本概念-转载学习"><a href="#3-1-数据链路层的基本概念-转载学习" class="headerlink" title="3.1 数据链路层的基本概念(转载学习)"></a>3.1 数据链路层的基本概念(转载学习)</h1><h2 id="3-1-1-数据链路层的简单模型"><a href="#3-1-1-数据链路层的简单模型" class="headerlink" title="3.1.1 数据链路层的简单模型"></a>3.1.1 数据链路层的简单模型</h2><p>数据链路层不关心物理层解决的问题，只关心帧头帧尾和校验。<br><img src="https://img-blog.csdnimg.cn/20200102231430200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-1-1-数据链路层的信道类型"><a href="#3-1-1-数据链路层的信道类型" class="headerlink" title="3.1.1 数据链路层的信道类型"></a>3.1.1 数据链路层的信道类型</h1><p>-&gt;点到点信道：这种信道使用一对一的点对点通信方式。<br>-&gt;广播信道：广播信道上的主机很多，需要专用的共享信道协议来协调主机的数据发送。</p><h1 id="3-1-2-链路与数字链路"><a href="#3-1-2-链路与数字链路" class="headerlink" title="3.1.2 链路与数字链路"></a>3.1.2 链路与数字链路</h1><p>-&gt;链路(link)——是一条点到点的物理线路段，中间没有任何其他的交换节点。一条链路只是一条通路的一个组成部分。<br>-&gt;数据链路(data link)——除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。最常用的方法是使用适配器(网卡)来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。</p><h2 id="3-1-3-帧"><a href="#3-1-3-帧" class="headerlink" title="3.1.3 帧"></a>3.1.3 帧</h2><p>在网络层，给数据包增加了接收端和发送端的IP地址。在数据链路层里，增加了帧头帧尾，MAC地址和校验值。</p><p><img src="https://img-blog.csdnimg.cn/20200102231525963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-2-数据链路层解决的基本问题"><a href="#3-2-数据链路层解决的基本问题" class="headerlink" title="3.2 数据链路层解决的基本问题"></a>3.2 数据链路层解决的基本问题</h1><h2 id="3-2-1-封装成帧-framing"><a href="#3-2-1-封装成帧-framing" class="headerlink" title="3.2.1 封装成帧(framing)"></a>3.2.1 封装成帧(framing)</h2><p>就是在一段数据的前后分别添加帧头和帧尾，构成一个帧，确定帧的界限。<br><img src="https://img-blog.csdnimg.cn/20200102231600571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>但是，可能会出现以下问题，<br><img src="https://img-blog.csdnimg.cn/20200102231622678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-2-透明传输"><a href="#3-2-2-透明传输" class="headerlink" title="3.2.2 透明传输"></a>3.2.2 透明传输</h2><p>用字节填充法解决透明传输问题。发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(十六进制数1B)。<br>字节填充(byte stuffing)或字符填充(character stuffing)——接收端的数据链路层在数据送往网络层之前杀出插入的转义字符。<br>如果转义字符也出现在数据之中，那么应该在转义字符前插入一个转义字符。当接收端收到连续的两个转义字符时，就删除前面的那一个。</p><p><img src="https://img-blog.csdnimg.cn/20200102231659526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-2-3-差错校验"><a href="#3-2-3-差错校验" class="headerlink" title="3.2.3 差错校验"></a>3.2.3 差错校验</h2><p>传输过程中可能会产生bit差错：0变成1，1变成0.<br>在一段时间内，传输错误的比特率占所传输比特总数的比率称为误码率BER(bit error rate)。<br>误码率和信噪比的关系很大。<br>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检验措施。<br>-&gt;循环冗余检验CRC:<br>除数必须比后面添加的0的位数多一位，可以是任意的二进制数。每一步运算其实是不进位的加法。下图的001就是FCS帧检验序列。接收端计算101001001(也就是原数据加上FCS)除以1101，如果商为0，意味着传输过程没有差错，就接受，否则丢弃。<br><img src="https://img-blog.csdnimg.cn/20200102231718200.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在数据后面添加的冗余码称为帧检验序列FCS(frame check seqeunce)。CRC不是获得FCS的唯一方法。<br>特点：<br>不能确定出错的bit的是哪一位；<br>可能会出错，但只要经过严格的挑选，并且除数位数足够大，就可以极大减少出错概率；<br>CRC只能做到无差错接受(意思是传输过程没有差错，有差错的一律丢弃)；<br>要做到可靠传输，必须加上确认和重传机制。</p><h1 id="3-3-两种情况下的数据链路层"><a href="#3-3-两种情况下的数据链路层" class="headerlink" title="3.3 两种情况下的数据链路层"></a>3.3 两种情况下的数据链路层</h1><h2 id="3-3-1-使用点对点信道的数据链路层-广域网"><a href="#3-3-1-使用点对点信道的数据链路层-广域网" class="headerlink" title="3.3.1 使用点对点信道的数据链路层(广域网)"></a>3.3.1 使用点对点信道的数据链路层(广域网)</h2><p>(1)PPP协议(point to point protocol)，是数据链路层协议，例如用户使用拨号上网。<br>(2)PPP协议应该满足：<br>简单；封装成帧；透明性；多种网络层协议；多种类型链路；差错检验；检测连接状态；最大传送单元；网络层地址协商；数据压缩协商；<br>(3)PPP协议不需要满足：<br>纠错；流量控制；序号；多点链接；半双工或单工连接。<br>(4)PPP协议的组层部分：<br>数据链路层协议可以用于异步串行或同步串行介质；<br>使用LCP(链路控制协议)建立并维护数据链路连接，可以实现身份验证和欠费管理；<br>网络控制协议(NCP)允许在点到点连接上使用多种网络层协议，如下图；<br><img src="https://img-blog.csdnimg.cn/2020010223174734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(5)PPP协议帧格式<br>标志字段F = 0x7E<br>地址字段A = 0xFF，它并不起作用<br>控制字段C = 0x03<br>PPP协议是面向字节的，所以所有的PPP帧的长度都是整数字节。<br><img src="https://img-blog.csdnimg.cn/20200102231805348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(6)字节填充(类似于透明传输)<br>此时，信息部分是以字节为单位的。<br>将信息字段中出现的每个0x7E字节转变成为2字节序列(0x7D,0x5E);<br>将信息字段中出现的每个0x7D字节转变成为2字节序列(0x7D,0x5D);<br>将信息字段中出现的每个ASCII码控制字符(小于0x20字符)，在前面加入一个0x7D；<br>(7)0比特填充(类似于透明传输)<br>此时，信息部分是二进制流。PPP协议在SONET/SDH链路时，是使用同步传输。<br>在发送端，只要发现有5个连续的1，则填充一个0，接收端删掉对应的0。<br><img src="https://img-blog.csdnimg.cn/20200102231832418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(8)PPP协议不使用序号和确认机制的原因<br>在数据链路层出现错误的概率不大时，使用较简单的PPP协议较为合理；<br>在Internet环境下，PPP的信息字段放入的数据是IP数据报。数据链路层的可靠传输并不能保证网络层的传输也是可靠的；<br>帧检验序列FCS字段可以保证无差错接受。<br>(9)PPP协议的工作状态<br>当用户拨号接入ISP(网络运营商)时，路由器的调制解调器对拨号进行确认，建立物理连接；<br>PC机箱路由器发送一些列的LCP(链路控制协议)分组(封装成多个PPP帧)；<br>这些分组及其响应选择一些PPP参数，和进行网络层配置，NCP(网络控制协议)给新接入的PC机分配一个临时的IP地址，使PC机成为Internet上的一个主机；<br>通信完毕后，NCP释放网络层连接，收回原来分配出去的IP地址；<br>接着，LCP释放数据链路层连接；<br>最后释放的事物理层连接。</p><h2 id="3-3-2-使用广播信道的数据链路层-局域网"><a href="#3-3-2-使用广播信道的数据链路层-局域网" class="headerlink" title="3.3.2 使用广播信道的数据链路层(局域网)"></a>3.3.2 使用广播信道的数据链路层(局域网)</h2><p>一般是总线型。<br>(1)局域网的拓扑<br><img src="https://img-blog.csdnimg.cn/2020010223185676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)共享通信媒体<br>静态划分信道(麻烦)：<br>频分复用；时分复用；波分复用；码分复用；<br>动态媒体接入控制(多点接入)：<br>随机接入(主要是以太网)；受控接入，如多点线路探询(polling)，轮询(不采用了)。</p><p>(3)认识以太网<br>最初的以太网是将许多计算机都连接到一根总线上，当初认为这样连接即简单又可靠，因为总线上没有有源器件。<br>总线上每一个主机都能检测到B发送的数据。但是只有D的地址和数据帧首部写入的地址一致，所以只有D接收。其余计算机都能检测到这不是发送给他们的数据帧，所以就丢弃这个数据帧。<br>这是一种具有广播特性的总线上实现了一对一通信。这种方式不安全。<br><img src="https://img-blog.csdnimg.cn/20200102231909360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>(4)带冲突检测的载波监听/碰撞检测<br>CSMA/CD：<br>Carrier Sense Multiple Access with Collision Detection<br>多点接入：<br>许多计算机以多点接入的方式连接在一根总线上。<br>载波监听：<br>每一个站在发送数据之前都先要用电子技术检测一下总线时候有其它计算机在发送数据信号，如果有则不发送数据，以免发生碰撞；</p><p>(5)碰撞检测<br>碰撞检测就是计算机边发送数据边检测信道上信号电压的大小。<br>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大；<br>当一个站检测到信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站在同时发送数据，表明产生了碰撞；<br>碰撞就是冲突，碰撞检测也称冲突检测。<br>检测到碰撞后：<br>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息；<br>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就立即停止发送，避免浪费网络资源，等待一个随机的时间后再次发送。</p><p>(6)传播时延对载波监听的影响<br><img src="https://img-blog.csdnimg.cn/20200102231927199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在2t时间内，可能存在碰撞。</p><p>(7)CSMA/CD的重要特性<br>使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信(半双工)；<br>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能；<br>这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。</p><p>(8)争用期<br>最先发送数据帧的站，在发送数据帧后至多经过时间2t(2倍的端到端往返时延)就可知道发送的数据帧是否发生了碰撞。<br>经过争用期这段时间还没有检测到碰撞，就可以肯定不会发生碰撞；<br>以太网的争用期：<br>-&gt;以太网的端到端往返时延2t称为争用期，或碰撞窗口，通常取51.2微秒为争用期的长度；如果网线过长，会导致争用期时间的延长，这也是为什么网线一般不超过100m；<br>-&gt;对于10Mb/s的以太网，在争用期可以发送512bit，也就是64 byte；<br>-&gt;以太网在发送数据的时候，若前64字节没有冲突，后续也不会发生冲突；<br>最短有效帧长：<br>-&gt;如果发生冲突，一定是前64字节；<br>-&gt;由于一旦发生冲突就立刻停止，所以已发送的数据一定小雨64字节；<br>-&gt;以太网规定了最短有效帧长为64字节，凡事小雨64字节的帧一定是因为冲突而异常终止的无效帧。</p><p>(9)二进制指数类型退避算法<br>发送碰撞的站在停止发送数据后，要推迟一个随机事件才能发送数据。<br>确定基本退避时间，一般是争用期2t；<br>定义参数k = min(重传次数，10)；<br>从整数集合{0,1,…,2^k-1}中随机取出一个数，记为r，重传所需的时延就是r倍的基本退避时间；<br>当重传达16次时仍不能成功时就丢弃该帧，并向高层报告。</p><h1 id="3-4-以太网"><a href="#3-4-以太网" class="headerlink" title="3.4 以太网"></a>3.4 以太网</h1><h2 id="3-4-1-以太网的两个标准"><a href="#3-4-1-以太网的两个标准" class="headerlink" title="3.4.1 以太网的两个标准"></a>3.4.1 以太网的两个标准</h2><p>DIX Ethernet V2一般是指这个。<br>IEEE 802.3 两个标准差别很小。<br>以太网 是满足DIX Ethernet V2标准的局域网。</p><h2 id="3-4-2-以太网与数据链路层的2个子层"><a href="#3-4-2-以太网与数据链路层的2个子层" class="headerlink" title="3.4.2 以太网与数据链路层的2个子层"></a>3.4.2 以太网与数据链路层的2个子层</h2><p>为了使数据链路层更好的适应多种局域网标准，802委员会把局域网拆分为：<br>-&gt;逻辑链路控制LLC(Logical Link Control)子层；<br>-&gt;媒体接入控制MAC(Medium Access Control)子层。<br>与接入到传输媒体有关的内容都放在MAC子层上，而LLC子层与传输媒体无关，不管什么协议的局域网对LLC子层都是透明的；<br>由于局域网标准一般是DIX Ethernet V2而不是IEEE 802.3，所以802.2标准的LLC子层作用已经不大了，很多厂商适配器没有LLC协议；</p><h2 id="3-4-3-以太网提供的服务"><a href="#3-4-3-以太网提供的服务" class="headerlink" title="3.4.3 以太网提供的服务"></a>3.4.3 以太网提供的服务</h2><p>以太网提供服务是不可靠的交付，即最大努力的交付；<br>当接收站收到的有差错的数据帧时就丢弃此帧，其它什么也不做，差错的纠正由高层来处理；<br>如果高层发现丢失了一些数据而进行重传，但以太网并不知道这是一个重传的帧，而是当作一个新帧发送。</p><h2 id="3-4-4-以太网的星型拓扑结构"><a href="#3-4-4-以太网的星型拓扑结构" class="headerlink" title="3.4.4 以太网的星型拓扑结构"></a>3.4.4 以太网的星型拓扑结构</h2><p>物理上是星型，逻辑上是总线型。<br>为了降低成本，最初由粗的同轴电缆变成细的同轴电缆最后变成无屏蔽双绞线。每个站需要用两对双绞线，分别用于发送和接收；<br>在星形的中心增加了一种可靠性高的设备，为集线器(hub)。<br><img src="https://img-blog.csdnimg.cn/20200102232000978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-4-5-集线器的特点"><a href="#3-4-5-集线器的特点" class="headerlink" title="3.4.5 集线器的特点"></a>3.4.5 集线器的特点</h2><p>集线器使用电子器件来模拟实际电缆线的工作，因此整个系统仍然是像一个传统的以太网那样运行。由于集线器使用了大规模集成电路芯片，所以可靠性更高；<br>使用集线器逻辑上仍然是一个总线网，各工作站使用的还是CSMA/CD协议，共享逻辑网络上的总线；<br>集线器像一个多接口的转发器，工作在物理层。<br><img src="https://img-blog.csdnimg.cn/20200102232025486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-4-6-10Base-T-基于集线器的以太网标准"><a href="#3-4-6-10Base-T-基于集线器的以太网标准" class="headerlink" title="3.4.6 10Base-T 基于集线器的以太网标准"></a>3.4.6 10Base-T 基于集线器的以太网标准</h2><p>它的通信距离稍短，每个站到集线器的距离不超过100m。<br>这种10MB/s的无屏蔽双绞线星形网的出现，能降低成本和提高可靠性。<br>10Base-T的出现有很大的意义，类似标准有100Base-FX，10Base-T，100Base-T4.</p><h2 id="3-4-7-信道利用率"><a href="#3-4-7-信道利用率" class="headerlink" title="3.4.7 信道利用率"></a>3.4.7 信道利用率</h2><p>争用期长度为2t；帧长为L bit，数据发送旅为C b/s，帧的发送时间为L/C = T0 秒。<br>一个帧从开始发送，经可能发生的碰撞后，将再次重传多次，直到发送成功且信道转为空闲(即再经过t使得信道上没有信号在传播)时为止，是发送一帧所需的平均时间。<br><img src="https://img-blog.csdnimg.cn/20200102232044653.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>定义a = t / T0，是单程端到端时延t与帧发送时间T0的比值。a越小，说明碰撞检测越快，信道利用率高。<br>当数据率(网速)一定时，以太网的连线长度受到限制，否则t会太长；<br>以太网的帧长不能太短，否则T0太小，使a太大。</p><h2 id="3-4-8-信道利用率的最大值"><a href="#3-4-8-信道利用率的最大值" class="headerlink" title="3.4.8 信道利用率的最大值"></a>3.4.8 信道利用率的最大值</h2><p>假设理想状态下，以太网个展发送的数据都不会碰撞，一旦总线空闲就能有站立即发送数据，所以没有争用期；<br>发送一帧需要占用总线T0+t，而帧本身需要发送时间为T0，于是理想情况下极限信道利用率Smax = T0 / (T0 + t) = 1 / (1 + a).</p><h1 id="3-5-MAC层"><a href="#3-5-MAC层" class="headerlink" title="3.5 MAC层"></a>3.5 MAC层</h1><h2 id="3-5-1-MAC层的硬件地址-MAC地址"><a href="#3-5-1-MAC层的硬件地址-MAC地址" class="headerlink" title="3.5.1 MAC层的硬件地址(MAC地址)"></a>3.5.1 MAC层的硬件地址(MAC地址)</h2><p>硬件地址 = 物理地址 = MAC地址<br>MAC地址前3个字节(24位)是厂家分配的地址字段，后3个字节(24位)是厂家自定义，称为扩展标识符；<br>一个地址块可以产生2^24个地址，这种48位地址称为MAC-48，通用名为EUI-48，这就是MAC地址；<br>MAC地址实际上是每一个站的名字或标识符。</p><h2 id="3-5-2-适配器检查MAC地址"><a href="#3-5-2-适配器检查MAC地址" class="headerlink" title="3.5.2 适配器检查MAC地址"></a>3.5.2 适配器检查MAC地址</h2><p>适配器从网络上每收到一个MAC帧就要用硬件检查MAC帧中的MAC地址：<br>-&gt;如果是发往本站的帧就收下，然后进行其它处理；<br>-&gt;否则丢弃。<br>发往本站的帧包括：<br>-&gt;单播帧(unicast)(一对一)<br>-&gt;广播帧(broadcast)(一对全体)<br>-&gt;多播帧(multicast)(一对多)</p><h2 id="3-5-3-MAC帧的格式"><a href="#3-5-3-MAC帧的格式" class="headerlink" title="3.5.3 MAC帧的格式"></a>3.5.3 MAC帧的格式</h2><p>6 + 6 + 2 + 46 + 4 =64 byte，这就是为什么IP数据报的最短长度为46字节。<br><img src="https://img-blog.csdnimg.cn/20200102232142275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>前8个字节的作用是实现比特同步，第一个字段共7个字节，称为前同步码，作用是实现快速MAC帧的比特同步；第二个字段是帧开始定界符，表示后面的信息是MAC帧。<br><img src="https://img-blog.csdnimg.cn/2020010223215677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-5-4-无效的MAC帧"><a href="#3-5-4-无效的MAC帧" class="headerlink" title="3.5.4 无效的MAC帧"></a>3.5.4 无效的MAC帧</h2><p>帧的长度不是整数个字节；<br>用收到的帧检验序列FCS查出有错误；<br>数据字段的长度不在46-1518字节内；<br>对于检查出来的无效MAC帧简单的丢弃。</p><h2 id="3-5-5-帧间最小间隔"><a href="#3-5-5-帧间最小间隔" class="headerlink" title="3.5.5 帧间最小间隔"></a>3.5.5 帧间最小间隔</h2><p>为9.6微秒。相当于96bit的发送时间。<br>一个站在检测到总线空闲时，还需要等待9.6微秒后才能再次发送数据，这样做是为了使刚刚收到的数据帧的站接收缓存来得及清理，做好接收下一帧的准备。</p><h1 id="3-6-数据帧的抓包分析"><a href="#3-6-数据帧的抓包分析" class="headerlink" title="3.6 数据帧的抓包分析"></a>3.6 数据帧的抓包分析</h1><h1 id="3-7-扩展以太网"><a href="#3-7-扩展以太网" class="headerlink" title="3.7 扩展以太网"></a>3.7 扩展以太网</h1><h2 id="3-7-1-在物理层考虑扩展"><a href="#3-7-1-在物理层考虑扩展" class="headerlink" title="3.7.1 在物理层考虑扩展"></a>3.7.1 在物理层考虑扩展</h2><p>(1)距离的扩展<br>主机使用光纤和一对光纤调制解调器连接到集线器。<br><img src="https://img-blog.csdnimg.cn/20200102232208881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)数量的扩展<br>集线器集联：使网络中计算机增加，变成一个大的冲突域，会造成效率降低。<br><img src="https://img-blog.csdnimg.cn/20200102232226498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-7-2-在数据链路层考虑扩展"><a href="#3-7-2-在数据链路层考虑扩展" class="headerlink" title="3.7.2 在数据链路层考虑扩展"></a>3.7.2 在数据链路层考虑扩展</h2><p>(1)使用网桥<br>网桥工作在数据链路层，他根据MAC帧的目的地址对收到的帧进行转发。网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是现检查此帧的目的MAC地址，然后再确定将该帧转发到对应的接口。<br><img src="https://img-blog.csdnimg.cn/20200102232240544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>(2)交换机<br>随着网桥的接口的增加， 后来网桥和集线器合并了，计算机可以直接和交换机连接，这就是交换机。<br>交换机就是网桥和集线器的合并升级版，能全双工，安全通信。<br>端口带宽独享；<br>安全；<br>基于MAC地址转发；<br>通过学习构建MAC地址表。<br>(3)透明网桥(transparent )<br>透明指局域网上的站点不知道所发送的帧将经过几个网桥，因为网桥对于各站点是看不见的。<br>透明网桥是一种即插即用的设备，标准是IEEE 802.1D。<br><img src="https://img-blog.csdnimg.cn/20200102232254100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>透明网桥使用了生成树算法。避免产生转发的帧在网络中不停的转圈。<br><img src="https://img-blog.csdnimg.cn/20200102232312928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020010509202810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-8-快速以太网-fast-ethernet"><a href="#3-8-快速以太网-fast-ethernet" class="headerlink" title="3.8 快速以太网(fast ethernet)"></a>3.8 快速以太网(fast ethernet)</h1><h2 id="3-8-1-100Base-T以太网"><a href="#3-8-1-100Base-T以太网" class="headerlink" title="3.8.1 100Base-T以太网"></a>3.8.1 100Base-T以太网</h2><p>速率在100Mb/s以上的以太网称为高速以太网。<br>在双绞线上传送100Mb/s基带信号的星型拓扑以太网，仍使用IEEE 802.3的CSMA/CD协议。100Base-T以太网被称为快速以太网(fast ethernet)。<br>100Base-T以太网的物理层：<br>-&gt;100Base-TX:使用2对UTP 5类线或屏蔽双绞线STP。<br>-&gt;100Base-FX:使用2对光纤。<br>-&gt;100Base-T4:使用4对UTP 3类线或5类线。</p><h2 id="3-8-2-100Base-T以太网的特点"><a href="#3-8-2-100Base-T以太网的特点" class="headerlink" title="3.8.2 100Base-T以太网的特点"></a>3.8.2 100Base-T以太网的特点</h2><p>可以实现全双工通信(注意，如果交换机上某一路连接着集线器(半双工)，则这一路不能实现全双工)而无冲突，此时不使用CSMA/CD协议。<br>MAC帧格式不变，仍是802.3 标准。<br>最短帧长度不变，但是一个网段的最大电缆长度减少到100m。<br>帧间间隔从9.6微秒缩小到0.96微秒。</p><h2 id="3-8-3-吉比特Gbit以太网"><a href="#3-8-3-吉比特Gbit以太网" class="headerlink" title="3.8.3 吉比特Gbit以太网"></a>3.8.3 吉比特Gbit以太网</h2><p>允许在1 Gb/s下全双工或半双工工作方式。<br>使用802.3标准的帧格式。<br>在半双工下使用CSMA/CD协议。<br>与10Base-T和100Base-T技术向后兼容。<br>当吉比特以太网在全双工方式时，不用载波延伸和分组冲突。<br>1000Base-X以太网的物理层(基于光纤通道)：<br>-&gt;1000Base-SX：SX表示短波长，传输距离上275m或550m。<br>-&gt;1000Base-LX：LX表示长波长，传输距离上550m或5000m。<br>-&gt;1000Base-CX：<br>1000Base-T以太网的物理层(基于双绞线)：<br>-&gt;使用 4对 5类线UTP。<br><img src="https://img-blog.csdnimg.cn/2020010223234353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-8-4-10Gbit-s以太网"><a href="#3-8-4-10Gbit-s以太网" class="headerlink" title="3.8.4 10Gbit/s以太网"></a>3.8.4 10Gbit/s以太网</h2><p>MAC帧格式不变，仍是802.3 标准。<br>使用光纤而不是铜线。<br>只能工作在全双工方式，没有争用问题。<br>它的出现使工作范围从局域网扩大到城域网和广域网，实现了端到端的以太网传输，优点是：技术成熟；互操作性好；广域网中使用以太网便宜；统一的帧格式。</p><h2 id="3-8-5-以太网从10Mb-s到10Gb-s的演变说明了"><a href="#3-8-5-以太网从10Mb-s到10Gb-s的演变说明了" class="headerlink" title="3.8.5 以太网从10Mb/s到10Gb/s的演变说明了"></a>3.8.5 以太网从10Mb/s到10Gb/s的演变说明了</h2><p>可拓展性；<br>灵活性(多种传输媒体，全/半双工，共享/交换)；<br>易于安装；<br>稳健性好。</p><h2 id="3-8-6-Cisco建网的3层模型"><a href="#3-8-6-Cisco建网的3层模型" class="headerlink" title="3.8.6 Cisco建网的3层模型"></a>3.8.6 Cisco建网的3层模型</h2><p><img src="https://img-blog.csdnimg.cn/20200102232405178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考文献<br><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;3-1-数据链路层的基本概念-转载学习&quot;&gt;&lt;a href=&quot;#3-1-数据链路层的基本概念-转载学习&quot; class=&quot;headerlink&quot; title=&quot;3.1 数据链路层的基本概念(转载学习)&quot;&gt;&lt;/a&gt;3.1 数据链路层的基本概念(转载学习)&lt;/h1&gt;&lt;h2</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC1%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC1%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</id>
    <published>2020-10-31T11:33:56.747Z</published>
    <updated>2020-10-31T11:28:48.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-计算机网络概述（转载学习）"><a href="#第一章-计算机网络概述（转载学习）" class="headerlink" title="第一章 计算机网络概述（转载学习）"></a>第一章 计算机网络概述（转载学习）</h1><h2 id="局域网："><a href="#局域网：" class="headerlink" title="局域网："></a>局域网：</h2><p>覆盖范围小，自己花钱购买设备， 带宽固定10M 100M 1000M，自己维护，最远100m</p><h2 id="广域网："><a href="#广域网：" class="headerlink" title="广域网："></a>广域网：</h2><p>距离远(&gt;100m)，花钱租带宽</p><h2 id="internet："><a href="#internet：" class="headerlink" title="internet："></a>internet：</h2><p>ISP是电信运营商internet service producer<br>自己的机房，对网民提供访问Internet</p><h2 id="网站的访问："><a href="#网站的访问：" class="headerlink" title="网站的访问："></a>网站的访问：</h2><p><strong>帧：数据包包括数据+网站和请求端的IP地址；</strong><br>后两部分是目标mac地址和原mac地址，即物理地址，传播过程中一直在变化。</p><p><strong>数据的请求：</strong><br><img src="https://img-blog.csdnimg.cn/20200102005246159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>数据的返回：</strong><br>网页上的数据是一块块发送给请求端的，成功接收后会发送反馈信息，此时链路中的缓存可以删掉了。数据接收完成后，会拼接恢复网页。<br><img src="https://img-blog.csdnimg.cn/20200102005316692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="OSI参考模型："><a href="#OSI参考模型：" class="headerlink" title="OSI参考模型："></a>OSI参考模型：</h2><blockquote><p>应用层——所有能产生网络流量的程序<br>表示层——在传输之前是否进行加密 或 压缩 处理，二进制或ASCII码表示<br>会话层——查木马，看需求端和网站之间的连接<br>传输层——可靠传输，流量控制，不可靠传输(一个数据包即可，不需要建立会话，例如向DNS查询网站IP地址)<br>网络层——负责选择最佳路径，规划IP地址(ipv4和ipv6变化只会影响网络层)<br>数据链路层——帧的开始和结束，还有透明传输，差错校验(纠错由传输层解决)<br>物理层——定义网络设备接口标准，电气标准(电压)，如何在物理链路上传输的更快</p></blockquote><h2 id="OSI参考模型对网络排错的意义："><a href="#OSI参考模型对网络排错的意义：" class="headerlink" title="OSI参考模型对网络排错的意义："></a>OSI参考模型对网络排错的意义：</h2><p>每一层都为上一层提供服务，一旦某一层崩了，上面所有层都崩了，所以排查问题从最上层(物理层)排查；</p><h2 id="1-物理层故障怎么办？"><a href="#1-物理层故障怎么办？" class="headerlink" title="1.物理层故障怎么办？"></a>1.物理层故障怎么办？</h2><p>查看链接状态，发送和接收的数据包数值；</p><h2 id="2-数据链路层故障怎么办？"><a href="#2-数据链路层故障怎么办？" class="headerlink" title="2.数据链路层故障怎么办？"></a>2.数据链路层故障怎么办？</h2><p>Mac地址冲突，2个一样的Mac地址同时访问；ADSL(非对称数字用户线路)欠费；两端的接口网速没有协商一致；计算机连接到其它VLAN(虚拟互联网)中。</p><h2 id="3-网络层故障怎么办？"><a href="#3-网络层故障怎么办？" class="headerlink" title="3.网络层故障怎么办？"></a>3.网络层故障怎么办？</h2><p>配置错误的IP地址，子网掩码，网关；数据有没有通过各个网关到达指定位置；</p><h2 id="4-应用层-合并3层-故障怎么办？"><a href="#4-应用层-合并3层-故障怎么办？" class="headerlink" title="4.应用层(合并3层)故障怎么办？"></a>4.应用层(合并3层)故障怎么办？</h2><p>应用程序配置问题<br><img src="https://img-blog.csdnimg.cn/2020010200534545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="OSI参考模型和网络安全解决办法："><a href="#OSI参考模型和网络安全解决办法：" class="headerlink" title="OSI参考模型和网络安全解决办法："></a>OSI参考模型和网络安全解决办法：</h2><h2 id="1-物理层安全隐患？"><a href="#1-物理层安全隐患？" class="headerlink" title="1.物理层安全隐患？"></a>1.物理层安全隐患？</h2><p>别人能私自接入你的网络，应该拔掉不用的网线或接口；</p><h2 id="2-数据链路层安全隐患？"><a href="#2-数据链路层安全隐患？" class="headerlink" title="2.数据链路层安全隐患？"></a>2.数据链路层安全隐患？</h2><p>ADSL账号密码，VLAN，交换机端口绑定Mac地址</p><h2 id="3-网络层安全隐患？"><a href="#3-网络层安全隐患？" class="headerlink" title="3.网络层安全隐患？"></a>3.网络层安全隐患？</h2><p>路由器上使用ACL(访问控制列表)控制数据包流量；防火墙设置；</p><h2 id="4-应用层安全隐患？"><a href="#4-应用层安全隐患？" class="headerlink" title="4.应用层安全隐患？"></a>4.应用层安全隐患？</h2><p>应用程序有没有漏洞；<br><img src="https://img-blog.csdnimg.cn/20200102005413482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="计算机网络的性能："><a href="#计算机网络的性能：" class="headerlink" title="计算机网络的性能："></a>计算机网络的性能：</h2><h2 id="1-速率"><a href="#1-速率" class="headerlink" title="1.速率"></a>1.速率</h2><p>连接在计算机网络上的主机在数字信道上传送数据位数的速率，也称data rate或bit rate(比特率)，单位是b/s, kb/s, Mb/s, Gb/s。和正常理解的网速的关系是除以8.</p><h2 id="2-带宽"><a href="#2-带宽" class="headerlink" title="2.带宽"></a>2.带宽</h2><p>数据通信领域中，数字信道所能传送的最高数据率，单位是b/s, kb/s, Mb/s, Gb/s。常见的是Mpbs。</p><h2 id="3-吞吐量"><a href="#3-吞吐量" class="headerlink" title="3.吞吐量"></a>3.吞吐量</h2><p>在单位时间内通过某个网络的数据量，单位是b/s, Mb/s。</p><h2 id="4-时延"><a href="#4-时延" class="headerlink" title="4.时延"></a>4.时延</h2><p>包括发送时延，传播时延，处理时延，排队时延。发送时延等于数据块长度(bit)除以信道带宽(bit/s). 更快的发送速度意味着波长越短，链路上的数据量更大；更快的传播速度意味着在网线中更快的传播速度。</p><h2 id="5-时延X带宽-时延带宽积"><a href="#5-时延X带宽-时延带宽积" class="headerlink" title="5.时延X带宽(时延带宽积)"></a>5.时延X带宽(时延带宽积)</h2><p>有多少数据正在线路上。</p><h2 id="6-往返时间-RTT-Round-Trip-Time"><a href="#6-往返时间-RTT-Round-Trip-Time" class="headerlink" title="6.往返时间(RTT, Round-Trip Time)"></a>6.往返时间(RTT, Round-Trip Time)</h2><p>从发送方发送数据开始，到发送方收到接收方确认数据的时间。例如ping一下。</p><h2 id="7-利用率"><a href="#7-利用率" class="headerlink" title="7.利用率"></a>7.利用率</h2><p>包括信道利用率：有数据通过的时间/总时间<br>网络利用率：信道利用率的加权平均<br>网络当前时延D = 网络空闲时时延D0 / (1 - 信道利用率U)</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://www.bilibili.com/video/av9876107?p=7">https://www.bilibili.com/video/av9876107?p=7</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-计算机网络概述（转载学习）&quot;&gt;&lt;a href=&quot;#第一章-计算机网络概述（转载学习）&quot; class=&quot;headerlink&quot; title=&quot;第一章 计算机网络概述（转载学习）&quot;&gt;&lt;/a&gt;第一章 计算机网络概述（转载学习）&lt;/h1&gt;&lt;h2 id=&quot;局域网：&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2020/10/31/%E7%AC%AC9%E5%B1%82%20%E5%87%A0%E7%A7%8D%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://example.com/2020/10/31/%E7%AC%AC9%E5%B1%82%20%E5%87%A0%E7%A7%8D%E6%97%A0%E7%BA%BF%E7%BD%91%E7%BB%9C%E7%9A%84%E5%AF%B9%E6%AF%94/</id>
    <published>2020-10-31T11:33:56.739Z</published>
    <updated>2020-10-31T11:33:41.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="9-1-几种无线网络的对比（转载学习）"><a href="#9-1-几种无线网络的对比（转载学习）" class="headerlink" title="9.1 几种无线网络的对比（转载学习）"></a>9.1 几种无线网络的对比（转载学习）</h1><p><img src="https://img-blog.csdnimg.cn/20200105202232339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>PAN：个人局域网<br>LAN：无线局域网<br>MAN：无线城域网<br>WAN：无线广域网</p><h1 id="9-2-无线局域网的组成"><a href="#9-2-无线局域网的组成" class="headerlink" title="9.2 无线局域网的组成"></a>9.2 无线局域网的组成</h1><p>重点讨论LAN。思路是设备的无线网卡和无线路由的AP连接，组成无线局域网，无线AP给无线设备分配IP。<br>基本服务集内的基站叫做接入点(Access Point)。<br>当网络管理员安装AP时，必须为该AP分配一个不超过32字节的 服务集标识符SSID 和 一个信道。<br><img src="https://img-blog.csdnimg.cn/20200105202246698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>两个无线IP通过网线连接，这样两个无线局域网可以看成一个整体的网络，两个AP类似于集线器。</p><h1 id="9-3-无线路由"><a href="#9-3-无线路由" class="headerlink" title="9.3 无线路由"></a>9.3 无线路由</h1><p>(1)传统的ADSL拨号上网<br><img src="https://img-blog.csdnimg.cn/20200105202251410.png" alt="在这里插入图片描述"><br>电话线接入分离器，与猫(调制解调器)的ADSL连接(分离器出来的另一条线连接电话)，LAN是接网线的口，与电脑的网卡连接，然后在电脑上创建ADSL拨号连接，输入账号密码，获得一个公网连接的IP地址，从而连入网络。这种方式只能连接一个电脑。</p><p>(2)无线路由<br><img src="https://img-blog.csdnimg.cn/20200105202304851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>为了实现给家庭内多个设备接入网络，需要一个无线路由((1)中相同原理)，与猫连接(下图白色标记方框)，此时无线路由扮演一个路由的作用；蓝色方框(相当于交换机)是给家庭内需要有线上网的设备连接；无线路由的天线(相当于AP)是给室内手机和笔记本进行无线通信。<br><img src="https://img-blog.csdnimg.cn/20200105202313608.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实际上无线路由相当于集合了路由，AP和交换机三个设备的功能。室内的无线和有线设备都在一个网络里，使用的是无线路由的路由部分的网关。</p><h1 id="9-4-移动自组网络"><a href="#9-4-移动自组网络" class="headerlink" title="9.4 移动自组网络"></a>9.4 移动自组网络</h1><p>自组网络是没有固定基础设施的(即没有AP)的无线局域网。这种网络由一些处于平等状态的移动站之间相互通信组成的临时网络。<br><img src="https://img-blog.csdnimg.cn/20200105202334463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2l3YW5kZXJ1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="9-5-3G-4G"><a href="#9-5-3G-4G" class="headerlink" title="9.5 3G/4G"></a>9.5 3G/4G</h1><p>移动运营商在全国有很多基站，不同的手机会自动向最近的基站进行注册，手机通话时，连接顺序是手机A-基站A-基站B-手机B，如果手机移动位置的时候，会更改注册的基站，并更改数据库。</p><p>参考文献<br><a href="https://www.bilibili.com/video/av47486689?p=156">https://www.bilibili.com/video/av47486689?p=156</a></p><p>[<a href="https://blog.csdn.net/iwanderu/article/details/103795715]">https://blog.csdn.net/iwanderu/article/details/103795715]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;9-1-几种无线网络的对比（转载学习）&quot;&gt;&lt;a href=&quot;#9-1-几种无线网络的对比（转载学习）&quot; class=&quot;headerlink&quot; title=&quot;9.1 几种无线网络的对比（转载学习）&quot;&gt;&lt;/a&gt;9.1 几种无线网络的对比（转载学习）&lt;/h1&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux基础知识</title>
    <link href="http://example.com/2020/10/19/Linux/"/>
    <id>http://example.com/2020/10/19/Linux/</id>
    <published>2020-10-19T14:34:00.000Z</published>
    <updated>2020-10-24T12:37:00.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="易混易错"><a href="#易混易错" class="headerlink" title="易混易错"></a>易混易错</h1><ol><li>$(),$(()),${}的区别</li><li>单引号，双引号，反引号的用法区别</li></ol><h1 id="Liux-常用命令"><a href="#Liux-常用命令" class="headerlink" title="Liux 常用命令"></a>Liux 常用命令</h1><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><ol><li><p>命令格式</p><p>命令格式</p><p>命令格式：命令 [选项] [参数]</p><p>例：ls -la /etc</p></li><li><p>目录处理命令</p><ol><li><p>显示目录文件命令ls</p><p>ls [选项] 文件或目录</p><p>选项 ：</p><ul><li>-a 显示所有文件，包括隐藏文件</li><li>-l 详细信息显示</li><li>-d 查看目录属性</li></ul><p>详细信息部分内容：-rw-r–r–</p><ul><li><p>- 文件类型（-表示二进制文件 d表示目录 l表示软连接文件）</p></li><li><p>rw- r– r–</p><p>u      g    o</p><p>u所有者 g所属组 o其他人</p><p>r读 w写 x执行</p></li></ul></li><li><p>创建新目录命令mkdir（<strong>m</strong>ake <strong>dir</strong>ectories）</p><p>mkdir [选项] [目录名]</p><p>选项：-p 递归创建</p></li><li><p>切换目录命令cd（<strong>c</strong>hange <strong>d</strong>irectory）</p><p>cd [目录]</p><p>cd /etc/passwd    切换到绝对路径</p><p>cd .. 回到上一级目录</p></li><li><p>显示当前目录命令pwd（<strong>p</strong>rint working <strong>d</strong>irectory）</p><p>pwd</p></li><li><p>删除空目录命令rmdir（<strong>r</strong>e<strong>m</strong>ove empty <strong>dir</strong>ectory）</p><p>rmdir [目录名]</p></li><li><p>复制文件或目录命令cp（<strong>c</strong>o<strong>p</strong>y）</p><p>cp [选项] 原文件或目录 目标目录</p><p>选项：</p><ul><li>-r 复制目录</li><li>-p 保留文件属性</li></ul></li><li><p>剪切文件或改名命令mv（<strong>m</strong>o<strong>v</strong>e）</p><p>mv 原文件或目录 目标目录</p></li><li><p>删除文件命令rm（<strong>r</strong>e<strong>m</strong>ove）</p><p>rm [选项] 文件或目录</p><p>选项：</p><ul><li>-r 删除目录</li><li>-f 强制执行</li></ul></li></ol></li><li><p>文件处理命令</p><ol><li><p>创建空文件命令touch</p><p>touch [文件名]</p></li><li><p>显示文件内容命令cat</p><p>cat [选项] [文件名]</p><p>选项：</p><ul><li>-n 显示行号</li></ul></li><li><p>显示文件内容（反向列示）tac</p><p>最后一行输出到第一行…</p></li><li><p>分页显示文件内容命令more</p><p>more [文件名]</p><p>（空格）或f    翻页</p><p>（Enter）        换行</p><p>Q或q                退出</p></li><li><p>分页显示文件内容命令less</p><p>less [文件名]</p><p>（空格）或f    翻页</p><p>（Enter）        换行</p><p>Q或q                退出</p><p>PageUp            向上翻页</p><p>“↑”                    向上换行</p><p>可以在less命令后页面使用/关键词查找，按n跳下一个</p></li><li><p>显示文件前面几行命令head</p><p>head 文件名</p><p>-n 指定行数</p></li><li><p>显示文件末尾几行命令tail</p><p>tail [选项] 文件名</p><p>选项</p><ul><li><p>-n    指定行数</p></li><li><p>-f    动态显示文件末尾内容</p></li></ul></li></ol></li><li><p>链接命令ln</p><p>生成链接文件命令ln（<strong>l</strong>i<strong>n</strong>k）</p><p>ln [选项] 原文件 目标文件</p><p>-s 创建软连接，不加此选项，则默认创建硬链接</p><p><strong>软链接</strong>特征：类似于Windows的快捷方式</p><ul><li><p>文件详细信息开头是l</p><p>例如：lrwxrwxrwx</p></li><li><p>文件大小只有几kb</p></li><li><p>详细信息里有文件名 —&gt; 源文件</p></li></ul><p><strong>硬链接</strong>特征：</p><ul><li>拷贝cp -p 并且两者同步更新</li><li>通过i节点识别</li><li>不能跨分区</li><li>不能针对目录使用</li></ul></li></ol><h2 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h2><ol><li><p>权限管理命令chmod（<strong>ch</strong>ange the permissions <strong>mod</strong>e of a file）</p><p>用法一：chmod [{ugoa}{+-=}{rwx}] [文件或目录]</p><p>用法二：chmod [mode=421] [文件或目录] </p><p>-R 递归修改，默认只修改当前文件/文件夹的权限，加-R即可修改文件夹下所有文件或目录权限</p><p>举例：</p><ul><li>用法一：chmod u+w /etc/passwd 给文件所有者添加写权限</li><li>用法二：chmod 755 /etc/passwd 对应权限为rwxr-xr-x（u7g5o5）</li></ul><table><thead><tr><th>代表字符</th><th>权限</th><th>对文件的含义</th><th>对目录的含义</th></tr></thead><tbody><tr><td>r</td><td>读权限</td><td>可以查看文件内容</td><td>可以列出目录中的内容</td></tr><tr><td>w</td><td>写权限</td><td>可以修改文件内容</td><td>可以在目录中创建、删除文件</td></tr><tr><td>x</td><td>执行权限</td><td>可以执行文件</td><td>可以进入目录</td></tr></tbody></table></li><li><p>其他权限管理命令</p><ol><li><p>chown命令（<strong>ch</strong>ange file <strong>own</strong>ership）</p><p>改变文件或目录的所有者命令chmod</p><p>chown [用户] [文件或目录]</p></li><li><p>chgrp命令（<strong>ch</strong>ange file <strong>gr</strong>ou<strong>p</strong> ownership）</p><p>改变文件或目录的所属组</p><p>charg [用户组] [文件或目录]</p></li><li><p>umask命令</p><p>显示、设置文件的缺省权限（创建目录时，系统默认对其赋予的权限，对于文件，为了安全考虑，系统默认取消执行权限，其他的权限和目录一样）</p><p>显示：umask [-S] 以rwx形式显示新建文件缺省权限</p><p>设置：umask 数字</p><p>此处数字应为rwxrwxrwx对权限（用rwx表示）取”异或”的值(按rwx权值421转化成数字)</p><p>举例：</p><p>我想设置缺省权限为rwxr-xr–</p><p>rwxrwxrwx与</p><p>rwxr-xr–取异或得</p><p>— -w- -wx</p><p>转化成权值应为023</p></li></ol></li></ol><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h2 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h2><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><h1 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h1><h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><h1 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h1><h2 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h2><ol><li><p>简介</p><ul><li>Linux主要通过用户配置文件来查看和修改用户信息</li><li>通过命令行修改的信息重启不会保存，而保存到配置文件中则会永久生效。</li></ul></li><li><p>用户信息文件/etc/passwd</p><p>root​：x:0:0:root:/root:/bin/bash</p><ol><li><p>第一字段：用户名</p></li><li><p>第二字段：密码标志（x表示有密码，不可见，真正的密码（加密）保存在/etc/shadow中）</p></li><li><p>第三字段：UID（用户ID）</p><p>​    0 超级用户</p><p>​    1-499    系统用户（伪用户）</p><p>​    500-65535    普通用户</p></li><li><p>第四字段：GID（用户初始组ID）</p><p>​    初始组：用户一创建就会生成的同名的组 。</p><p>​    附加组：用户创建之后还可以继续附加的组</p></li><li><p>第五字段：用户说明</p></li><li><p>第六字段：家目录</p><ol><li>普通用户：/home/用户名/</li><li>超级用户：/root/</li></ol></li><li><p>第七字段：登陆之后的Shell</p></li></ol></li><li><p>影子文件/etc/shadow</p><p>root:*&amp;89dsuf8:16066:0:99999:7:::</p><ol><li><p>第一字段：用户名</p></li><li><p>第二 字段：加密密码</p><p>如果密码是”!!”或”*”代表没有密码，不能登录</p></li><li><p>第三字段：密码最后修改日期</p><p>是用时间戳表示，即从1970年1月1日开始，每过一天加1</p><p>时间戳换算成日期代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date  -d &quot;2020-10-23 16066 days&quot;</span><br></pre></td></tr></table></figure></li><li><p>两次修改密码所需要的间隔时间（和第三字段相比 ）</p></li><li><p>密码有效期（和第三字段相比 ）</p></li><li><p>密码修改到期前的警告天数（和第五字段相比）</p></li><li><p>密码到期后的宽限天数（和第五字段相比）</p><p>0代表密码过期立即失效</p><p>-1代表密码永远不会失效</p></li><li><p>账号失效时间（用时间戳表示）</p><p>到账号失效时间，即使未过有效期，用户账号也会失效</p><p>日期换算为时间戳代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $(($(date --date=&quot;2020/10/23&quot;+%s)/86400+1))</span><br></pre></td></tr></table></figure></li><li><p>保留（暂时没用）</p></li></ol></li><li><p>组信息文件/etc/group和组密码文件/etc/gshadow</p><p>组信息文件 /etc/group</p><ol><li>第一字段：组名</li><li>第二字段：组密码标志</li><li>第三字段 ：GID</li><li>第四字段：组中附加用户</li></ol><p>组密码文件 /etc/gshadow（使用较少）</p><ol><li>第一字段：组名</li><li>第二字段：组密码</li><li>第三字段：组管理员用户名</li><li>第四字段：组中附加用户</li></ol></li></ol><h2 id="用户管理相关文件"><a href="#用户管理相关文件" class="headerlink" title="用户管理相关文件"></a>用户管理相关文件</h2><ol><li><p>用户家目录</p><p>普通用户：/home/用户名/，所有者和所属组都是此用户，权限是700</p><p>超级用户：/root/，所有者和所属组都是root用户，权限是550</p><p>将一个普通用户变为超级用户：将普通用户的UID改成0，而不是改用户的组id GID</p></li><li><p>用户的邮箱（创建用户时自动创建）</p><p>/var/spool/mail/用户名/</p></li><li><p>用户模板目录</p><p>/etc/skel</p><p>创建新用户时，会自动创建一部分文件，这部分文件就是来源于这个目录，可以修改。</p></li></ol><h2 id="用户管理命令-1"><a href="#用户管理命令-1" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><ol><li><p>用户添加命令useradd</p><ol><li><p>useradd [选项] 用户名</p><p>​    选项：</p><ol><li>-u     UID    手工指定用户的UID号</li><li>-d     家目录 手工指定用户的家目录</li><li>-c     用户说明 手工指定用户的说明</li><li>-g     组名 手工指定用户的初始组 </li><li>-G     手工指定用户的附加组</li><li>-s     shell 手工指定用户的登录shell，默认为/bin/bash</li></ol></li><li><p>添加一个用户，之前的六个文件都会修改</p></li><li><p>用户默认值文件/etc/default/useradd</p><ul><li>HOME=/home    #用户的家目录</li><li>INACTIVE=-1    #密码过期宽限天数（对应 shadow文件第七字段）</li><li>EXPIRE=    #密码失效时间（对应…第八字段）</li><li>SHELL=/bin/bash    #默认的shell</li><li>SKEL=/etc/skel    #模板目录</li><li>CREATE_MAIL_SPOOL=yes    是否建立邮箱</li></ul></li><li><p>用户默认值文件/etc/login.defs</p><ul><li>PASS_MAX_DAYS 99999    #密码有效期（对应…5）</li><li>PASS_MIN_DAYS 0    #密码修改间隔 （4）</li><li>PASS_MIN_LEN 5    #密码最小5位（PAM） （5位过于简单，现在是PAM认证8位）</li><li>PASS_WARN_AGE 7    #密码到期警告 （6）</li><li>UID_MIN 500    #UID的范围</li><li>UID_MAX 60000</li><li>ENCRYPR_METHOD SHA512     #加密模式</li></ul></li></ol></li><li><p>修改用户密码passwd</p><ol><li><p>passwd命令</p><p>#passwd [选项 ] 用户名</p><p>或$passwd  [选项 ]</p><p>选项：</p><ul><li>-S    查询 用户密码的密码状态，仅root用户可用</li><li>-l    暂时锁定用户。仅root用户可用</li><li>-u    解锁用户。仅root用户可用</li><li>–stdin    可以通过管道符输出的数据作为用户的密码</li></ul><p>注意：超级用户改某用户密码加用户名，普通用户改自己的密码不加用户名！</p></li></ol></li><li><p>修改用户信息usermod 修改用户密码状态chage</p><ol><li><p>usermod    修改用户信息</p><p>usermod [选项] 用户名</p><p>选项：</p><ol><li>-u    UID 修改用户的UID号</li><li>-c    用户说明    修改用户的说明信息</li><li>-G    组名    修改用户的附加组</li><li>-L    临时锁定用户（Lock）</li><li>-U    解锁用户（Unlock）</li></ol></li><li><p>chage    修改用户密码状态</p><p>chage    [选项] 用户名</p><p>选项：</p><ol><li>-l    列出用户的详细密码状态</li><li>-d    日期    最后一次修改密码的日期（shadow3字段 ）</li><li>-m    天数    两次密码修改间隔（4）</li><li>-M    天数    密码有效期（5）</li><li>-W    天数    密码过期前的警告天数（6）</li><li>-I    天数    密码过期后宽限天数（7）</li><li>-E    日期    账号失效时间（8）</li></ol><p>平时只用到 chage -d 0 用户名 </p><p>将密码修改日期归0了，用户一登陆就要修改密码</p></li></ol></li><li><p>删除用户userdel</p><p>userdel [选项] 用户名</p><p>选项：</p><p>​        -r    删除用户的同时删除用户家目录</p></li><li><p>查看用户ID</p><p>id 用户名</p><p>输出uid，gid，同组用户</p></li><li><p>用户切换命令su</p><p>su [选项] 用户名 </p><p>​    选项：</p><ul><li>-    选项只使用 ‘-’ （一定要加）代表连带用户的环境 变量一起切换</li><li>-c    仅执行一次命令，而不切换用户身份</li></ul></li></ol><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><ol><li><p>添加用户组</p><p>groupadd [选项] 组名</p><p>选项：</p><ul><li>-g    GID    指定组ID</li></ul></li><li><p>修改用户组</p><p>groupmod [选项] 组名</p><p>选项：</p><ul><li>-g    GID    修改组ID</li><li>-n    新组名    修改组名</li></ul></li><li><p>删除用户组</p><p>groupdel 组名</p></li><li><p>把用户添加入组或从组中删除</p><p>gpasswd    [选项] 组名</p><p>选项：</p><ul><li>-a    用户名    把用户加入组</li><li>-d    用户名    把用户从组中删除</li></ul></li></ol><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h1 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h1><h1 id="Shell基础"><a href="#Shell基础" class="headerlink" title="Shell基础"></a>Shell基础</h1><h2 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h2><p>Shell是命令行解释器，也是功能强大的编程语言</p><p>Linux支持的Shell列在文件/etc/shells里面，常用：bash，sh，csh</p><h2 id="Shell脚本执行方式"><a href="#Shell脚本执行方式" class="headerlink" title="Shell脚本执行方式"></a>Shell脚本执行方式</h2><ol><li><p>输出命令 echo</p><p>echo [选项] [输出内容]</p><p>​            -e：支持反斜线控制的字符转换</p><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\\</td><td>输出\本身</td></tr><tr><td>\a</td><td>输出警告声</td></tr><tr><td>\b</td><td>退格键（向左删除）</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表符（Tab）</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>常用如上</td><td></td></tr><tr><td>\0nnn</td><td>按照八进制ASCII表输出，其中0是数字0，nnn是三位八进制数</td></tr><tr><td>\xhh</td><td>按照十六进制ASCII表输出，其中hh是两位十六进制数</td></tr><tr><td>有趣的如下</td><td></td></tr><tr><td>\e[1;31m 内容 \e[0m</td><td>输出颜色，30m=黑色，31m=红色，32m=绿色，33m=黄色，34m=蓝色，35m=洋红，36m=青色，37m=白色</td></tr></tbody></table></li><li><p>编写第一个Shell脚本</p><p>使用vi/vim/gedit编辑器编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hello.sh</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo -e &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure></li><li><p>脚本执行方法一：</p><p>赋予执行权限，直接运行</p><p>​    赋予执行权限：chmod 755 hello.sh</p><p>​    另外，ll命令（即ls -l）显示当前目录下的每个文件或者子目录的详细信息</p><p>运行：</p><p>1)可以用绝对路径：</p><p>​        <code>/root/sh/hello.sh</code></p><p>2)也可以用相对路径</p><p>​        <code>./hello.sh</code></p></li><li><p>脚本执行方法二：</p><p>通过bash调用执行脚本</p><p><code>bash hello.sh</code></p></li></ol><h2 id="Bash的基本功能"><a href="#Bash的基本功能" class="headerlink" title="Bash的基本功能"></a>Bash的基本功能</h2><ol><li><p>历史命令与命令补全</p><ol><li>history [选项] [历史命令保存文件]</li></ol><p>​                -c                                            清空历史命令</p><p>​                -w                                            把缓存中的历史命令写入历史命令<a href="~/.bash_history" title="保存文件">^保存文件</a>中</p></li></ol><ol start="2"><li><p>历史命令默认会保存1000条，可以在环境变量配置文件/etc/profile中，修改环境变量HISTSIZE</p></li><li><p>历史命令的调用</p></li></ol><ul><li>使用上、下箭头调用以前的历史命令</li><li>使用”!n”重复执行第n条命令</li><li>“!!”重复执行上一条命令</li><li>“!字串”重复执行最后一条以该字串开头的命令</li></ul><ol start="4"><li><p>在输入命令或文件时，按Tab键会自动补全</p><p>当有多个文件开头相同时，无法触发Tab补全功能，可以连按两下Tab键，输出开头相同的文件或命令</p></li></ol><ol start="2"><li><p>命令别名与常用快捷键</p><ol><li><p>命令别名</p><ol><li><p>设定命令别名    alias 别名=‘原命令’</p></li><li><p>查询命令别名    alias</p></li><li><p>命令执行时的顺序</p><ol><li>执行用绝对路径或相对路径执行的命令</li><li>执行别名</li><li>执行Bash的内部命令</li><li>按照$PATH环境变量定义的目录查找顺序的找到的第一个命令</li></ol></li><li><p>让别名永久生效</p><p>用vi 打开/root/.bashrc ，在其中添加需要添加的别名</p></li><li><p>删除别名</p><p><code>unalias 别名</code></p></li></ol></li><li><p>Bash常用快捷键</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+C</td><td>强制终止当前命令</td></tr><tr><td>ctrl+L</td><td>清屏，相当于clear</td></tr><tr><td>ctrl+U</td><td>删除或剪切当行光标前的命令</td></tr><tr><td>ctrl+K</td><td>删除或剪切当行光标后的命令</td></tr><tr><td>ctrl+Y</td><td>粘贴ctrl+U或者ctrl+K剪切的内容</td></tr><tr><td>ctrl+R</td><td>在历史命令中搜索。按下ctrl+R之后，会出现搜索界面。</td></tr><tr><td>ctrl+D</td><td>退出当前终端</td></tr><tr><td>ctrl+Z</td><td>暂停，放到后台</td></tr></tbody></table></li></ol></li></ol><ol start="3"><li><p>输入输出重定向</p><ol><li><p>标准输入输出</p><table><thead><tr><th>设备</th><th>文件描述符</th><th>类型</th></tr></thead><tbody><tr><td>键盘</td><td>0</td><td>标准输入</td></tr><tr><td>显示器</td><td>1</td><td>标准输出</td></tr><tr><td>显示器</td><td>2</td><td>标准错误输出</td></tr></tbody></table></li><li><p>输出重定向</p><table><thead><tr><th>类型</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>标准输出重定向</td><td>命令 &gt; 文件</td><td>以覆盖的方式，把命令正确输出输出到制定文件或设备中</td></tr><tr><td>标准输出重定向</td><td>命令 &gt;&gt; 文件</td><td>以追加的方式，把命令正确输出输出到制定文件或设备中</td></tr><tr><td>标准错误输出重定向</td><td>命令 2&gt; 文件</td><td>以覆盖的方式，把命令错误输出输出到制定文件或设备中</td></tr><tr><td>标准错误输出</td><td>命令 2&gt;&gt; 文件</td><td>以覆盖的方式，把命令错误输出输出到制定文件或设备中</td></tr></tbody></table><p>正确输出和错误输出同时保存</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; 文件 2&gt;&amp; 1</td><td>以覆盖的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令 &gt;&gt; 文件 2&gt;&amp; 1</td><td>以追加的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令 &amp;&gt; 文件</td><td>以覆盖的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令 &amp;&gt;&gt; 文件</td><td>以追加的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令&gt;&gt;文件1 2&gt;&gt;文件2</td><td>以追加的方式，把正确输出输出到文件1，错误输出都输出到文件2中</td></tr></tbody></table></li><li><p>输入重定向</p><p>wc [选项] [文件名]        统计输入的字节数、单词数、行数</p><p>​         -c         统计字节数</p><p>​         -w        统计单词数</p><p>​         -l         统计行数</p><p>命令 &lt; 文件名    [选项]（不能三个选项都写）统计文件中的 字节数、单词数、行数</p></li></ol></li><li><p>多命令顺序执行与管道符</p><ol><li><p>多命令顺序执行</p><table><thead><tr><th>符号</th><th>格式</th><th>作用</th></tr></thead><tbody><tr><td>;</td><td>命令1;命令2</td><td>无逻辑联系</td></tr><tr><td>&amp;&amp;</td><td>命令1&amp;&amp;命令2</td><td>当命令1执行正确，才会执行命令2，当命令1执行不正确，命令2则不会执行</td></tr><tr><td>||</td><td>命令1||命令2</td><td>当命令1执行不正确，命令2执行，命令1执行正确 ，不会执行 命令2</td></tr></tbody></table><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br></pre></td></tr></table></figure><p>注意：ls || echo “no” &amp;&amp; echo “yes”    不能实现以上效果。如果命令错误，会输出no和yes</p><p>dd if=输入文件 of=输出文件 bs=字节数 count =个数</p><p>​    选项：    if                         指定源文件或源设备</p><p>​                    of                        制定目标文件或目标设备</p><p>​                    bs=字节数          指定一次输入/输出多少字节，即把多少                                                    字节看作一个数据块</p><p>​                    count                  制定输入/输出多少个数据块</p></li><li><p>管道符</p><p>命令1 | 命令2            命令1的正确输出作为命令2的操作对象</p><p>more        使文件的内容分屏显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -a /etc/ | more</span><br></pre></td></tr></table></figure><p>netstat  -an             查询所有的网络连接（需要安装net -tools）</p><p>grep [选项] “搜索内容” 文件名     在文件中搜包含”搜索内容“的内容</p><p>​            -i                            忽略 大小写</p><p>​            -n                            输出行号</p><p>​            -v                            反向查找</p><p>​            –color=auto          搜索出的关键词用颜色表示</p><p>netstat -an | grep “ESTABLISHED”</p></li></ol></li><li><p>通配符与其他特殊符号</p><ol><li><p>通配符</p><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>？</td><td>匹配任意一个字符</td></tr><tr><td>*</td><td>匹配0个或任意多个字符</td></tr><tr><td>[]</td><td>匹配[]中任意一个字符</td></tr><tr><td>[-]</td><td>例如：[a-z]匹配a-z中任意一个字符</td></tr><tr><td>[^]</td><td>例如：[^123]匹配任意一个123以外的字符</td></tr></tbody></table></li><li><p>Bash中其他特殊符号</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>‘ ‘</td><td>单引号，在单引号中符号都没有特殊含义</td></tr><tr><td>“”</td><td>双引号，在双引号中符号都没有特殊含义，但是”$“ 、”`”和”\“是例外，分别拥有”调用变量的值”、”引用命令”、”转义字符”的特殊含义</td></tr><tr><td>``</td><td>反引号，其中是系统命令</td></tr><tr><td>$()</td><td>和反引号作用一样，推荐使用$()，易于区分</td></tr><tr><td>#</td><td>#开头表示注释</td></tr><tr><td>$</td><td>用于调用变量的值，echo $a 最好用’’或者””括起来，否则变量a中的空格不能输出。</td></tr><tr><td>\</td><td>转义符</td></tr></tbody></table></li></ol></li></ol><h2 id="Bash的变量"><a href="#Bash的变量" class="headerlink" title="Bash的变量"></a>Bash的变量</h2><ol><li><p>变量设置规则</p><ol><li>变量名称由字母、数字和下划线组成，不能是数字开头</li><li>变量默认类型是字符串型的</li><li>变量用等号连接值，等号左右两侧不能有空格</li><li>变量值中如果有空格，需要用单引号或者双引号括起来</li><li>如果需要增加变量的值，那么可以进行变量值的叠加。不过变量需用双引号包含”$变量名”或者用${变量名}包含</li><li>如果是命令的结果作为变量值赋予变量，则需要使用反引号或者$()包含命令</li><li>环境变量名建议大写，易于区分</li></ol></li><li><p>变量分类</p><ul><li>用户自定义变量</li><li>环境变量：和系统操作环境相关的数据</li><li>位置参数变量：主要用来向脚本传递参数或数据，变量名不能自定义，变量作用固定</li><li>预定义变量：Bash中已经定义的变量，变量名不能自定义，变量作用也是固定的</li></ul></li><li><p>本地变量</p><ul><li><p>定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;lij&quot;</span><br></pre></td></tr></table></figure></li><li><p>叠加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aa=123</span><br><span class="line">aa=&quot;$aa&quot;456</span><br><span class="line">aa=$&#123;aa&#125;789</span><br></pre></td></tr></table></figure></li><li><p>变量调用 $+变量名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $name</span><br></pre></td></tr></table></figure></li><li><p>变量查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure></li><li><p>变量删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br></pre></td></tr></table></figure></li></ul></li><li><p>环境变量</p><ol><li><p>环境变量的生效范围</p><p>用户自定义变量只在当前Shell中生效，环境变量在当前Shell和所有子Shell中生效。</p><p>如果把环境变量写入相应的配置文件，那么这个环境变量就会在所有的Shell中生效</p><p>命令pstree可以查看进程树</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p><ol><li><p>声明变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export 变量名=变量值</span><br></pre></td></tr></table></figure></li><li><p>查询变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure></li><li><p>删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset</span><br></pre></td></tr></table></figure></li></ol></li><li><p>系统常见环境变量</p><ol><li><p>PATH：系统查找命令的路径</p></li><li><p>PSI:定义系统提示符的变量</p><table><thead><tr><th>提示符</th><th>作用</th></tr></thead><tbody><tr><td>\d</td><td>显示日期，格式为”星期  月 日“</td></tr><tr><td>\h</td><td>显示简写主机名，默认 主机名”localhost“</td></tr><tr><td>\t</td><td>显示24小时制时间，格式是“HH:MM:DD”</td></tr><tr><td>\T</td><td>显示12小时制时间，格式是“HH:MM:SS”</td></tr><tr><td>\A</td><td>显示24小时制时间，格式是“HH:MM”</td></tr><tr><td>\u</td><td>显示当前用户名</td></tr><tr><td>\w</td><td>显示当前所在目录的完整名称</td></tr><tr><td>\W</td><td>显示当前命令的最后一个目录</td></tr><tr><td>\#</td><td>执行的第几个命令</td></tr><tr><td>\$</td><td>提示符。如果是root用户会显示#，如果是普通用户则是$</td></tr></tbody></table></li></ol></li></ol></li><li><p>位置参数变量</p><table><thead><tr><th>位置参数变量</th><th>作用</th></tr></thead><tbody><tr><td>$n</td><td>第n个参数，$0表示命令本身，10以上的参数用大括号包含，如：${10}</td></tr><tr><td>$*</td><td>代表所有参数，将所有参数视为一个整体</td></tr><tr><td>$@</td><td>代表所以参数，将每个参数区分对待</td></tr><tr><td>$#</td><td>代表命令行参数的个数</td></tr></tbody></table></li><li><p>预定义变量</p><table><thead><tr><th>预定义变量</th><th>作用</th></tr></thead><tbody><tr><td>$?</td><td>返回最后一次执行的命令的返回状态，0代表运行正确，其他表示错误</td></tr><tr><td>$$</td><td>表示当前进程的PID</td></tr><tr><td>$!</td><td>表示最后一个进程的PID</td></tr></tbody></table><ul><li><p>接受键盘输入</p><p>read [选项]  [变量名]</p><p>​            -p                            给用户的提示信息     </p><p>​            -t    秒数                等待输入的时间（秒），默认无限</p><p>​            -n    字符数            read命令接受到了指定的字符数就会执行</p><p>​            -s                            隐藏输入的数据，如密码</p></li></ul></li></ol><h2 id="Bash的运算符"><a href="#Bash的运算符" class="headerlink" title="Bash的运算符"></a>Bash的运算符</h2><ol><li><p>数值运算和运算符</p><ol><li><p>declare声明变量类型</p><p>declare [+/-] [选项] 变量名</p><p>​    选项：     -          给变量设定类型属性</p><p>​                    +         取消变量的类型属性</p><p>​                    -i        将变量声明为整数型</p><p>​                    -x        将变量设为系统变量</p><p>​                    -p        显示指定变量的被声明类型</p></li><li><p>数值运算的方法：</p><ol><li><p>declare声明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     a=1</span><br><span class="line">     b=2</span><br><span class="line">declare -i c=$a+$b</span><br></pre></td></tr></table></figure></li><li><p>expr或let数值运算工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  a=1</span><br><span class="line">  b=2</span><br><span class="line">  d=$(expr $a + $b)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">&quot;+&quot;</span>左右两侧都必须有空格</span></span><br></pre></td></tr></table></figure></li><li><p>$((运算式))或$[运算式]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  a=1</span><br><span class="line">  b=2</span><br><span class="line">  e=$(($a+$b))</span><br><span class="line">f=$[$a+$b]</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><ol start="3"><li><p>运算符</p><table><thead><tr><th>优先级</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>13（高）</td><td>-，+</td><td>单目负、单目正</td></tr><tr><td>12</td><td>!，~</td><td>逻辑非、按位取反或补码</td></tr><tr><td>11</td><td>*，/，%</td><td>乘、除、取模</td></tr><tr><td>10</td><td>+，-</td><td>加、减</td></tr><tr><td>9</td><td>&lt;&lt;，&gt;&gt;</td><td>按位左移，按位右移</td></tr><tr><td>8</td><td>&lt;=，&gt;=，&lt;，&gt;</td><td>小于或等于，大于或等于，小于，大于</td></tr><tr><td>7</td><td>==，!=</td><td>等于，不等于</td></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><td>5</td><td>^</td><td>按位异或</td></tr><tr><td>4</td><td>|</td><td>按位或</td></tr><tr><td>3</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>2</td><td>||</td><td>逻辑或</td></tr><tr><td>1（低）</td><td>=，+=，-=，*=，/=，%=，&amp;=，^=，|=，&lt;&lt;=，&gt;&gt;=</td><td>赋值、运算且赋值</td></tr></tbody></table></li></ol><ol start="2"><li><p>变量测试与内容替换</p><p>使用时再看[Shell基础-Bash变量-变量测试与内容替换][2]</p></li></ol><h2 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h2><ol><li><p>环境变量配置文件简介</p><p>环境变量配置文件改变后一般要重启才会生效</p><ol><li><p>source命令，执行后环境变量配置文件的改变就会生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source 配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash">相当于</span></span><br><span class="line">. 配置文件</span><br></pre></td></tr></table></figure></li><li><p>简介</p><p>主要是系统默认环境变量 比如：PATH、HISTSIZE、PS1、HOSTNAME等默认环境变量</p></li></ol></li><li><p>环境变量配置文件作用</p><p>主要文件有</p><ul><li>/etc/profile</li><li>/etc/profile.d/*.sh</li><li>~/.bash_profile</li><li>~/.bashrc</li><li>/etc/bashrc</li></ul><p>作用见[Shell基础-环境变量配置文件][3]</p></li><li><p>其他配置文件和登录信息</p><ol><li><p>注销时生效的环境变量配置文件</p><p>~/.bash_logout</p></li><li><p>其他配置文件</p><p>~/bash_history</p></li><li><p>Shell登录信息</p><p>本地终端欢迎信息：    /etc/issue</p><table><thead><tr><th>转义符</th><th>作用</th></tr></thead><tbody><tr><td>\d</td><td>显示当前系统日期</td></tr><tr><td>\s</td><td>显示操作系统名称</td></tr><tr><td>\l</td><td>显示登录的终端号，常用</td></tr><tr><td>\m</td><td>显示硬件体系机构，如i386、i686等</td></tr><tr><td>\n</td><td>显示主机名</td></tr><tr><td>\o</td><td>显示域名</td></tr><tr><td>\r</td><td>显示内核版本</td></tr><tr><td>\t</td><td>显示当前系统时间</td></tr><tr><td>\u</td><td>显示当前登录用户的序列号</td></tr></tbody></table><p>登陆后欢迎信息：/etc/motd</p><p>​    本地和远程登陆，都可以显示</p></li></ol></li></ol><h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h2><ol><li><p>正则表达式与通配符的区别</p><ul><li><p>正则表达式是用来在文件中匹配符合条件的字符串，是包含匹配，grep、awk、sed等命令可以支持正则。</p></li><li><p>匹配符是用来匹配符合条件的文件名，是完全匹配，ls、find、cp命令不支持正则表达式，只能使用shell的通配符来进行匹配。</p></li></ul></li><li><p>基础正则表达式（可与1.1.3中的通配符相比较）</p><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个字符0或多次</td></tr><tr><td>.</td><td>匹配换行符以外的任意一个字符</td></tr><tr><td>^</td><td>匹配行首，如^hi会匹配hi开头的字符串</td></tr><tr><td>$</td><td>匹配行尾</td></tr><tr><td>[]</td><td>匹配中括号中的任意一个值</td></tr><tr><td>[^]</td><td>匹配中括号中以外任意一个值</td></tr><tr><td>\</td><td>转义符</td></tr><tr><td>\{n\}</td><td>表示前面的字符出现了n次</td></tr><tr><td>\{n,\}</td><td>表示前面的字符至少出现了n次</td></tr><tr><td>\{n,m\}</td><td>表示前面的字符出现了n至m次，如[a-z\{2,3\}表示匹配2到3位小写字母</td></tr></tbody></table></li></ol><h2 id="字符截取命令"><a href="#字符截取命令" class="headerlink" title="字符截取命令"></a>字符截取命令</h2><ol><li><p>grep 字段提取命令（按行），常与cut命令（搜列）合用。</p><p>grep 【选项】 “模式” 文件</p><p>选项：</p><ul><li>-E        模式是拓展（Extend）的正则表达式</li><li>-i         忽略大小写（ignore case）</li><li>-v        只选中不匹配的行</li><li>-n        显示行号</li><li>-w        ”完全匹配“（包含关键字的字符串不匹配）</li></ul><p>模式：即要在每行搜索的关键字</p></li><li><p>cut 字段提取命令（按列）</p><p>cut [选项] 文件名</p><p>选项：</p><p>-f            列号            提取第几列</p><p>-d            分隔符        按照指定分隔符分割列</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd |grep /bin/bash | grep -v root | cut -d &quot;:&quot; -f 1</span><br></pre></td></tr></table></figure><p>检索文件/etc/passwd中，包含“/bin/bash”的行，再去掉包含”root”的行，最后用”:”分割后的第一列</p><p>缺点：不能实现准确用空格分隔列，awk命令可以实现，但是awk命令虽强大但复杂，尽量用cut命令。</p></li><li><p>awk命令</p><ol><li><p>printf命令（格式化输出语句）</p><ul><li><p>printf    ‘输出类型输出格式’    输出内容</p></li><li><p>注意输出类型和输出格式需要用单引号或者双引号括起来</p></li><li><p>​    输出类型：</p><ul><li>​    %ns            输出字符串（占n个字符）</li><li>​    %ni            输出整数（占n个位置）</li><li>​    %m.nf        输出浮点数（小数点前m位，小数点后n位）</li></ul></li><li><p>举例说明：</p><p>‘%ns%s%s\n’的作用：控制字符串输出，每三个字符串为一行，且第一个字符串占n个位置（在每行第一个字符串前用空格补齐，少了补空格，多了不”溢出“）</p></li><li><p>输出格式：</p><ul><li>\a        输出警告信息</li></ul></li><li><p>\b         输出退格键（backspace）</p><ul><li>\f        清除屏幕</li><li>\n        换行</li><li>\r        回车</li><li>\t        水平输出退格键（Tab键）</li><li>\v        垂直输出退格键（Tab键）</li></ul></li><li><p>Linux默认支持printf，不支持print，awk命令支持两者，print命令输出后当行自带换行，printf命令不带换行</p></li></ul></li><li><p>awk命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;条件1&#123;动作1&#125;条件2&#123;动作2&#125;条件3&#123;动作3&#125;...&#x27; 文件名</span><br></pre></td></tr></table></figure><p>条件:    一般使用关系表达式作为条件</p><p>动作：格式化输出/流程控制语句</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;printf $2 &quot;\t&quot; $6 &quot;\n&quot;&#125;&#x27; student.txt</span><br></pre></td></tr></table></figure><p>以上命令条件省略，意为任何情况都执行。该命令输出student.txt文件中第二列和第六列</p><p>BEGIN、END和FS内置变量</p><ul><li>三者都是awk语句中的条件</li><li>首先，要了解awk语句执行时，是先读取文件的第一行语句再进入”条件”和”动作”</li><li>BEGIN对应的”动作”在读取文件第一行之后再执行</li><li>END对应的”动作”在所有的数据都处理完之后再执行</li><li>FS内置变量是用来定义awk中的分隔符，默认为空格或制表符</li></ul></li></ol></li><li><p>sed命令</p><ul><li><p>sed是一种轻量级流编辑器，相对于传统文本编辑器（windows中的记事本、linux中的vim gredit等），sed命令可以不用在文件中打开再编辑，而是可以在命令行实现对数据的选取、替换、删除、新增。</p></li><li><p>sed [选项] ‘[动作]’ 文件名</p><p>一般sed命令会将所有数据都输出到屏幕</p><p>选项名：</p><ul><li>-n    sed命令只会把处理过的数据输出到屏幕</li><li>-e    允许对输入数据应用多条sed命令编辑 </li><li>-i    用sed修改后的结果直接修改文件中的数据，而不是由屏幕输出</li></ul><p>动作：</p><ul><li>a    追加，在当前行添加一行或多行，添加多行时，除最后一行外，每行末尾需要添加”\“，代表数据数据未完结</li><li>c    行替换，用c后面的字符串替换，可用”\“</li><li>i    插入可加”\“</li><li>d    删除指定行</li><li>p    打印当前行</li><li>s    字串替换，”行范围s/旧字串/新字串/g”</li></ul></li><li><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;s/Liming//g;s/Gao//g&#x27; student.txt</span><br></pre></td></tr></table></figure><p>上述命令，同时把”Liming”和”Gao”替换为空</p></li></ul></li></ol><h2 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h2><ol><li><p>排序命令sort</p><p>sort [选项] 文件名</p><p>选项：-f    忽略大小写</p><p>​            -n    以数值型进行排序</p><p>​            -r    反向排序</p><p>​            -t    指定分隔符</p><p>​            -k n[,m]    按照指定的字段范围排序。从第n字段开始，m字段结束（默认到行尾）</p></li><li><p>统计命令wc</p><p>wc [选项] 文件名</p><p>选项：    -l    只统计行数</p><p>​                -w    只统计单词数</p><p>​                -m    只统计字符数</p></li></ol><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ol><li><p>两种判断格式</p><ul><li>test -e /root/install/.log</li><li>[ -e /root/install.log ]</li></ul></li><li><p>按照文件类型进行判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-b 文件</td><td>判断文件是否存在，并且是否是块文件（是则为真）</td></tr><tr><td>-c 文件</td><td>判断文件是否存在，并且是否是字符设备文件（是则为真）</td></tr><tr><td><font color=0099ff> -d 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否是目录文件（是则为真）</font></td></tr><tr><td><font color=0099ff>-e 文件</font></td><td><font color=0099ff>判断文件是否存在（存在则为真）</font></td></tr><tr><td><font color=0099ff>-f 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否是普通文件（是则为真）</font></td></tr><tr><td>-L 文件</td><td>判断文件是否存在，并且是否是符号链接文件（是则为真）</td></tr><tr><td>-p 文件</td><td>判断文件是否存在，并且是否是管道文件（是则为真）</td></tr><tr><td>-s 文件</td><td>判断文件是否存在，并且是否非空（非空则为真）</td></tr><tr><td>-S 文件</td><td>判断文件是否存在，并且是否是为套接文件（是则为真）</td></tr></tbody></table></li><li><p>按照文件权限进行判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td><font color=0099ff>-r 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否该文件拥有读权限（有则为真）</font></td></tr><tr><td><font color=0099ff>-w 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否该文件拥有写权限（有则为真）</font></td></tr><tr><td><font color=0099ff>-x 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否该文件拥有执行权限（有则为真）</font></td></tr><tr><td>-u 文件</td><td>判断文件是否存在，并且是否该文件拥有SUID权限（有则为真）</td></tr><tr><td>-g 文件</td><td>判断文件是否存在，并且是否该文件拥有SGID权限（有则为真）</td></tr><tr><td>-k 文件</td><td>判断文件是否存在，并且是否该文件拥有SBit权限（有则为真）</td></tr></tbody></table></li><li><p>两个文件之间进行比较</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新（如果新则为真）</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧（如果旧则为真）</td></tr><tr><td>文件1 -et 文件2</td><td>判断文件1是否和文件2的Inode一致，可以理解为两个文件是否是同一个文件。这个判断用于硬链接是很好的方法（如果新则为真）</td></tr></tbody></table></li><li><p>两个整数之间比较</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>整数1 -eq 整数2</td><td>判断整数1是否和整数2相等（相等为真）</td></tr><tr><td>整数1 -ne 整数2</td><td>判断整数1是否和整数2不相等（不相等为真）</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1是否大于整数2（大于为真）</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2（小于为真）</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于或等于整数2（大于或等于为真）</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于或等于整数2（小于或等于为真）</td></tr></tbody></table></li><li><p>字符串之间的判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-z 字符串</td><td>判断字符串是否为空（为空返回真）</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空（非空返回真）</td></tr><tr><td>字串1 == 字串2</td><td>判断字符串1是否和字符串2相等（相等返回真）</td></tr><tr><td>字串1 ！=字串2</td><td>判断字符串1是否和字符串2不相等（不相等返回真）</td></tr></tbody></table></li><li><p>多重条件判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>判断1 -a 判断2</td><td>逻辑与，判断1和判断2都成立，返回真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或，判断1和判断2有一个成立，返回真</td></tr><tr><td>！判断</td><td>逻辑非，和原来判断结果相反</td></tr></tbody></table></li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ol><li><p>if语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line"><span class="meta">#</span><span class="bash">条件判断式两边的括号不能少，<span class="string">&quot;]&quot;</span>后是分号</span></span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">作用：判断根分区使用率是否达80以上</span></span><br><span class="line">rate=$(df -h | grep &quot;/dev/sda2&quot; | awk &#x27;&#123;print $5&#125;&#x27; | cut -d &quot;%&quot; -f 1)</span><br><span class="line">if [ $rate -ge 80 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Warning! /dev/sda2 is full!!!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>双分支if条件语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式1 ]</span><br><span class="line">then</span><br><span class="line">程序1</span><br><span class="line">else</span><br><span class="line">程序2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>举例：</p><ul><li>备份数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash/</span></span><br><span class="line">ntpdate asia.pool.ntp.org &amp;&gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash">同步系统时间</span></span><br><span class="line">date=$(date +%y%m%d)</span><br><span class="line"><span class="meta">#</span><span class="bash">把当前系统时间按照“年月日”格式赋予变量date</span></span><br><span class="line">size=$(du -sh /var/lib/musql)</span><br><span class="line"><span class="meta">#</span><span class="bash">统计mysql数据库的大小，并赋值给size变量</span></span><br><span class="line">if [ -d /tmp/dbbak ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Date : $date!&quot; &gt; /tmp/dbbak/binfo.txt</span><br><span class="line">cd /tmp/tbbak</span><br><span class="line">tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt; /dev/null</span><br><span class="line">rm -rf /tmp/dbbak/dbinfo.txt</span><br><span class="line">else</span><br><span class="line">mkdir /tmp/dbbak</span><br><span class="line">echo &quot;Date : $date!&quot; &gt; /tmp/dbbak/binfo.txt</span><br><span class="line">cd /tmp/tbbak</span><br><span class="line">tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt; /dev/null</span><br><span class="line">rm -rf /tmp/dbbak/dbinfo.txt</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>判断apche是否启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">port=$(nmap -sT 192.168.1.156 | grep tcp | grep http | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"><span class="meta">#</span><span class="bash">使用nmap命令扫描服务器，并截取apache服务的状态，赋予变量port</span></span><br><span class="line">if [ &quot;$port&quot;==&quot;open&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$(date) http is ok!&quot; &gt;&gt; /tmp/autostart-acc.log</span><br><span class="line">else</span><br><span class="line">/etc/rc.d/init.d/httpd start &amp;&gt; /dev/null</span><br><span class="line">echo &quot;$(date) restart httpd !!&quot; &gt;&gt; /tmp/autostart-err.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>多分支if条件语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式1 ]</span><br><span class="line">then</span><br><span class="line">程序语句1</span><br><span class="line">elif [ 条件判断式2 ]</span><br><span class="line">then</span><br><span class="line">程序语句2</span><br><span class="line">elif [ ... ]</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">else</span><br><span class="line">程序语句n</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>case语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case &quot;$变量名&quot; in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">如果变量的值等于值2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">......</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值，则执行此语句</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>for语句</p><p>用法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>用法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (( i=1;i&lt;=循环次数;i++ ))</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>举例：</p><ul><li>批量解压缩脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">批量解压缩脚本</span></span><br><span class="line">cd /lamp</span><br><span class="line">ls *.tar.gz &gt; ls.log</span><br><span class="line">for i in $(cat ls.log)</span><br><span class="line">do</span><br><span class="line">tar -zxf $i &amp;&gt;/dev/null</span><br><span class="line">done</span><br><span class="line">rm -rf /lamp/ls.log</span><br></pre></td></tr></table></figure><ul><li>批量添加指定数量的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">批量添加指定数量的用户</span></span><br><span class="line">read -p &quot;Please input user name:&quot; -t 30 name</span><br><span class="line">read -p &quot;Please input the number of users:&quot; -t 30 num</span><br><span class="line">read -p &quot;Please input the password of users:&quot; -t 30 pass</span><br><span class="line">if [ ! -z &quot;$name&quot; -a ! -z &quot;$num&quot; -a ! -z &quot;$pass&quot; ]</span><br><span class="line">then </span><br><span class="line">y=$(echo $num | sed &#x27;s/[0-9]//g&#x27;)</span><br><span class="line">if [ -z &quot;$y&quot; ]</span><br><span class="line">then</span><br><span class="line">for((i=1;i&lt;=$num;i++))</span><br><span class="line">do</span><br><span class="line">/usr/sbin/useradd $name$i &amp;&gt;/dev/null</span><br><span class="line">echo $pass | /usr/bin/passwd --stdin $name$i&amp;&gt;/dev/null</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>while语句</p><p>只要条件判断式成立，循环就会一直继续。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>until语句</p><p>和while循环语句相反，只要条件判断式<strong>不</strong>成立，则继续循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><h1 id="Linux服务管理"><a href="#Linux服务管理" class="headerlink" title="Linux服务管理"></a>Linux服务管理</h1><h1 id="Linux系统管理"><a href="#Linux系统管理" class="headerlink" title="Linux系统管理"></a>Linux系统管理</h1><h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><h1 id="启动管理"><a href="#启动管理" class="headerlink" title="启动管理"></a>启动管理</h1><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><h1 id="易错易混参考答案"><a href="#易错易混参考答案" class="headerlink" title="易错易混参考答案"></a>易错易混参考答案</h1><ol><li><p>$()是调用系统命令</p><p>${}用法一：包含变量，用于变量的叠加</p><p>${}用法二：用于位置参数变量当表示第 10个参数时表示为${10}</p><p>$[]里面写数值运算表达式，与$(())有同效</p></li><li><p>单引号，取消单引号中的特殊符号的特殊含义</p><p>双引号，取消双引号中的特殊符号（美元符”$”,反引号”`”,反斜线”\“ ）的特殊含义</p><p>反引号，和$()一样，是调用系统命令</p></li></ol><p>[1]:</p><p>[2]:</p><p>[3]:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;易混易错&quot;&gt;&lt;a href=&quot;#易混易错&quot; class=&quot;headerlink&quot; title=&quot;易混易错&quot;&gt;&lt;/a&gt;易混易错&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;$(),$(()),${}的区别&lt;/li&gt;
&lt;li&gt;单引号，双引号，反引号的用法区别&lt;/li&gt;
&lt;/ol&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IDEA相关配置</title>
    <link href="http://example.com/2020/10/18/IDEA%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2020/10/18/IDEA%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-10-18T05:11:00.000Z</published>
    <updated>2020-10-18T05:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA相关设置"><a href="#IDEA相关设置" class="headerlink" title="IDEA相关设置"></a>IDEA相关设置</h1><p><strong>本篇</strong></p><p>Appearance &amp;Behavior 外观和行为</p><p>Keymap 快捷键</p><p>Editor 编辑器设置</p><p>Plugins 插件</p><p>Version Control 版本控制</p><p>Build，Execution，Deployment 构建，执行，部署</p><p>Language &amp; Frameworks 语言和框架</p><p>Tools 工具集</p><h2 id="看着爽"><a href="#看着爽" class="headerlink" title="看着爽"></a>看着爽</h2><h3 id="1-字体设置"><a href="#1-字体设置" class="headerlink" title="1.字体设置"></a>1.字体设置</h3><p>File-&gt;settings-&gt;Editor-&gt;Font-&gt;</p><h3 id="2-主题设置"><a href="#2-主题设置" class="headerlink" title="2.主题设置"></a>2.主题设置</h3><p>File-&gt;settings-&gt;Apperance &amp; Behavior-&gt;Appearance-&gt;</p><h3 id="3-设置鼠标悬浮提示"><a href="#3-设置鼠标悬浮提示" class="headerlink" title="3.设置鼠标悬浮提示"></a>3.设置鼠标悬浮提示</h3><p>File-&gt;settings-&gt;Editor-&gt;Code Editing-&gt;勾选Show quick documenttation</p><h3 id="4-显示方法分割符"><a href="#4-显示方法分割符" class="headerlink" title="4.显示方法分割符"></a>4.显示方法分割符</h3><p>File-&gt;settings-&gt;Editor-&gt;General-&gt;Appearance-&gt;</p><h2 id="用着爽"><a href="#用着爽" class="headerlink" title="用着爽"></a>用着爽</h2><h3 id="1-忽略大小写-提示"><a href="#1-忽略大小写-提示" class="headerlink" title="1.忽略大小写 提示"></a>1.忽略大小写 提示</h3><p>File-&gt;settings-&gt;Editor-&gt;General-&gt;Code Completion-&gt;取消勾选 Match case</p><h3 id="2-自动导包，自动优化导包"><a href="#2-自动导包，自动优化导包" class="headerlink" title="2.自动导包，自动优化导包"></a>2.自动导包，自动优化导包</h3><p>File-&gt;settings-&gt;Editor-&gt;general-&gt;Auto Import-&gt;勾选Add unambiguous imports on the fly:快速添加导入</p><p>File-&gt;settings-&gt;Editor-&gt;general-&gt;Auto Import-&gt;勾选Optimize imports on the fly:快速优化导入（删除无用的导入包）</p><h3 id="3-IDEA统一编码文件编码"><a href="#3-IDEA统一编码文件编码" class="headerlink" title="3.IDEA统一编码文件编码"></a>3.IDEA统一编码文件编码</h3><p>当前工程编码设置</p><p>File-&gt;settings-&gt;Editor -&gt;File Encodings</p><p>Global Encoding     Project Encodings       Default encoding for properties files 全都设置UTF-8</p><p>勾选 Transpatrent native-to-ascii conversion</p><p>全局编码设置</p><p>File-&gt;New projects settings -&gt;settings for new projects-&gt;settings-&gt;editor-&gt;file encodings</p><p>把transparent native-to-ascII conversion 勾选上即可。</p><h3 id="4-Intellij-idea-用快捷键自动生成序列化id"><a href="#4-Intellij-idea-用快捷键自动生成序列化id" class="headerlink" title="4.Intellij idea 用快捷键自动生成序列化id"></a>4.Intellij idea 用快捷键自动生成序列化id</h3><p>Intellij idea用快捷键自动生成序列化id</p><p>类实现了Serializable接口之后，鼠标放在类上之后就能生成SerialVersionUID </p><p>设置：settings -&gt;Editor-&gt;inspections-&gt;serialization issues -&gt;选择图中的选项。serilizable class without ‘serialVersioinUID’</p><h2 id="好用的快捷键"><a href="#好用的快捷键" class="headerlink" title="好用的快捷键"></a>好用的快捷键</h2><ol><li><p>alt+enter 修复代码</p></li><li><p>ctrl+D 复制一行到下一行</p></li><li><p>ctrl+C ctrl+V ctrl+X 都不必用鼠标选择，直接将光标放在目标行，就能实现</p></li><li><p>ctrl+alt+L 美化代码</p></li><li><p>ctrl+alt+o 优化导包（上一部分已实现自动优化导包）</p></li><li><p>快速补全分号 ctrl+shift+enter</p></li><li><p>修改快捷键</p><p>File-&gt;settings-&gt;Keymap</p></li><li><p>建议修改的</p><p>（find in path）常用 推荐修改 alt+R</p><p>（generate）常用 推荐修改 alt+e</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1.shift+alt+ctrl加鼠标点击，进行多行同时操作</p><p>2.分屏操作</p><p>2.模板使用</p><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1np4y1y7CP?from=search&seid=209557586085212775" title="【 楠老分享 】这样设置你的IDEA，经久耐看，用的爽到飞起，java开发利器秒变AK47][1]">bilibili: 【 楠老分享 】这样设置你的IDEA，经久耐看，用的爽到飞起，java开发利器秒变AK47</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA相关设置&quot;&gt;&lt;a href=&quot;#IDEA相关设置&quot; class=&quot;headerlink&quot; title=&quot;IDEA相关设置&quot;&gt;&lt;/a&gt;IDEA相关设置&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;本篇&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Appearance &amp;amp;Beh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown 基本语句用法</title>
    <link href="http://example.com/2020/10/15/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/10/15/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-14T16:00:00.000Z</published>
    <updated>2020-10-24T12:17:31.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-基本语句用法"><a href="#Markdown-基本语句用法" class="headerlink" title="Markdown 基本语句用法"></a>Markdown 基本语句用法</h2><h5 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h5><blockquote><p>使用**&lt;u&gt;内容&lt;u&gt;**可以产生下划线效果如下    效果如下：</p><p><u>内容</u></p></blockquote><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><blockquote><p>使用**~<del>内容\</del>**可以产生删除线效果    效果如下</p><p><del>内容</del></p></blockquote><h5 id="字体和颜色"><a href="#字体和颜色" class="headerlink" title="字体和颜色"></a>字体和颜色</h5><blockquote><p> 直接上代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face&#x3D;&quot;字体名称&quot; size&#x3D;字体大小 color&#x3D;颜色编号&gt;内容&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><font color=#0099ff size=7 face="黑体">color=#0099ff size=7 face=”黑体”</font></p><p>常用字体颜色见链接<a href="https://www.cnblogs.com/Dyleaf/p/7195718.html" title="markdown 字体颜色">markdown 字体颜色</a></p><h5 id="代码-amp-代码块"><a href="#代码-amp-代码块" class="headerlink" title="代码&amp;代码块"></a>代码&amp;代码块</h5><blockquote><p>使用**`内容`**可以将内容以代码形式显示    效果如下</p><p><code>内容</code></p><p>使用```可以将内容以代码块形式显示    效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWrold</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> System.out.printf(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h5><blockquote><p>使用**内容1**或者__内容2__可以强调内容部分    效果如下</p><p><strong>内容1</strong></p><p><strong>内容2</strong></p></blockquote><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><blockquote><p>使用*内容1*或者_内容2_可以以_斜体_形式表现文字</p></blockquote><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><blockquote><p><em>~`””&gt;\等符号被赋予了特殊的含义。当我们输入这些符号的时候，为了避免误解 成他们的特殊含义。我们应该在它们前面加入 *<em>\</em></em>  以便于取消他们的特殊功能。如下：</p></blockquote><blockquote><p>当我们想要输入**内容**里面的时，避免系统自动认为是强调<strong>内容</strong>，我们应该输入<strong>\*\*内容\*\*</strong></p></blockquote><h5 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h5><blockquote><p>上标表示为&lt;sup&gt;内容&lt;/sup&gt;，如：2&lt;sup&gt;3&lt;/sup&gt;=8 效果如下：</p><p>2<sup>3</sup>=8</p><p>下标表示为&lt;sub&gt;内容&lt;/sub&gt;, 如：H&lt;sub&gt;2&lt;/sub&gt;o 效果如下:</p><p>H<sub>2</sub>o</p></blockquote><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><blockquote><p>将图片拖动到typora编辑器内即可</p><p><img src="F:\MYBlog\themes\Bufferfly\source\img\favicon.png" alt="favicon"></p></blockquote><h5 id="插入URL链接"><a href="#插入URL链接" class="headerlink" title="插入URL链接"></a>插入URL链接</h5><blockquote><p>用&lt;&gt;包裹链接即可 <strong><url></strong> 例如：&lt;www.baidu.com&gt; 效果如下：</p><p>&lt;<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a></p></blockquote><h5 id="目录列表"><a href="#目录列表" class="headerlink" title="目录列表"></a>目录列表</h5><blockquote><p>输入**[toc]** 然后回车即可自动生成目录，并且会自动更新</p></blockquote><h5 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h5><blockquote><p>使用<strong>***</strong>或者**—** 然后回车，来生成水平分割线，效果如下：</p><hr><hr></blockquote><h5 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h5><blockquote><p>第一处写[^内容]</p><p>第二处写[^内容]:注解    不要写块引用后    直接上效果</p><p>比如<a href="%E5%85%B6%E5%AE%9E%E5%B9%B6%E4%B8%8D%E6%98%AFemoj:kissing:">^随便写写 </a></p></blockquote><h5 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h5><blockquote><p>使用&gt;加空格回车即可    例如：</p></blockquote><blockquote></blockquote><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>|姓名|性别|毕业学校|工资|加回车</p><table><thead><tr><th>姓名</th><th>性别</th><th>毕业学校</th><th>工资</th></tr></thead><tbody><tr><td>zc</td><td>男</td><td>hutb</td><td>8000</td></tr><tr><td>lj</td><td>男</td><td>hutb</td><td>5000</td></tr><tr><td>tt</td><td>女</td><td>hut</td><td>7999</td></tr></tbody></table><h5 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h5><blockquote><p>使用如下的代码创建任务列表，在[]中输入x表示完成，也可以通过点击选择完成或者没完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 英语六级</span><br><span class="line">- [ ] 软考中级证书</span><br><span class="line">- [x] 个人博客网站</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><input disabled="" type="checkbox">  英语六级</p></li><li><p><input disabled="" type="checkbox">  软考中级证书</p></li><li><p><input checked="" disabled="" type="checkbox">  个人博客网站</p></li></ul><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><blockquote><p>输入+, -, *,创建无序的列表，使用任意数字开头加”**. 回车**“，其中有一个空格，创建有序列表，例如：</p></blockquote><blockquote><p>* 啊？</p><p>* 就这？</p><p>* 九折水瓶？</p></blockquote><ul><li>啊？</li><li>就这？</li><li>九折水瓶？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 第一个</span><br><span class="line">2. 第二个</span><br></pre></td></tr></table></figure><ol><li>第一个</li><li>第二个</li></ol><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.jianshu.com/p/092de536d948" title="Typora For Markdown 语法">简书：Typora For Markdown 语法</a></p><p><a href="https://zhuanlan.zhihu.com/p/67153848?utm_source=wechat_session" title="让 Markdown 写作更简单 Typora 完全使用指南">知乎：让 Markdown 写作更简单 Typora 完全使用指南</a></p><p><a href="https://www.cnblogs.com/tocy/p/markdown-footnote_link.html" title="Markdown链接及脚注">博客网：Markdown链接及脚注</a></p><p><a href="https://www.cnblogs.com/Dyleaf/p/7195718.html" title="markdown 字体颜色">博客园：markdown 字体颜色)</a></p><p><a href="https://www.cnblogs.com/Dyleaf/p/7195718.html" title="markdown 字体颜色"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Markdown-基本语句用法&quot;&gt;&lt;a href=&quot;#Markdown-基本语句用法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基本语句用法&quot;&gt;&lt;/a&gt;Markdown 基本语句用法&lt;/h2&gt;&lt;h5 id=&quot;下划线&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
