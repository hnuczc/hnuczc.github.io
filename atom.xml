<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Southblock&#39;s Blogs</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-28T10:55:34.222Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Southblock</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaSE基础</title>
    <link href="http://example.com/2020/11/23/JavaSE/"/>
    <id>http://example.com/2020/11/23/JavaSE/</id>
    <published>2020-11-23T15:15:00.000Z</published>
    <updated>2020-11-28T10:55:34.222Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="文档注释Javadoc"><a href="#文档注释Javadoc" class="headerlink" title="文档注释Javadoc"></a>文档注释Javadoc</h2><p>文档注释格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">注释内容</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> hutbzc</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>dos窗口输入命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javadoc -d myHello -author -version HelloJava.java</span><br><span class="line"><span class="comment">//输出注释文件夹名Java代码文件名</span></span><br></pre></td></tr></table></figure><blockquote><p>输出文件内含有：作者，时间，版本，所使用的构造器概要，所使用到的方法概要等等信息</p></blockquote><h2 id="Java-自动类型转换"><a href="#Java-自动类型转换" class="headerlink" title="Java 自动类型转换"></a>Java 自动类型转换</h2><blockquote><p>当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动转换为容量大的数据类型。</p><p>byte、char、short  –&gt; int  –&gt; long  –&gt; float  –&gt; double</p><p>特别的，当byte、char、short三种类型的变量做运算时，结果自动转化为int型。</p></blockquote><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">short</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">short</span> c=a+b;<span class="comment">//编译错误，a+b应为int型</span></span><br></pre></td></tr></table></figure><h2 id="equals-与"><a href="#equals-与" class="headerlink" title="equals()与=="></a>equals()与==</h2><blockquote><p>对于基本数据类型而言，==和equals()相同,都是判断值是否相等</p><p>对于引用数据类型而言，==判断的是地址值，只有是同一个对象时，才返回true</p><p>​                                            equals()判断的是值是否相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String str3=<span class="string">&quot;sdfdsf&quot;</span>;</span><br><span class="line">String str4=<span class="string">&quot;sdfdsf&quot;</span>;</span><br><span class="line">System.out.println(str3==str4);<span class="comment">//true</span></span><br><span class="line">System.out.println(str3.equals(str4));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">String str1= <span class="keyword">new</span> String(<span class="string">&quot;sdfdsf&quot;</span>);</span><br><span class="line">String str2=<span class="keyword">new</span> String(<span class="string">&quot;sdfdsf&quot;</span>);</span><br><span class="line">System.out.println(str1==str2);<span class="comment">//false</span></span><br><span class="line">System.out.println(str1.equals(str2));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="char型和String型"><a href="#char型和String型" class="headerlink" title="char型和String型"></a>char型和String型</h2><p>String不是基本数据类型，是引用数据类型中的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a=<span class="string">&#x27;&#x27;</span><span class="comment">//报错，char型单引号里面必须要放一个字符</span></span><br><span class="line">String b=<span class="string">&quot;&quot;</span><span class="comment">//编译通过</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// + 是连接符，左右两侧有一个是字符串型变量，则 + 当连接符使用</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">10</span>+<span class="string">&quot;abc&quot;</span>);<span class="comment">//输出107abc</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&#x27;*&#x27;</span>);<span class="comment">//输出93</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span>+<span class="string">&#x27;\t&#x27;</span>+<span class="string">&quot;*&quot;</span>);<span class="comment">//输出51*</span></span><br><span class="line">System.out.println(<span class="string">&#x27;*&#x27;</span>+(<span class="string">&#x27;\t&#x27;</span>+<span class="string">&quot;*&quot;</span>));<span class="comment">//输出**</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>%取模运算 </p><p>结果符号与被模数符号相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;12%5=&quot;</span> + (<span class="number">12</span>%<span class="number">5</span>) );<span class="comment">//结果为 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;-12%5=&quot;</span> + (-<span class="number">12</span>%<span class="number">5</span>) );<span class="comment">//结果为 -2</span></span><br><span class="line">System.out.println(<span class="string">&quot;12%-5=&quot;</span> + (<span class="number">12</span>%-<span class="number">5</span>) );<span class="comment">//结果为 2</span></span><br><span class="line">System.out.println(<span class="string">&quot;-12%-5=&quot;</span> + (-<span class="number">12</span>%-<span class="number">5</span>) );<span class="comment">//结果为 -2</span></span><br></pre></td></tr></table></figure><p>++自增与--自减</p><p>自增或自减不会自动转化数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a=<span class="number">10</span>;</span><br><span class="line">a++;<span class="comment">//编译成功</span></span><br><span class="line"><span class="comment">//a=a+1;//编译报错：Type mismatch: cannot convert from int to short</span></span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure><p>+=，-=，*=，/=等等也不会自动转化数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a=<span class="number">1</span>;</span><br><span class="line">a +=<span class="number">2</span><span class="comment">//编译成功</span></span><br><span class="line">a =a+<span class="number">2</span><span class="comment">//编译报错：ype mismatch: cannot convert from int to short</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">short</span> b=<span class="number">19</span></span><br><span class="line">b = b*<span class="number">0.1</span><span class="comment">//编译报错，Type mismatch: cannot convert from double to short</span></span><br><span class="line">b *=<span class="number">0.1</span>;<span class="comment">//*=不会改变数据类型，因此编译不会报错</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出结果为1</span></span><br></pre></td></tr></table></figure><p>比较运算符==和赋值运算符</p><blockquote><p>==返回结果是boolean类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">20</span>;</span><br><span class="line">System.out.println(i==j);<span class="comment">//输出结果是false</span></span><br><span class="line">System.out.println(i=j);<span class="comment">//输出结果是20 先给i赋值，再输出i</span></span><br></pre></td></tr></table></figure></blockquote><p>逻辑连接符&amp;和&amp;&amp;</p><blockquote><p>逻辑与&amp;和短路与&amp;&amp;</p><p>开发中推荐使用短路与&amp;&amp;和短路或||</p><p>区别：</p><p>​    逻辑连接符左侧条件成立时，逻辑与&amp;和短路与&amp;&amp;一样</p><p>​    逻辑连接符左侧条件不成立时，逻辑与&amp;两侧的表达式都会执行，</p><p>​                                                            短路与&amp;&amp;右侧的表达式不会执行（类似于电路中的短路）</p><p>逻辑或|和短路或||的区别类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i=j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">boolean</span> b=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (b&amp;(i++&gt;<span class="number">0</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;逻辑与条件成立&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;逻辑与条件不成立&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;i= &quot;</span>+i);<span class="comment">//输出结果为2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b&amp;&amp;(j++&gt;<span class="number">0</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;短路与条件成立&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;短路与条件不成立&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;j= &quot;</span>+j);<span class="comment">//输出结果为1</span></span><br></pre></td></tr></table></figure></blockquote><p>两变量互换的方式：</p><ol><li><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//推荐使用</span></span><br><span class="line"><span class="keyword">int</span> a1=<span class="number">1</span>,b1=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">tmp=a1;</span><br><span class="line">a1=b1;</span><br><span class="line">b1=a1;</span><br><span class="line">System.out.println(<span class="string">&quot;a1=&quot;</span>+a1+<span class="string">&quot;\nb=&quot;</span>+b1);</span><br></pre></td></tr></table></figure></li><li><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a2=<span class="number">1</span>,b2=<span class="number">2</span>;<span class="comment">//优点：节省空间，弊端：可能会溢出，只能适用于数值类型</span></span><br><span class="line">a2=a2+b2;</span><br><span class="line">b2=a2-b2;</span><br><span class="line">a2=a2-b2;</span><br></pre></td></tr></table></figure></li><li><p>方式三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a3=<span class="number">1</span>,b3=<span class="number">2</span>;<span class="comment">//优点：节省空间，弊端：只能适用于数值类型</span></span><br><span class="line">a3=a3^b3;</span><br><span class="line">b3=a3^b3;<span class="comment">//a^b^b=a</span></span><br><span class="line">a3=a3^b3;</span><br></pre></td></tr></table></figure></li></ol><p>三元运算符：(条件表达式)?表达式1:表达式2</p><blockquote><p>可以被if-else语句替换，但是三元运算符代码简洁，执行效率高。</p></blockquote><p>比较运算符</p><blockquote><p>&gt; &lt; &gt;= &lt;= 只能用于数值类型</p><p>==不仅仅用于数值类型</p><p>==比较的是地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">count a = <span class="keyword">new</span> count(<span class="number">100</span>);</span><br><span class="line">count b = <span class="keyword">new</span> count(<span class="number">100</span>);</span><br><span class="line">System.out.println(a==b);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">String i=<span class="string">&quot;sdfsd&quot;</span>;</span><br><span class="line">String j=<span class="string">&quot;sdfsd&quot;</span>;</span><br><span class="line">System.out.println(i==j);<span class="comment">//true</span></span><br></pre></td></tr></table></figure></blockquote><p>instanceof</p><blockquote><p> 判断对象是否是类的实例化对象</p></blockquote><p>Scanner输入</p><blockquote><p>第一步：导包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><p>第二步：实例化Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>第三步：调用Scanner类的相关方法，来获取指定的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;请输入你的姓名：&quot;</span>);</span><br><span class="line">String name = sc.next();<span class="comment">//字符和字符串型变量都用next()获取</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的芳龄：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> age = sc.nextInt();<span class="comment">//int型变量用nextInt()获取</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入体重：&quot;</span>);</span><br><span class="line"><span class="keyword">double</span> weight = sc.nextDouble();<span class="comment">//double型变量用nextDouble()获取</span></span><br><span class="line">System.out.println(<span class="string">&quot;是女生吗？请输入true/false&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> isLoveMe = sc.nextBoolean();<span class="comment">//boolean型变量用nextBoolean()获取</span></span><br><span class="line">System.out.println(name+<span class="string">&quot;今年&quot;</span>+age+<span class="string">&quot;，体重&quot;</span>+weight+(isLoveMe?<span class="string">&quot;,爱上了我&quot;</span>:<span class="string">&quot;,没有爱上我&quot;</span>));</span><br></pre></td></tr></table></figure></blockquote><p>switch语句</p><blockquote><p>相比于if-else，switch-case的执行效率高，能用switch-case（case情况不多）则用switch-case。</p><p>switch中的表达式，只能是如下六种数据类型之一：<strong>byte、short、char、int、String(jdk7.0新增)、枚举(jdk5.0新增)</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">执行语句<span class="number">1</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">执行语句<span class="number">2</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">【执行语句n】</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组初始化默认值：</p><p>​    数组元素是整型：0</p><p>​    数组元素是浮点型：0.0</p><p>​    数组元素是char型：0或’\u0000’</p><p>​    数组元素是boolean型：false</p><p>​    <strong>引用数据类型：null</strong></p></blockquote><blockquote><p>引用型数据类型的数组中存放的是null（初始化时）或者地址值（指向常量池中的数据）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> [] a = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="number">3</span>];</span><br><span class="line">System.out.println(a[<span class="number">1</span>]);<span class="comment">//输出结果为：&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> b=<span class="string">&#x27;\u0000&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">&#x27;0&#x27;</span>;<span class="comment">//char型变量与数字0比较需要先转化成对应的ASCII编码值</span></span><br><span class="line">System.out.println(b==<span class="number">0</span>);<span class="comment">//输出结果为：true</span></span><br><span class="line">System.out.println(c==<span class="number">0</span>);<span class="comment">//输出结果为：false</span></span><br><span class="line">System.out.println(c==<span class="number">48</span>);<span class="comment">//输出结果为：true</span></span><br><span class="line"></span><br><span class="line">String [] d = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">System.out.println(a[<span class="number">1</span>]);<span class="comment">//输出结果为：&#x27; &#x27;</span></span><br><span class="line">System.out.println(d[<span class="number">1</span>]);<span class="comment">//输出结果为：null</span></span><br></pre></td></tr></table></figure><p>二维数组</p><p>数组初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态初始化，【】内表示可写可不写</span></span><br><span class="line"><span class="keyword">int</span>[][] str1 = 【<span class="keyword">new</span> <span class="keyword">int</span>[][]】&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] str2 = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//①</span></span><br><span class="line"><span class="keyword">int</span>[][] str3 = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">3</span>][];<span class="comment">//②</span></span><br><span class="line"></span><br><span class="line">System.out.println(str3[<span class="number">0</span>]);<span class="comment">//null</span></span><br><span class="line">System.out.println(str3[<span class="number">0</span>][<span class="number">0</span>]);<span class="comment">//java.lang.NullPointerException</span></span><br></pre></td></tr></table></figure><blockquote><p>当用第一种动态初始化时，数组元素会有默认值</p><p>当用第二种动态初始化时 ，但未赋值时，不能使用，否则报空指针异常 java.lang.NullPointerException</p></blockquote><h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><ol><li><p>对匿名对象的理解</p><p>我们创建的对象，没有显示赋给一个变量名</p></li><li><p>特征</p><p>匿名对象只能用一次</p></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//匿名对象直接调用方法</span></span><br><span class="line"><span class="keyword">new</span> Student().study();<span class="comment">//输出今天又学了十个小时</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//每次new的都不是同一个对象</span></span><br><span class="line"><span class="keyword">new</span> Student().id=<span class="number">121</span>;</span><br><span class="line">System.out.println(<span class="keyword">new</span> Student().id);<span class="comment">//输出0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 实际上匿名对象的使用形式：</span></span><br><span class="line"><span class="comment"> * 匿名对象的地址传给了形参，因此在调用的方法中可以多次使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">School school = <span class="keyword">new</span> School();<span class="comment">//输出今天又学了十个小时 </span></span><br><span class="line">school.showStudent(<span class="keyword">new</span> Student());<span class="comment">//输出今天又睡了八个小时</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今天又学了十个小时&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;今天又睡了八个小时&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showStudent</span><span class="params">(Student s)</span></span>&#123;</span><br><span class="line">s.study();</span><br><span class="line">s.sleep();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="方法的形参的传递机制"><a href="#方法的形参的传递机制" class="headerlink" title="方法的形参的传递机制"></a>方法的形参的传递机制</h2><p><strong>值传递机制</strong></p><blockquote><p>如果参数是基本数据类型，此时实参赋给形参的是实参真实存在存储的值</p><p>如果参数是引用数据类型，此时实参赋给形参的是实参所保存的数据的地址值</p></blockquote><h2 id="可变个数形参"><a href="#可变个数形参" class="headerlink" title="可变个数形参"></a>可变个数形参</h2><ol><li>jdk5.0新增内容</li><li>具体使用：<ol><li>可变个数形参的形式：数据类型…变量名</li><li>当调用可变个数形参时，参数参数个数可以是0，1，2，……</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载，并且会优先调用匹配度最高的方法（参数个数、类型都满足非可变个数形参的方法1时，优先调用方法1）</li><li>可变个数形参与参数写成数组都可以传0，1，2，……个参数，两者等价，但是两者只能写一个</li><li>可变个数形参在方法的形参中，必须声明在末尾</li><li>在方法的形参中，最多只能声明一个可变个数形参</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;当参数只有一个且类型为int型时，优先调用此方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> i)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;方法2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> ... i)</span> </span>&#123;<span class="comment">//可传0，1，……个int型参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;方法3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//public void show(String ... str) &#123;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; str.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(str[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String str[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">System.out.println(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性赋值的先后顺序"><a href="#属性赋值的先后顺序" class="headerlink" title="属性赋值的先后顺序"></a>属性赋值的先后顺序</h2><ol><li><p>属性赋值的方法：</p><ol><li>默认初始化值</li><li>显示初始化</li><li>构造器中赋值</li><li>通过对象.属性或者对象.方法赋值</li></ol></li><li><p>各种方法的先后顺序</p><p>①–&gt;②–&gt;③–&gt;④</p></li><li><p>举例</p><p>User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"><span class="comment">//private String name;//①默认初始化时</span></span><br><span class="line"><span class="keyword">private</span> String name=<span class="string">&quot;Lihua&quot;</span>;<span class="comment">//②显示初始化时</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User user1 = <span class="keyword">new</span> User();</span><br><span class="line">User user2 = <span class="keyword">new</span> User(<span class="string">&quot;Liming&quot;</span>);<span class="comment">//③构造器中赋值</span></span><br><span class="line">System.out.println(user1.getName());<span class="comment">//Lihua</span></span><br><span class="line">System.out.println(user2.getName());<span class="comment">//Liming</span></span><br><span class="line">user2.setName(<span class="string">&quot;Liqiang&quot;</span>);<span class="comment">//④通过对象.方法赋值</span></span><br><span class="line">System.out.println(user2.getName());<span class="comment">//Liqiang</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><blockquote><p>JavaBean是一种Java语言写成的可重用组件</p></blockquote><blockquote><p>JavaBean有三点要求：</p><ol><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有相应的get、set方法 </li></ol></blockquote><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ol><li>this可以用来修饰、调用：属性、方法、构造器</li><li>this可以理解成当前对象（接属性&lt;用以区别成员变量与同名的形参&gt;、方法）或当前正在创建的对象（接构造器），<strong>使用此方法可以减少代码冗余。</strong></li><li>this调用构造器<ol><li>在类的构造器中，可以显示使用”this(形参列表)“来调用本类中指定的<strong>其他的</strong>构造器。（不能形成死循环）</li><li>this(形参列表)必须放在当前构造器的第一行</li><li>一个构造器最多只能调用一个别的构造器</li></ol></li></ol><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ol><li>我们可以在子类的构造器中显示的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li><li>“super(形参列表)”的使用，必须声明在子类构造器的首行</li><li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二选一，不能同时出现</li><li>在构造器的首行，没有显示的声明”this(形参列表)”或”super(形参列表)”，则默认使用父类的空参的构造器</li><li>在类的多个构造器中，至少有一个类的构造器中使用了”super(形参列表)”，调用父类的构造器。</li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote><p>同一个包下，不能命名同名的接口、类</p><p>不同包下，可以命名同名的接口、类</p></blockquote><blockquote><p>import xxx.* 可以导入xxx下的所有结构，但是xxx下的别的包中结构不能导入（如xxx.yyy.*）</p><p>如果要使用不同包中两个同名的类或接口，那么必须至少有一个类需要以全类名的方式显示。</p><p>import static 接口名/类名 导入指定接口或类中的静态结构（属性或方法）</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>一旦子类A继承了父类B之后，子类A就获取了父类B声明的<strong>所有的属性和方法</strong></p><p>特别的，父类中声明为private的属性或方法，子类继承了父类后，仍然认为<strong>获取了父类中私有的结构</strong></p><p>只是因为封装性的影响，使得子类不能直接调用父类的结构而已。</p></blockquote><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>方法重写的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法的声明：权限修饰符 返回值类型 方法名(形参列表) <span class="keyword">throws</span> 异常的类型&#123;</span><br><span class="line">方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</li><li>子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符<ol><li>特殊情况：子类不能重写父类中声明为private权限的方法。</li></ol></li><li>返回值类型<ol><li>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</li><li>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</li><li>父类被重写的方法的返回值类型是基本数据类型，则子类重写的方法的返回值类型必须是相同的基本数据类型</li></ol></li><li>抛出的异常<ol><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li></ol></li><li>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的（不是重写）</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>对象的多态性：父类的引用指向子类的对象</p><p>多态的使用：虚拟方法调用</p><p>​    有了对象的多态性后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类 重写的父类的方法</p><p>多态性的使用前提：①类的继承关系 ②方法的重写</p><p>对象的多态性，只适用于方法，不适用于属性。属性编译和运行都是父类的属性。</p></blockquote><h2 id="编程练习题"><a href="#编程练习题" class="headerlink" title="编程练习题"></a>编程练习题</h2><ol><li><p>如何将一个十进制数转化成十六进制数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将int型整数转化成16进制数字符串</span></span><br><span class="line"><span class="keyword">int</span> i = x &amp; <span class="number">15</span>;<span class="comment">//将二进制形式x的最后四位取出赋值给i（十进制）</span></span><br><span class="line">String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (x==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>( x != <span class="number">0</span> ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将取出的数转化成16进制后添加到之前取出的数前方</span></span><br><span class="line">str = ((i&gt;<span class="number">9</span>)?(<span class="keyword">char</span>)(i-<span class="number">10</span>+<span class="string">&#x27;a&#x27;</span>)+<span class="string">&quot;&quot;</span>:i+<span class="string">&quot;&quot;</span>) + str;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x无符号右移四位</span></span><br><span class="line">x = x &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//将右移后，最后一位重新赋值给i</span></span><br><span class="line">i = x &amp; <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>从键盘上输入year年的mouth和day，要求输出输入的日期是当年的第几天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入year：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入mouth：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> mouth = sc.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入day：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> day = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> sumDays=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(mouth)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">sumDays += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">int</span> febDays=((year %<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year %<span class="number">100</span>!=<span class="number">0</span>)||(year %<span class="number">400</span> ==<span class="number">0</span>))?<span class="number">29</span>:<span class="number">28</span>;</span><br><span class="line">sumDays += febDays;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">sumDays += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">sumDays += day;</span><br><span class="line">&#125;</span><br><span class="line">sc.close();</span><br><span class="line">System.out.println(<span class="string">&quot;2020的&quot;</span>+mouth+<span class="string">&quot;月&quot;</span>+day+<span class="string">&quot;日是2020的第&quot;</span>+sumDays+<span class="string">&quot;天&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>求100000内的质数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*long start = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">int count=0;</span></span><br><span class="line"><span class="comment">boolean flag=true;</span></span><br><span class="line"><span class="comment">for (int i = 2; i &lt; 100000 ; i++) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//for (int j = 2; j &lt;= i ; j++) &#123;</span></span><br><span class="line"><span class="comment">for (int j = 2; j &lt;= Math.sqrt(i) ; j++) &#123;//优化二</span></span><br><span class="line"><span class="comment">if (i%j==0) &#123;</span></span><br><span class="line"><span class="comment">flag=false;</span></span><br><span class="line"><span class="comment">break;//优化一：加上break;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if (flag) &#123;</span></span><br><span class="line"><span class="comment">count++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">flag=true;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">long end = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">System.out.println(&quot;质数个数为&quot;+count);</span></span><br><span class="line"><span class="comment">System.out.println(&quot;所花费的时间为：&quot; + (end-start));//14808,1741,27,23</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//优化四：</span></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">label:<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100000</span> ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= Math.sqrt(i) ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % j==<span class="number">0</span>) &#123;</span><br><span class="line">                  </span><br><span class="line">        <span class="comment">//注意区分此处的continue 标签与break的区别</span></span><br><span class="line"><span class="keyword">continue</span> label;<span class="comment">//此处不能换成break;语句，否则count++每次必执行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;质数个数为&quot;</span>+count);</span><br><span class="line">System.out.println(<span class="string">&quot;所花费的时间为：&quot;</span> + (end-start));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;文档注释Javadoc&quot;&gt;&lt;a href=&quot;#文档注释Javadoc&quot; class=&quot;headerlink&quot; title=&quot;文档注释Javadoc&quot;&gt;&lt;/a&gt;文档注释Javadoc&lt;/h2&gt;&lt;p&gt;文档注释格式：&lt;/p&gt;
&lt;figure class=&quot;hi</summary>
      
    
    
    
    
    <category term="JavaSE" scheme="http://example.com/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>CMD常用命令</title>
    <link href="http://example.com/2020/11/23/%E5%B8%B8%E7%94%A8CMD%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2020/11/23/%E5%B8%B8%E7%94%A8CMD%E5%91%BD%E4%BB%A4/</id>
    <published>2020-11-23T04:48:00.000Z</published>
    <updated>2020-11-26T04:02:44.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打开CMD的几种方式"><a href="#打开CMD的几种方式" class="headerlink" title="打开CMD的几种方式"></a>打开CMD的几种方式</h1><ol><li>开始 -&gt; 系统 -&gt; 命令提示符</li><li>Win键+R -&gt; 输入cmd 打开终端</li><li>在任意的文件夹下面，按下shift键+鼠标右击 -&gt; 在此处打开 Powershell 窗口</li><li>资源管理器的地址栏最前面加上cmd 路径（cmd后需空格）</li><li>若需要以管理员身份运行，在第1，2方式后右击，选择以管理员身份运行</li></ol><h1 id="常用的DOS命令"><a href="#常用的DOS命令" class="headerlink" title="常用的DOS命令"></a>常用的DOS命令</h1><ol><li><p>切换目录（change directory）</p><p>切换到硬盘根目录下：盘符加冒号 <strong>:</strong> 如 <strong>F:</strong></p><p>同硬盘中切换目录：cd 路径名</p><p>跨硬盘切换目录：cd /d 盘符:\路径名</p><p>返回上一级目录：cd ..</p><p>直接返回当前目录的根目录：cd/</p></li><li><p>查看当前目录下的所有文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure></li><li><p>清理屏幕（clean screen）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure></li><li><p>退出电脑终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li><p>查看电脑ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure></li><li><p>打开应用</p><ul><li><p>打开计算器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calc</span><br></pre></td></tr></table></figure></li><li><p>打开画图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mspaint</span><br></pre></td></tr></table></figure></li><li><p>打开记事本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ping 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹（make directory）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md 文件名</span><br></pre></td></tr></table></figure></li><li><p>创建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>&gt;a.txt</span><br></pre></td></tr></table></figure></li><li><p>删除空目录（remove directotry）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rd 文件名</span><br><span class="line"><span class="comment">#如果文件夹内由文件，需要先删除文件再删除目录</span></span><br><span class="line"><span class="comment">#方式一：</span></span><br><span class="line"><span class="comment">#先cd 进入文件夹，再del 删除所有文件</span></span><br><span class="line"><span class="comment">#方式二：</span></span><br><span class="line"><span class="comment">#del 文件名 再del删除目录</span></span><br></pre></td></tr></table></figure></li><li><p>删除文件（delete）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del 文件名</span><br></pre></td></tr></table></figure></li><li><p>复制粘贴</p><p>粘贴：鼠标右击</p><p>复制：选中后右击</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;打开CMD的几种方式&quot;&gt;&lt;a href=&quot;#打开CMD的几种方式&quot; class=&quot;headerlink&quot; title=&quot;打开CMD的几种方式&quot;&gt;&lt;/a&gt;打开CMD的几种方式&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;开始 -&amp;gt; 系统 -&amp;gt; 命令提示符&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="狂神说" scheme="http://example.com/tags/%E7%8B%82%E7%A5%9E%E8%AF%B4/"/>
    
    <category term="CMD" scheme="http://example.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础知识</title>
    <link href="http://example.com/2020/11/18/MySQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2020/11/18/MySQL%E5%9F%BA%E7%A1%80/</id>
    <published>2020-11-18T01:19:00.000Z</published>
    <updated>2020-11-26T04:57:16.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库的好处"><a href="#数据库的好处" class="headerlink" title="数据库的好处"></a>数据库的好处</h1><p>​    1.持久化数据到本地<br>​    2.可以实现结构化查询，方便管理<br>​    </p><h1 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h1><p>​    1、DB：数据库，保存一组有组织的数据的容器<br>​    2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>​    3、SQL:结构化查询语言，用于和DBMS通信的语言</p><h1 id="数据库存储数据的特点"><a href="#数据库存储数据的特点" class="headerlink" title="数据库存储数据的特点"></a>数据库存储数据的特点</h1><p>​    1、将数据放到表中，表再放到库中<br>​    2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>​    3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>​    4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>​    5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><h1 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h1><h2 id="MySQL产品的介绍和安装"><a href="#MySQL产品的介绍和安装" class="headerlink" title="MySQL产品的介绍和安装"></a>MySQL产品的介绍和安装</h2><h2 id="MySQL服务的启动和停止"><a href="#MySQL服务的启动和停止" class="headerlink" title="MySQL服务的启动和停止"></a>MySQL服务的启动和停止</h2><p>​    方式一：计算机——右击管理——服务<br>​    方式二：通过管理员身份运行<br>​    net start 服务名（启动服务）<br>​    net stop 服务名（停止服务）</p><h2 id="MySQL服务的登录和退出"><a href="#MySQL服务的登录和退出" class="headerlink" title="MySQL服务的登录和退出"></a>MySQL服务的登录和退出</h2><p>方式一：通过mysql自带的客户端<br>只限于root用户</p><p>方式二：通过windows自带的客户端<br>登录：<br>mysql 【-h主机名 -P端口号 】-u用户名 -p密码</p><p>退出：<br>exit或ctrl+C</p><h2 id="MySQL的常见命令"><a href="#MySQL的常见命令" class="headerlink" title="MySQL的常见命令"></a>MySQL的常见命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">show databases；  #查看所有的数据库</span><br><span class="line">use 库名； #打开指定的库</span><br><span class="line">show tables ;   #显示库中的所有表</span><br><span class="line">show tables from  #库名;显示指定库中的所有表</span><br><span class="line">create table 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">字段名 字段类型</span><br><span class="line">);   #创建表</span><br><span class="line"></span><br><span class="line">desc 表名; #查看指定表的结构</span><br><span class="line">select * from 表名;  #显示表中的所有数据</span><br><span class="line"></span><br><span class="line">#7.查看服务器的版本</span><br><span class="line">#方式一：登录到mysql服务端</span><br><span class="line">select version();</span><br><span class="line">#方式二：没有登录到mysql服务端</span><br><span class="line">mysql --version</span><br><span class="line">#或</span><br><span class="line">mysql --V</span><br></pre></td></tr></table></figure><h2 id="MySQL的语法规范"><a href="#MySQL的语法规范" class="headerlink" title="MySQL的语法规范"></a>MySQL的语法规范</h2><p>​    1.不区分大小写,但建议关键字大写，表名、列名小写<br>​    2.每条命令最好用分号结尾<br>​    3.每条命令根据需要，可以进行缩进 或换行<br>​    4.注释<br>​        单行注释：#注释文字<br>​        单行注释：– 注释文字<br>​        多行注释：/* 注释文字  */</p><h2 id="SQL的语言分类"><a href="#SQL的语言分类" class="headerlink" title="SQL的语言分类"></a>SQL的语言分类</h2><p>​    DQL（Data Query Language）：数据查询语言<br>​        select<br>​    DML（Data Manipulate Language）：数据操作语言<br>​        insert 、update、delete<br>​    DDL（Data Define Languge）：数据定义语言<br>​        create、drop、alter<br>​    TCL（Transaction Control Language）：事务控制语言<br>​        commit、rollback<br>​    </p><h1 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><p>语法：<br>SELECT 要查询的东西<br>【FROM 表名】;</p><p>类似于Java中 :System.out.println(要打印的东西);<br>特点：<br>①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在<br>② 要查询的东西可以是常量值、可以是表达式、可以是字段、可以是函数</p><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><p>条件查询：根据条件过滤原始表的数据，查询到想要的数据<br>语法：<br>select<br>    要查询的字段|表达式|常量值|函数<br>from<br>​    表<br>where<br>​    条件 ;</p><p>分类：<br>一、条件表达式<br>    示例：salary&gt;10000<br>    条件运算符：</p><p>&gt; &lt; &gt;= &lt;= = != &lt;&gt; &lt;=&gt;</p><p>二、逻辑表达式<br>示例：salary&gt;10000 &amp;&amp; salary&lt;20000</p><p>逻辑运算符：</p><p>and（&amp;&amp;）:两个条件如果同时成立，结果为true，否则为false<br>or(||)：两个条件只要有一个成立，结果为true，否则为false<br>not(!)：如果条件成立，则not后为false，否则为true</p><p>三、模糊查询</p><p>like:一般搭配通配符使用，可以判断字符型或数值型<br>通配符：%任意多个字符，_任意单个字符</p><p>between and<br>in()<br>is null /is not null：用于判断null值</p><p>is null VS &lt;=&gt;</p><table><thead><tr><th>表达方式</th><th>普通类型的数值</th><th>null值</th><th>可读性</th></tr></thead><tbody><tr><td>isnull</td><td>x</td><td>v</td><td>v</td></tr><tr><td>&lt;=&gt;</td><td>v</td><td>v</td><td>x</td></tr></tbody></table><p>示例：last_name like ‘a%’</p><p>job_id in(‘AD_VP’,’FI_MGR’)</p><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><p>语法：<br>select<br>    要查询的东西<br>from<br>    表<br>where<br>    条件</p><p>order by 排序的字段|表达式|函数|别名 【asc|desc】</p><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="一、单行函数"><a href="#一、单行函数" class="headerlink" title="一、单行函数"></a>一、单行函数</h3><p>1、字符函数</p><blockquote><p>CONCAT(str1,str2,…)拼接<br>SUBSTR(str,pos)截取子串</p><p>SUBSTR(str,pos,len)截取子串(其中pos为开始字符的索引，从1开始，同上)<br>UPPER(str)转换成大写<br>LOWER(str)转换成小写</p><p>TRIM([remstr FROM] str)去前后指定的空格或字符<br>LTRIM(str)去左边空格<br>RTRIM(str)去右边空格<br>REPLACE(str,from_str,to_str)替换<br>LPAD(str,len,padstr)左填充<br>RPAD(str,len,padstr)右填充<br>INSTR(str,substr)返回子串第一次出现的索引<br>LENGTH(str)获取字节个数，一个汉字占2或3个字节（mysql5.7.2中是3个字节）</p></blockquote><p>2、数学函数</p><blockquote><p>ROUND(X)四舍五入<br>RAND()随机数<br>FLOOR(X)向下取整<br>CEIL(X)向上取整<br>MOD(N,M)取余，N/M的余数<br>TRUNCATE(X,D)截断 将X保留小数点后D位</p></blockquote><p>3、日期函数</p><blockquote><p>NOW();当前系统日期+时间<br>CURDATE()当前系统日期<br>CURTIME()当前系统时间<br>STR_TO_DATE(str,format)将字符转换成日期<br>DATE_FORMAT(date,format)将日期转换成字符</p><p>例如：SELECT DATE_FORMAT(NOW(),’%Y-%m-%d %h:%c:%s’); 格式控制符表示年月日时分秒</p></blockquote><p>4、流程控制函数</p><blockquote><p>IF(expr1,expr2,expr3)处理双分支，参数分别表示条件、if成立时的值、不成立时的值<br>case语句 处理多分支<br>情况1：处理等值判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 变量或表达式或字段</span><br><span class="line">when 常量1 then 值1</span><br><span class="line">when 常量2 then 值2</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>情况2：处理条件判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case </span><br><span class="line">when 条件1 then 值1</span><br><span class="line">when 条件2 then 值2</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line">end</span><br></pre></td></tr></table></figure></blockquote><p>5、其他函数</p><blockquote><p>VERSION()版本<br>DATABASE()当前库<br>USER()当前连接用户</p></blockquote><p>​    </p><h3 id="二、分组函数"><a href="#二、分组函数" class="headerlink" title="二、分组函数"></a>二、分组函数</h3><p>SUM(expr)求和<br>MAX(expr)最大值<br>MIN(expr)最小值<br>AVG([DISTINCT] expr)平均值<br>COUNT(expr)计数</p><p>特点：<br>    1、以上五个分组函数都忽略null值，除了count(*)<br>    2、sum和avg一般用于处理数值型<br>        max、min、count可以处理任何数据类型<br>    3、都可以搭配distinct使用，用于统计去重后的结果<br>    4、count的参数可以支持：<br>        字段、*、常量值，一般放1</p><p>​       建议使用 count(*)</p><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>语法：<br>​select 查询的字段，分组函数<br>​from 表<br>​group by 分组的字段</p><p>特点：<br>1、可以按单个字段分组<br>2、和分组函数一同查询的字段最好是分组后的字段<br>3、分组筛选</p><table><thead><tr><th></th><th>针对的表</th><th>位置</th><th>关键字</th></tr></thead><tbody><tr><td>分组前筛选：</td><td>原始表</td><td>group by的前面</td><td>where</td></tr><tr><td>分组后筛选：</td><td>分组后的结果集</td><td>group by的后面</td><td>having</td></tr></tbody></table><p>4、可以按多个字段分组，字段之间用逗号隔开<br>5、可以支持排序<br>6、having后可以支持别名</p><h2 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h2><p>笛卡尔乘积：如果连接条件省略或无效则会出现<br>解决办法：添加上连接条件</p><p>一、多表连接查询</p><blockquote><p>1.等值连接的结果 = 多个表的交集<br>2.n表连接，至少需要n-1个连接条件<br>3.多个表不分主次，没有顺序要求<br>4.一般为表起别名，提高阅读性和性能</p></blockquote><p>二、sql92：</p><blockquote><p>含义：1992年推出的sql语法<br>支持：</p><p>​        等值<br>​        非等值<br>​        自连接<br>​        也支持一部分外连接（用于oracle或sqlserver等，mysql不支持）</p></blockquote><p>二、sql99语法：通过join关键字实现连接</p><blockquote><p>含义：1999年推出的sql语法<br>支持：<br>等值连接、非等值连接 （内连接）<br>外连接<br>交叉连接</p><p>语法：</p><p>select 字段，…<br>from 表1<br>【inner|left outer|right outer|cross】join 表2 on  连接条件<br>【inner|left outer|right outer|cross】join 表3 on  连接条件<br>【where 筛选条件】<br>【group by 分组字段】<br>【having 分组后的筛选条件】<br>【order by 排序的字段或表达式】</p><p>好处：语句上，连接条件和筛选条件实现了分离，简洁明了！</p></blockquote><p>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><pre><code>SELECT e.last_name,m.last_nameFROM employees eJOIN employees m ON e.`manager_id`=m.`employee_id`;</code></pre><p>sql92</p><pre><code>SELECT e.last_name,m.last_nameFROM employees e,employees m WHERE e.`manager_id`=m.`employee_id`;</code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>含义：</p><blockquote><p>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<br>在外面的查询语句，称为主查询或外查询</p></blockquote><p>分类：</p><blockquote><p>1、按出现位置<br>select后面：<br>        仅仅支持标量子查询<br>from后面：<br>        表子查询<br>where或having后面：<br>        标量子查询<br>        列子查询<br>        行子查询<br>exists后面：<br>        标量子查询<br>        列子查询<br>        行子查询<br>        表子查询</p></blockquote><blockquote><p>2、按结果集的行列<br>标量子查询（单行子查询）：结果集为一行一列<br>列子查询（多行子查询）：结果集为多行一列<br>行子查询：结果集为一行多列<br>表子查询：结果集为多行多列</p></blockquote><p>特点：</p><blockquote><p>1、子查询都放在小括号内<br>2、子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧<br>3、子查询优先于主查询执行，主查询使用了子查询的执行结果<br>4、子查询根据查询结果的行数不同分为以下两类：<br>① 单行子查询<br>    结果集只有一行<br>    一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=<br>    非法使用子查询的情况：<br>    a、子查询的结果为一组值<br>    b、子查询的结果为空<br>② 多行子查询<br>    结果集有多行<br>    一般搭配多行操作符使用：any、all、in、not in<br>    in： 属于子查询结果中的任意一个就行<br>    any和all往往可以用其他查询代替</p></blockquote><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>应用场景：</p><blockquote><p> 实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select 字段|表达式,...</span><br><span class="line">from 表</span><br><span class="line">【where 条件】</span><br><span class="line">【group by 分组字段】</span><br><span class="line">【having 条件】</span><br><span class="line">【order by 排序的字段】</span><br><span class="line">limit 【起始的条目索引，】条目数;</span><br></pre></td></tr></table></figure><p>特点：</p><blockquote><p>1.起始条目索引从0开始</p><p>2.limit子句放在查询语句的最后</p><p>3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage<br>假如:<br>每页显示条目数sizePerPage<br>要显示的页数 page</p></blockquote><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><p>引入：<br>    union 联合、合并</p><p>语法：</p><pre><code>select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】.....select 字段|常量|表达式|函数 【from 表】 【where 条件】</code></pre><p>特点：</p><blockquote><p>1、多条查询语句的查询的列数必须是一致的<br>2、多条查询语句的查询的列的类型几乎相同<br>3、union代表去重，union all代表不去重</p></blockquote><h1 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>语法：<br>    insert into 表名(字段名，…)<br>    values(值1，…);</p><p>特点：</p><blockquote><p>1、字段类型和值类型一致或兼容，而且一一对应<br>2、可以为空的字段，可以不用插入值，或用null填充<br>3、不可以为空的字段，必须插入值<br>4、字段个数和值的个数必须一致<br>5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</p></blockquote><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改单表语法：</p><pre><code>update 表名 set 字段=新值,字段=新值【where 条件】</code></pre><p>修改多表语法：</p><pre><code>update 表1 别名1,表2 别名2set 字段=新值，字段=新值where 连接条件and 筛选条件</code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>方式1：delete语句 </p><p>单表的删除： ★<br>    delete from 表名 【where 筛选条件】</p><p>多表的删除：<br>    delete 别名1，别名2<br>    from 表1 别名1，表2 别名2<br>    where 连接条件<br>    and 筛选条件;</p><p>方式2：truncate语句（注意<a href="#%E4%B8%80%E3%80%81%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0">TRUNCATE(X,D)</a>是截断函数）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure><p>两种方式的区别【面试题】</p><blockquote><p>1.truncate不能加where条件，而delete可以加where条件</p><p>2.truncate的效率高一丢丢</p><p>3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始<br>    delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始</p><p>4.truncate删除不能回滚，delete删除可以<a href="#%E4%BD%BF%E7%94%A8%E5%88%B0%E7%9A%84%E5%85%B3%E9%94%AE%E5%AD%97">回滚</a></p><p>5.truncate没有返回值，delete有返回值</p></blockquote><h1 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h1><h2 id="库和表的管理"><a href="#库和表的管理" class="headerlink" title="库和表的管理"></a>库和表的管理</h2><p>库的管理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#一、创建库</span><br><span class="line">create database 库名</span><br><span class="line">#二、删除库</span><br><span class="line">drop database 库名</span><br></pre></td></tr></table></figure><p>表的管理：</p><ol><li>创建表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS stuinfo(</span><br><span class="line">stuId INT,</span><br><span class="line">stuName VARCHAR(20),</span><br><span class="line">gender CHAR,</span><br><span class="line">bornDate DATETIME</span><br><span class="line">);</span><br><span class="line">DESC stuinfo;#查看表结构</span><br></pre></td></tr></table></figure><ol start="2"><li><p>修改表alter<br>​语法：</p><p>ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;</p><blockquote><p>①修改字段名<br>ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;</p><p>②修改表名<br>ALTER TABLE stuinfo RENAME 【TO】  studentinfo;<br>③修改字段类型和列级约束<br>ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;</p><p>④添加字段</p><p>ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;<br>⑤删除字段<br>ALTER TABLE studentinfo DROP COLUMN email;</p></blockquote></li><li><p>删除表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE [IF EXISTS] studentinfo;</span><br></pre></td></tr></table></figure></li></ol><p>​    </p><h2 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h2><p>整型：</p><table><thead><tr><th>类型</th><th>tinyint</th><th>smallint</th><th>mediumint</th><th>int(integer)</th><th>bigint</th></tr></thead><tbody><tr><td>所占字节数</td><td>1</td><td>2</td><td>3</td><td>4</td><td>8</td></tr></tbody></table><blockquote><p>特点：<br>① 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsigned关键字<br>② 如果插入的数值超出了整型的范围,会报out of range异常，并且插入临界值<br>③ 如果不设置长度，会有默认的长度<br>    长度代表了显示的最大宽度，如果不够会用0在左边填充，但必须搭配zerofill使用，并且默认变为无符号整型</p></blockquote><p>小数：<br>    浮点型</p><p>​        float(M,D)</p><p>​        double(M,D)</p><p>​    定点型</p><p>​        dec(M,D)</p><p>​        decimal(M,D)</p><p>特点：</p><blockquote><p>①<br>M：整数部位+小数部位<br>D：小数部位<br>如果超过范围，则插入临界值</p><p>②<br>M和D都可以省略<br>如果是decimal，则M默认为10，D默认为0<br>如果是float和double，则会根据插入的数值的精度来决定精度</p><p>③定点型的精确度较高，如果要求插入数值的精度较高如货币运算等则考虑使用</p></blockquote><p>字符型：</p><blockquote><p>较短的文本：</p><p>​    char<br>​    varchar</p><p>其他：</p><p>​    binary和varbinary用于保存较短的二进制<br>​    enum用于保存枚举<br>​    set用于保存集合</p><p>较长的文本：<br>    text<br>    blob(较大的二进制)</p></blockquote><table><thead><tr><th>类型</th><th>写法</th><th>M的意思</th><th>特点</th><th>空间的消耗</th><th>效率</th></tr></thead><tbody><tr><td>char</td><td>char(M)</td><td>最大的字符数，可以省略，默认为1</td><td>固定长度的字符</td><td>比较耗费</td><td>高</td></tr><tr><td>varchar</td><td>varchar(M)</td><td>最大的字符数，不可以省略</td><td>可变长度的字符</td><td>比较节省</td><td>低</td></tr></tbody></table><p>日期型：</p><p>分类：</p><blockquote><p>date只保存日期</p><p>time 只保存时间<br>year只保存年</p><p>datetime保存日期+时间<br>timestamp保存日期+时间</p></blockquote><table><thead><tr><th>类型</th><th>字节</th><th>范围</th><th>时区等的影响</th></tr></thead><tbody><tr><td>datetime</td><td>8</td><td>1000——9999</td><td>不受</td></tr><tr><td>timestamp</td><td>4</td><td>1970-2038</td><td>受</td></tr></tbody></table><h2 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h2><blockquote><p>NOT NULL：非空，用于保证该字段的值不能为空<br>    比如姓名、学号等<br>DEFAULT:默认，用于保证该字段有默认值<br>    比如性别<br>PRIMARY KEY:主键，用于保证该字段的值具有唯一性，并且非空<br>    比如学号、员工编号等<br>UNIQUE:唯一，用于保证该字段的值具有唯一性，可以为空<br>    比如座位号<br>CHECK:检查约束【mysql中不支持】<br>    比如年龄、性别<br>FOREIGN KEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值<br>    在从表添加外键约束，用于引用主表中某列的值<br>    比如学生表的专业编号，员工表的部门编号，员工表的工种编号</p><p>​    删除带有外键的表的数据时，要在外键后设置删除方式（级联删除|级联置空）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#级联删除</span><br><span class="line">ALTER  TABLE 表名 ADD CONSTRAINT  fk_stu_major FOREIGN KEY（majorid） REFERENCES major(id) ON  DELETE  CASCADE;</span><br><span class="line">#级联置空</span><br><span class="line">ALTER  TABLE 表名 ADD CONSTRAINT  fk_stu_major FOREIGN KEY（majorid） REFERENCES major(id) ON  DELETE  SET NULL;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>列级约束：<br>        六大约束语法上都支持，但外键约束没有效果<br>表级约束：<br>    除了非空、默认，其他的都支持</p></blockquote><p>添加列级约束</p><blockquote><p>直接在字段名和类型后面追加 约束类型即可。</p><p>mysql中只支持：默认、非空、主键、唯一</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">USE students;</span><br><span class="line">DROP TABLE stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">id INT PRIMARY KEY,#主键</span><br><span class="line">stuName VARCHAR(20) NOT NULL UNIQUE,#非空,唯一</span><br><span class="line">gender CHAR(1) CHECK(gender&#x3D;&#39;男&#39; OR gender &#x3D;&#39;女&#39;),#检查，语法支持但无效</span><br><span class="line">seat INT UNIQUE,#唯一</span><br><span class="line">age INT DEFAULT  18,#默认约束</span><br><span class="line">majorId INT REFERENCES major(id)#外键，语法支持但无效</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>添加表级约束</p><p>语法：</p><blockquote><p> 在各个字段的最下面<br> 【constraint 约束名】 约束类型(字段名) </p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS stuinfo;</span><br><span class="line">CREATE TABLE stuinfo(</span><br><span class="line">id INT,</span><br><span class="line">stuname VARCHAR(20),</span><br><span class="line">gender CHAR(1),</span><br><span class="line">seat INT,</span><br><span class="line">age INT,</span><br><span class="line">majorid INT,</span><br><span class="line"></span><br><span class="line">CONSTRAINT pk PRIMARY KEY(id),#主键</span><br><span class="line">CONSTRAINT uq UNIQUE(seat),#唯一键</span><br><span class="line">CONSTRAINT ck CHECK(gender &#x3D;&#39;男&#39; OR gender  &#x3D; &#39;女&#39;),#检查</span><br><span class="line">CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)#外键</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>查看表中的所有索引，包括主键、外键、唯一</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM stuinfo;</span><br></pre></td></tr></table></figure><p>修改表时添加约束：</p><blockquote><p>1、添加列级约束<br>alter table 表名 modify column 字段名 字段类型 新约束;</p><p>2、添加表级约束<br>alter table 表名 add 【constraint 约束名】 约束类型(字段名) 【外键的引用】;</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#添加外键</span><br><span class="line">ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); </span><br></pre></td></tr></table></figure><p>修改表时删除约束</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#1.删除非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</span><br><span class="line"></span><br><span class="line">#2.删除默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT ;</span><br><span class="line"></span><br><span class="line">#3.删除主键</span><br><span class="line">ALTER TABLE stuinfo DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">#4.删除唯一</span><br><span class="line">ALTER TABLE stuinfo DROP INDEX seat;</span><br><span class="line"></span><br><span class="line">#5.删除外键</span><br><span class="line">ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br></pre></td></tr></table></figure><h1 id="TCL语言"><a href="#TCL语言" class="headerlink" title="TCL语言"></a>TCL语言</h1><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>​    通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p>（ACID）<br>A：原子性：要么都执行，要么都回滚<br>C：一致性：保证数据的状态操作前和操作后保持一致<br>I：隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰<br>D：持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</p></blockquote><p>相关步骤：</p><blockquote><p>1、开启事务<br>2、编写事务的一组逻辑操作单元（多条sql语句）<br>3、提交事务或回滚事务</p></blockquote><h3 id="事务的分类："><a href="#事务的分类：" class="headerlink" title="事务的分类："></a>事务的分类：</h3><p>隐式事务，没有明显的开启和结束事务的标志</p><blockquote><p>比如<br>insert、update、delete语句本身就是一个事务</p></blockquote><p>显式事务，具有明显的开启和结束事务的标志</p><blockquote><p>1、开启事务<br>    取消自动提交事务的功能</p><p>2、编写事务的一组逻辑操作单元（多条sql语句）（不支持create语句）<br>    insert<br>    update<br>    delete</p><p>3、提交事务或回滚事务</p></blockquote><h3 id="使用到的关键字"><a href="#使用到的关键字" class="headerlink" title="使用到的关键字"></a>使用到的关键字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set autocommit&#x3D;0;</span><br><span class="line">start transaction;</span><br><span class="line">commit;</span><br><span class="line">rollback;#回滚</span><br><span class="line"></span><br><span class="line">savepoint  断点名</span><br><span class="line">commit to 断点名</span><br><span class="line">rollback to 断点名</span><br></pre></td></tr></table></figure><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别:"></a>事务的隔离级别:</h3><p>事务并发问题如何发生？</p><blockquote><p>当多个事务同时操作同一个数据库的相同数据时</p></blockquote><p>事务的并发问题有哪些？</p><blockquote><p>脏读：一个事务读取到了另外一个事务未提交的数据<br>不可重复读：同一个事务中，多次读取到的数据不一致<br>幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</p></blockquote><p>如何避免事务的并发问题？</p><table><thead><tr><th>隔离级别（翻译）</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted（读未提交）</td><td>√（会导致 ）</td><td>√</td><td>√</td></tr><tr><td>read committed（读已提交）</td><td>×（不会导致）</td><td>√</td><td>√</td></tr><tr><td>repeatable read（可重复读）</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable（可序列化的）</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>设置隔离级别：</p><blockquote><p>set session|global  transaction isolation level 隔离级别名;</p><p>mysql中默认 第三个隔离级别 repeatable read<br>oracle中默认第二个隔离级别 read committed</p></blockquote><p>查看隔离级别：</p><blockquote><p>select @@tx_isolation;</p></blockquote><h3 id="演示事务的使用步骤"><a href="#演示事务的使用步骤" class="headerlink" title="演示事务的使用步骤"></a>演示事务的使用步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#演示事务的使用步骤</span><br><span class="line"></span><br><span class="line">#开启事务</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#编写一组事务的语句</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;张无忌&#39;;</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;赵敏&#39;;</span><br><span class="line"></span><br><span class="line">#结束事务或者回滚</span><br><span class="line">ROLLBACK;</span><br><span class="line">#commit;</span><br></pre></td></tr></table></figure><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>含义：理解成一张虚拟的表</p><p>视图和表的区别：</p><table><thead><tr><th></th><th>使用方式</th><th>占用物理空间</th></tr></thead><tbody><tr><td>视图</td><td>完全相同</td><td>不占用，仅仅保存的是sql逻辑</td></tr><tr><td>表</td><td>完全相同</td><td>占用</td></tr></tbody></table><p>视图的好处：</p><blockquote><p>1、sql语句提高重用性，效率高<br>2、和表实现了分离，提高了安全性</p></blockquote><h2 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#语法：</span><br><span class="line">CREATE VIEW  视图名</span><br><span class="line">AS</span><br><span class="line">查询语句;</span><br></pre></td></tr></table></figure><h2 id="视图的增删改查"><a href="#视图的增删改查" class="headerlink" title="视图的增删改查"></a>视图的增删改查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#1、查看视图的数据 ★</span><br><span class="line">SELECT * FROM my_v4;</span><br><span class="line">SELECT * FROM my_v1 WHERE last_name&#x3D;&#39;Partners&#39;;</span><br><span class="line"></span><br><span class="line">#2、插入视图的数据</span><br><span class="line">INSERT INTO my_v4 (last_name,department_id) VALUES(&#39;虚竹&#39;,90);</span><br><span class="line"></span><br><span class="line">#3、修改视图的数据</span><br><span class="line">UPDATE my_v4 SET last_name &#x3D;&#39;梦姑&#39; WHERE last_name&#x3D;&#39;虚竹&#39;;</span><br><span class="line">#4、删除视图的数据</span><br><span class="line">DELETE FROM my_v4;</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="某些视图不能更新"><a href="#某些视图不能更新" class="headerlink" title="某些视图不能更新"></a>某些视图不能更新</h2><p>​    包含以下关键字的sql语句：</p><blockquote><p>分组函数、distinct、group  by、having、union或者union all<br>常量视图<br>Select中包含子查询<br>join<br>from一个不能更新的视图<br>where子句的子查询引用了from子句中的表</p></blockquote><h2 id="视图逻辑的更新"><a href="#视图逻辑的更新" class="headerlink" title="视图逻辑的更新"></a>视图逻辑的更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#方式一：</span><br><span class="line">CREATE OR REPLACE VIEW test_v7</span><br><span class="line">AS</span><br><span class="line">SELECT last_name FROM employees</span><br><span class="line">WHERE employee_id&gt;100;</span><br><span class="line">#方式二:</span><br><span class="line">ALTER VIEW test_v7</span><br><span class="line">AS</span><br><span class="line">SELECT employee_id FROM employees;</span><br></pre></td></tr></table></figure><h2 id="视图的删除"><a href="#视图的删除" class="headerlink" title="视图的删除"></a>视图的删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW test_v1,test_v2,test_v3;</span><br></pre></td></tr></table></figure><h2 id="视图结构的查看"><a href="#视图结构的查看" class="headerlink" title="视图结构的查看"></a>视图结构的查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC test_v7;</span><br><span class="line">SHOW CREATE VIEW test_v7;</span><br></pre></td></tr></table></figure><h1 id="变量的介绍"><a href="#变量的介绍" class="headerlink" title="变量的介绍"></a>变量的介绍</h1><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p>一、全局变量</p><p>作用域：针对于所有会话（连接）有效，但不能跨重启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查看所有全局变量</span><br><span class="line">SHOW GLOBAL VARIABLES;</span><br><span class="line">#查看满足条件的部分系统变量</span><br><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">#查看指定的系统变量的值</span><br><span class="line">SELECT @@global.autocommit;</span><br><span class="line">#为某个系统变量赋值</span><br><span class="line">SET @@global.autocommit&#x3D;0;</span><br><span class="line">SET GLOBAL autocommit&#x3D;0;</span><br></pre></td></tr></table></figure><p>二、会话变量</p><p>作用域：针对于当前会话（连接）有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看所有会话变量</span><br><span class="line">SHOW SESSION VARIABLES;</span><br><span class="line">#查看满足条件的部分会话变量</span><br><span class="line">SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line">#查看指定的会话变量的值</span><br><span class="line">SELECT @@autocommit;</span><br><span class="line">SELECT @@session.tx_isolation;</span><br><span class="line">#为某个会话变量赋值</span><br><span class="line">SET @@session.tx_isolation&#x3D;&#39;read-uncommitted&#39;;</span><br><span class="line">SET SESSION tx_isolation&#x3D;&#39;read-committed&#39;;</span><br></pre></td></tr></table></figure><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>一、用户变量</p><p>声明并初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET @变量名&#x3D;值;</span><br><span class="line">SET @变量名:&#x3D;值;</span><br><span class="line">SELECT @变量名:&#x3D;值;</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#方式一：一般用于赋简单的值</span><br><span class="line">SET 变量名&#x3D;值;</span><br><span class="line">SET 变量名:&#x3D;值;</span><br><span class="line">SELECT 变量名:&#x3D;值;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#方式二：一般用于赋表中的字段值</span><br><span class="line">SELECT 字段名或表达式 INTO 变量</span><br><span class="line">FROM 表;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @变量名;</span><br></pre></td></tr></table></figure><p>二、局部变量</p><p>声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare 变量名 类型 【default 值】;</span><br></pre></td></tr></table></figure><p>赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#方式一：一般用于赋简单的值</span><br><span class="line">SET 变量名&#x3D;值;</span><br><span class="line">SET 变量名:&#x3D;值;</span><br><span class="line">SELECT 变量名:&#x3D;值;</span><br><span class="line">#方式二：一般用于赋表 中的字段值</span><br><span class="line">SELECT 字段名或表达式 INTO 变量</span><br><span class="line">FROM 表;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 变量名</span><br></pre></td></tr></table></figure><p>二者的区别：</p><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><h1 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h1><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>含义：一组经过预先编译的sql语句的集合<br>好处：</p><blockquote><p>1、提高了sql语句的重用性，减少了开发程序员的压力<br>2、提高了效率<br>3、减少了传输次数</p></blockquote><p>分类：</p><blockquote><p>1、无返回无参<br>2、仅仅带in类型，无返回有参<br>3、仅仅带out类型，有返回无参<br>4、既带in又带out，有返回有参<br>5、带inout，有返回有参<br>注意：in、out、inout都可以在一个存储过程中带多个</p></blockquote><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名(in|out|inout 参数名  参数类型,...)</span><br><span class="line">begin</span><br><span class="line">存储过程体</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>类似于Java中的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java中的方法定义格式</span></span><br><span class="line">修饰符 返回类型 方法名(参数类型 参数名,...)&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#1、需要设置新的结束标记</span><br><span class="line">delimiter 新的结束标记</span><br><span class="line">#示例：</span><br><span class="line">delimiter $</span><br><span class="line">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)</span><br><span class="line">BEGIN</span><br><span class="line">sql语句1;</span><br><span class="line">sql语句2;</span><br><span class="line">END $</span><br><span class="line"></span><br><span class="line">#2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end</span><br><span class="line"></span><br><span class="line">#3、参数前面的符号的意思</span><br><span class="line">in:该参数只能作为输入 （该参数不能做返回值）</span><br><span class="line">out：该参数只能作为输出（该参数只能做返回值）</span><br><span class="line">inout：既能做输入又能做输出</span><br></pre></td></tr></table></figure><h3 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h3><p>​    call 存储过程名(实参列表)</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型</span><br><span class="line">BEGIN</span><br><span class="line">函数体</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>​    SELECT 函数名(实参列表)</p><h2 id="函数和存储过程的区别"><a href="#函数和存储过程的区别" class="headerlink" title="函数和存储过程的区别"></a>函数和存储过程的区别</h2><table><thead><tr><th align="left"></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td align="left">函数</td><td>FUNCTION</td><td>SELECT 函数()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</td></tr><tr><td align="left">存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>可以有0个或多个</td><td>一般用于更新</td></tr></tbody></table><h1 id="流程结构控制"><a href="#流程结构控制" class="headerlink" title="流程结构控制"></a>流程结构控制</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>一、if函数<br>    语法：if(条件，值1，值2)<br>    特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#情况一：类似于switch</span><br><span class="line">case 表达式</span><br><span class="line">when 值1 then 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">when 值2 then 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">else 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br><span class="line"></span><br><span class="line">#情况二：类似于多重if</span><br><span class="line">case </span><br><span class="line">when 条件1 then 结果1或语句1(如果是语句，需要加分号) </span><br><span class="line">when 条件2 then 结果2或语句2(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line">else 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line">end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）</span><br></pre></td></tr></table></figure><p>特点：<br>    可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if 情况1 then 语句1;</span><br><span class="line">elseif 情况2 then 语句2;</span><br><span class="line">...</span><br><span class="line">else 语句n;</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure><p>特点：<br>    只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：</p><table><thead><tr><th>三者比较</th><th>应用场合</th></tr></thead><tbody><tr><td>if函数</td><td>简单双分支</td></tr><tr><td>case结构</td><td>等值判断的多分支</td></tr><tr><td>if结构</td><td>区间判断的多分支</td></tr></tbody></table><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>种类：</p><blockquote><p>while    先判断后执行</p><p>repeat    先执行一次再判断</p><p>loop    一般用于实现简单的死循环</p></blockquote><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#while</span><br><span class="line">【标签名:】WHILE 循环条件  DO</span><br><span class="line">循环体</span><br><span class="line">END WHILE 【标签名】;</span><br><span class="line"></span><br><span class="line">#loop</span><br><span class="line">【标签名:】loop</span><br><span class="line">循环体</span><br><span class="line">end loop 【标签名】;</span><br><span class="line"></span><br><span class="line">#repeat</span><br><span class="line">【标签名:】repeat</span><br><span class="line">循环体</span><br><span class="line">until 结束条件</span><br><span class="line">end repeat 【标签名】;</span><br></pre></td></tr></table></figure><p>特点：</p><blockquote><p>只能放在BEGIN END里面</p><p>如果要搭配leave跳转语句，则必须使用标签，否则可以不用标签</p><p>leave类似于java中的break语句，跳出所在循环！！！</p></blockquote><h1 id="参考列表"><a href="#参考列表" class="headerlink" title="参考列表"></a>参考列表</h1><p><a href="https://www.bilibili.com/video/BV1xW411u7ax?p=1">尚硅谷MySQL数据库教程（mysql初学者零基础入门到精通）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库的好处&quot;&gt;&lt;a href=&quot;#数据库的好处&quot; class=&quot;headerlink&quot; title=&quot;数据库的好处&quot;&gt;&lt;/a&gt;数据库的好处&lt;/h1&gt;&lt;p&gt;​    1.持久化数据到本地&lt;br&gt;​    2.可以实现结构化查询，方便管理&lt;br&gt;​    &lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>使用Java语言编写一个飞机大战小游戏</title>
    <link href="http://example.com/2020/11/13/%E7%94%A8Java%E7%BC%96%E5%86%99%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://example.com/2020/11/13/%E7%94%A8Java%E7%BC%96%E5%86%99%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98%E5%B0%8F%E6%B8%B8%E6%88%8F/</id>
    <published>2020-11-13T15:55:00.000Z</published>
    <updated>2020-11-23T14:12:05.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>此项目是<a href="https://space.bilibili.com/471146315?spm_id_from=333.788.b_765f7570696e666f.2">bilibili软帝学院</a>的教学项目，由纯Java编写。本博客仅为记录自己遇到的一些错误，同时尽力帮助同时在做类似游戏的同学。<br>原项目链接：<a href="https://www.bilibili.com/video/BV1VE411Z7gB?p=1">Java小游戏制作：三国战记\捕鱼达人\飞机大战\飞扬小鸟</a></p><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><h2 id="窗体、面板方面"><a href="#窗体、面板方面" class="headerlink" title="窗体、面板方面"></a>窗体、面板方面</h2><ol><li>创建窗体<ul><li>设置标题<br>  setTitle(“标题”);</li><li>设置窗体大小<br>  setSize(宽，高);</li><li>设置不允许玩家改变窗体大小<br>  setResizable(false);</li><li>设置窗口关闭时自动停止程序<br>  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</li></ul></li><li>创建面板<ul><li>设置面板的可见性<br>  frame.setVisible(true);</li></ul></li><li>将面板加入到窗体中<br> frame.add(panel);<h2 id="线程方面"><a href="#线程方面" class="headerlink" title="线程方面"></a>线程方面</h2>创建并启动一个线程，控制游戏场景中活动的物体<br>固定格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Thread()&#123;</span><br><span class="line">public void run()&#123;</span><br><span class="line">线程需要做的事</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><h2 id="键鼠监听器"><a href="#键鼠监听器" class="headerlink" title="键鼠监听器"></a>键鼠监听器</h2><h3 id="鼠标监听器"><a href="#鼠标监听器" class="headerlink" title="鼠标监听器"></a>鼠标监听器</h3><pre><code>     鼠标移动事件mouseMoved(MouseEvent e)&#123;           相对应函数         &#125;        其他监听事件的格式类似        鼠标单击事件mouseClicked()        鼠标按下去的事件mousePressed()        鼠标移入游戏界面的事件mouseEntered()        鼠标移出游戏界面的事件mouseExited()</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MouseAdapter adapter&#x3D;new MouseAdapter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void mouseMoved(MouseEvent e) &#123;</span><br><span class="line">相应的方法</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        &#x2F;&#x2F;将适配器加入到监听器中</span><br><span class="line">        addMouseListener(adapter);</span><br><span class="line">        addMouseMotionListener(adapter);</span><br></pre></td></tr></table></figure><h3 id="键盘监听器"><a href="#键盘监听器" class="headerlink" title="键盘监听器"></a>键盘监听器</h3><p>可用getKeyCode()函数获得按键的编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">KeyAdapter kd&#x3D;new KeyAdapter() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void keyPressed(KeyEvent e) &#123;</span><br><span class="line">相应的方法</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       &#x2F;&#x2F;同样，需要将适配器加入到监听器中</span><br><span class="line">       frame.addKeyListener(kd);</span><br></pre></td></tr></table></figure><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><p>固定开头<br>@Override<br>    public void paint(Graphics g) {<br>        super.paint(g);<br>用画笔画图<br>        g.drawImage(图片,位置（横坐标）,位置（纵坐标）,null)</p><p>设置字体颜色、粗体、大小等<br>        g.setColor(Color.WHITE);<br>        g.setFont(new Font(“楷体”,Font.BOLD,20));</p><p>用画笔写字<br>        g.drawString(“字符串”，位置(横坐标),位置(纵坐标));</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="java-lang-IllegalArgumentException-input-null"><a href="#java-lang-IllegalArgumentException-input-null" class="headerlink" title="java.lang.IllegalArgumentException: input == null!"></a>java.lang.IllegalArgumentException: input == null!</h2><p>如图：<img src="https://img-blog.csdnimg.cn/20201113223215288.png#pic_center" alt="java.lang.IllegalArgumentException: input == null!"></p><h3 id="bug原因："><a href="#bug原因：" class="headerlink" title="bug原因："></a>bug原因：</h3><ol><li>路径错误</li><li>idea的out文件不同步，out中并没有img文件夹，如图<br><img src="https://img-blog.csdnimg.cn/20201113225029232.png#pic_center" alt="在这里插入图片描述"></li></ol><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>原因一：<br>        1.  查看控制台错误提示信息<br>        2. 检查App类中26行附近语句的路径是否正确<br>原因二：<br>        1. 选中src文件夹后，点击顶部横栏中的build<br>        2. 点击ReBuild ‘img’<br>        3. 点击左上角File，点击Close Project。<br>        4. 再次打开项目即可。<br>        如果还不行，就重启电脑。<br>        本人两种方法都试过，都可以。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><ol><li>GameFrame.class</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">import javax.swing.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;12</span><br><span class="line"> * Time: 18:23</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class GameFrame extends JFrame&#123;</span><br><span class="line">    public GameFrame()&#123; </span><br><span class="line">        &#x2F;&#x2F;设置窗体标题</span><br><span class="line">        setTitle(&quot;飞机大战&quot;);</span><br><span class="line">        &#x2F;&#x2F;设置窗体大小</span><br><span class="line">        setSize(512,768);</span><br><span class="line">        &#x2F;&#x2F;设置位置居中（null表示相对左上角居中）</span><br><span class="line">        setLocationRelativeTo(null);</span><br><span class="line">        &#x2F;&#x2F;设置不允许玩家改变窗体大小</span><br><span class="line">        setResizable(false);</span><br><span class="line">        &#x2F;&#x2F;设置窗口关闭时自动停止程序</span><br><span class="line">        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;主函数</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        &#x2F;&#x2F;创建窗体</span><br><span class="line">        GameFrame frame&#x3D;new GameFrame();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建面板</span><br><span class="line">        GamePanel panel&#x3D;new GamePanel(frame);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;将面板加入到窗体中</span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        panel.action();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;设置面板的可见性</span><br><span class="line">        frame.setVisible(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>GamePanel.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">import javax.swing.*;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.event.KeyAdapter;</span><br><span class="line">import java.awt.event.KeyEvent;</span><br><span class="line">import java.awt.event.MouseAdapter;</span><br><span class="line">import java.awt.event.MouseEvent;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;12</span><br><span class="line"> * Time: 18:44</span><br><span class="line"> **&#x2F;</span><br><span class="line">&#x2F;&#x2F;面板类</span><br><span class="line">public class GamePanel extends JPanel &#123;</span><br><span class="line">    BufferedImage bg;                        &#x2F;&#x2F;背景</span><br><span class="line">    Hero hero&#x3D;new Hero();</span><br><span class="line">    &#x2F;*</span><br><span class="line">     使用集合代表 敌机大本营</span><br><span class="line">     不用数组，是因为不能提前知道大本营中敌机的数量</span><br><span class="line">     若用数组，还需要扩容</span><br><span class="line">     创建的敌机都会放到这个集合中</span><br><span class="line">     绘图时遍历此集合即可</span><br><span class="line">     *&#x2F;</span><br><span class="line">    List&lt;Ep&gt; eps&#x3D;new ArrayList&lt;Ep&gt;();</span><br><span class="line">    &#x2F;*</span><br><span class="line">      英雄机的弹药库</span><br><span class="line">      与敌机大本营类似</span><br><span class="line">     *&#x2F;</span><br><span class="line">    ArrayList&lt;Fire&gt; fs&#x3D;new ArrayList&lt;Fire&gt;();</span><br><span class="line">    int  score;                             &#x2F;&#x2F;得分</span><br><span class="line">    int power&#x3D;1;                            &#x2F;&#x2F;火力</span><br><span class="line">    boolean gameover&#x3D;false;                 &#x2F;&#x2F;游戏开关</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建面板</span><br><span class="line">    public GamePanel(GameFrame frame)&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;设置背景颜色</span><br><span class="line">        setBackground(Color.black);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;App是工具类，专门用来获取图片的，参数是相对路径</span><br><span class="line">        bg&#x3D;App.getImg(&quot;&#x2F;img&#x2F;bg1.jpg&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">          鼠标监听事件</span><br><span class="line">               鼠标移动事件mouseMoved(MouseEvent e)&#123;</span><br><span class="line">                  相对应函数</span><br><span class="line">               &#125;</span><br><span class="line">               其他监听事件的格式类似</span><br><span class="line">                   鼠标单击事件mouseClicked()</span><br><span class="line">                   鼠标按下去的事件mousePressed()</span><br><span class="line">                   鼠标移入游戏界面的事件mouseEntered()</span><br><span class="line">                   鼠标移出游戏界面的事件mouseExited()</span><br><span class="line">         *&#x2F;</span><br><span class="line">        MouseAdapter adapter&#x3D;new MouseAdapter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void mouseMoved(MouseEvent e) &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;获取鼠标的位置</span><br><span class="line">                int mx&#x3D;e.getX();</span><br><span class="line">                int my&#x3D;e.getY();</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;游戏未结束时，调用函数，将英雄机移动到鼠标位置</span><br><span class="line">                if(!gameover)</span><br><span class="line">                    hero.moveToMouse(mx,my);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;重画，刷新一下</span><br><span class="line">                repaint();</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void mouseClicked(MouseEvent e) &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;*</span><br><span class="line">                  游戏结束时，鼠标点击画面，重新开始新游戏</span><br><span class="line">                  恢复hp</span><br><span class="line">                  游戏结束标志置假</span><br><span class="line">                  得分清零</span><br><span class="line">                  敌机大本营清零</span><br><span class="line">                  弹药库清零</span><br><span class="line">                  刷新，重画</span><br><span class="line">                 *&#x2F;</span><br><span class="line">                if(gameover)&#123;</span><br><span class="line">                    hero &#x3D; new Hero();</span><br><span class="line">                    gameover&#x3D;false;</span><br><span class="line">                    score&#x3D;0;</span><br><span class="line">                    eps.clear();</span><br><span class="line">                    fs.clear();</span><br><span class="line">                    power&#x3D;1;</span><br><span class="line">                    repaint();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;将适配器加入到监听器中</span><br><span class="line">        addMouseListener(adapter);</span><br><span class="line">        addMouseMotionListener(adapter);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;键盘监听事件</span><br><span class="line">        KeyAdapter kd&#x3D;new KeyAdapter() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void keyPressed(KeyEvent e) &#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;*</span><br><span class="line">                  游戏未结束时，才可以调用相应函数移动</span><br><span class="line">                  getKeyCode()函数获得按键的编号</span><br><span class="line">                  KeyEvent.VK_UP、KeyEvent.VK_DOWN、KeyEvent.VK_LEFT、KeyEvent.VK_RIGHT</span><br><span class="line">                  分别表示上下左右键的编号</span><br><span class="line">                  移动之后需要重画，刷新页面</span><br><span class="line">                 *&#x2F;</span><br><span class="line">                if(!gameover)&#123;</span><br><span class="line">                    if(e.getKeyCode()&#x3D;&#x3D;KeyEvent.VK_UP)&#123;</span><br><span class="line">                        hero.moveUp();</span><br><span class="line">                    &#125;else if(e.getKeyCode()&#x3D;&#x3D;KeyEvent.VK_DOWN)&#123;</span><br><span class="line">                        hero.moveDown();</span><br><span class="line">                    &#125;else if(e.getKeyCode()&#x3D;&#x3D;KeyEvent.VK_LEFT)&#123;</span><br><span class="line">                        hero.moveLeft();</span><br><span class="line">                    &#125;else if(e.getKeyCode()&#x3D;&#x3D;KeyEvent.VK_RIGHT)&#123;</span><br><span class="line">                        hero.moveRight();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                repaint();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;同样，需要将适配器加入到监听器中</span><br><span class="line">        frame.addKeyListener(kd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void action()&#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">          创建并启动一个线程，控制游戏场景中活动的物体</span><br><span class="line">          固定格式</span><br><span class="line">          new Thread()&#123;public void run()&#123;..线程需要做的事..&#125;&#125;.start();</span><br><span class="line">         *&#x2F;</span><br><span class="line">        new Thread()&#123;</span><br><span class="line">            public void run()&#123;</span><br><span class="line">                while(true)&#123;</span><br><span class="line">                    if(!gameover)&#123;</span><br><span class="line">                        epEnter();      &#x2F;&#x2F;敌机入场</span><br><span class="line">                        epMove();       &#x2F;&#x2F;敌机向下移动</span><br><span class="line">                        shoot();        &#x2F;&#x2F;英雄机发射子弹</span><br><span class="line">                        firemove();     &#x2F;&#x2F;子弹移动</span><br><span class="line">                        shootEp();      &#x2F;&#x2F;</span><br><span class="line">                        hit();</span><br><span class="line">                        repaint();      &#x2F;&#x2F;刷新</span><br><span class="line">                    &#125;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(10);           &#x2F;&#x2F;暂停10ms</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;英雄机被敌机击中</span><br><span class="line">    private void hit() &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">          遍历敌机大本营</span><br><span class="line">          若敌机与英雄机相撞</span><br><span class="line">          则将相撞的英雄机删除，</span><br><span class="line">                英雄机hp-1</span><br><span class="line">                得分-10(最低为0)</span><br><span class="line">                火力回归最初水平</span><br><span class="line">                若血量为0，则游戏结束</span><br><span class="line">         *&#x2F;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; eps.size(); i++) &#123;</span><br><span class="line">            Ep ep &#x3D; eps.get(i);</span><br><span class="line">            if(ep.hitBy(hero))&#123;</span><br><span class="line">                eps.remove(ep);</span><br><span class="line">                hero.hp--;</span><br><span class="line">                score-&#x3D;10;</span><br><span class="line">                if(score&lt;0)</span><br><span class="line">                    score&#x3D;0;</span><br><span class="line">                power&#x3D;1;</span><br><span class="line">                if(hero.hp&lt;&#x3D;0)</span><br><span class="line">                    gameover&#x3D;true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;遍历敌机大本营</span><br><span class="line">    private void shootEp() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; fs.size(); i++) &#123;</span><br><span class="line">            Fire fire&#x3D;fs.get(i);</span><br><span class="line">            bang(fire);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;敌机被击中后</span><br><span class="line">    private void bang(Fire fire)&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; eps.size(); i++) &#123;</span><br><span class="line">            Ep ep&#x3D;eps.get(i);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;如果击中目标</span><br><span class="line">            if(ep.shootBy(fire))&#123;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;敌机血量下降</span><br><span class="line">                ep.hp--;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;如果敌机的血量为零，则将此敌机从大本营删除，并加分</span><br><span class="line">                if(ep.hp&#x3D;&#x3D;0)&#123;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;如果被击毁的是14号敌机，那么英雄机可以加血或者升级武器</span><br><span class="line">                    if(ep.type&#x3D;&#x3D;14)&#123;</span><br><span class="line">                        if(hero.hp&lt;&#x3D;5)</span><br><span class="line">                            hero.hp++;</span><br><span class="line">                        else if(power&lt;&#x3D;3)</span><br><span class="line">                            power++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    eps.remove(ep);</span><br><span class="line">                    score+&#x3D;10;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F;将发生碰撞的子弹从子弹库中删去</span><br><span class="line">                fs.remove(fire);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;用于控制子弹发射频率</span><br><span class="line">    int fireindex;</span><br><span class="line">    &#x2F;&#x2F;英雄机发射子弹</span><br><span class="line">    private void shoot() &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;GamePanel类action方法中的while循环10次，发射一次子弹</span><br><span class="line">        if(fireindex%5&#x3D;&#x3D;0)&#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;火力为1，英雄机正中间发射子弹</span><br><span class="line">            if(power&#x3D;&#x3D;1) &#123;</span><br><span class="line">                Fire fire2 &#x3D; new Fire(hero.x + 33, hero.y - 20);       &#x2F;&#x2F;中间弹道子弹的起始位置应在靠前方一点</span><br><span class="line">                fs.add(fire2);</span><br><span class="line">            &#125;else if(power&#x3D;&#x3D;2)&#123;</span><br><span class="line"></span><br><span class="line">             &#x2F;&#x2F;火力为2，英雄机两侧发射子弹</span><br><span class="line">                Fire fire1&#x3D;new Fire(hero.x+11,hero.y);</span><br><span class="line">                fs.add(fire1);</span><br><span class="line">                Fire fire3&#x3D;new Fire(hero.x+58,hero.y);</span><br><span class="line">                fs.add(fire3);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;火力为3，三弹道一起发射子弹</span><br><span class="line">                Fire fire1&#x3D;new Fire(hero.x+11,hero.y);</span><br><span class="line">                fs.add(fire1);</span><br><span class="line">                Fire fire2&#x3D;new Fire(hero.x+33,hero.y-20);</span><br><span class="line">                fs.add(fire2);</span><br><span class="line">                Fire fire3&#x3D;new Fire(hero.x+58,hero.y);</span><br><span class="line">                fs.add(fire3);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fireindex++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;子弹移动</span><br><span class="line">    private void firemove()&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取子弹库中每发子弹，并调用move函数，进行向下移动</span><br><span class="line">        for (int i &#x3D; 0; i &lt; fs.size(); i++) &#123;</span><br><span class="line">            Fire fire&#x3D;fs.get(i);</span><br><span class="line">            fire.move();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;飞机移动（与子弹移动类似）</span><br><span class="line">    private void epMove() &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; eps.size(); i++) &#123;</span><br><span class="line">            Ep ep&#x3D;eps.get(i);</span><br><span class="line">            ep.move();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int index;      &#x2F;&#x2F;用于控制敌机进场频率（与子弹发射频率类似）</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;飞机进场</span><br><span class="line">    private void epEnter()&#123;</span><br><span class="line">        if(index%20&#x3D;&#x3D;0)&#123;</span><br><span class="line">            Ep ep&#x3D;new Ep();</span><br><span class="line">            eps.add(ep);</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">      绘图</span><br><span class="line">       画笔Graphics</span><br><span class="line">           super.paint(g);</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void paint(Graphics g) &#123;</span><br><span class="line">        &#x2F;&#x2F;Graphics g 画笔</span><br><span class="line">        super.paint(g);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;用画笔画图g.drawImage(图片,位置（横坐标）,位置（纵坐标）,null)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;画背景及英雄机</span><br><span class="line">        g.drawImage(bg,0,0,null);</span><br><span class="line">        g.drawImage(hero.img,hero.x,hero.y,hero.h,hero.w,null);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;设置字体颜色、大小等</span><br><span class="line">        g.setColor(Color.WHITE);</span><br><span class="line">        g.setFont(new Font(&quot;楷体&quot;,Font.BOLD,20));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;用画笔写字</span><br><span class="line">        g.drawString(&quot;分数：&quot;+score,10,30);</span><br><span class="line">        g.drawString(&quot;血量：&quot;,240,30);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘画英雄机</span><br><span class="line">        for(int i &#x3D; 0; i &lt; hero.hp; i++) &#123;</span><br><span class="line">            g.drawImage(hero.img,300+35*i,5,30,30,null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘画敌机</span><br><span class="line">        for(int i&#x3D;0;i&lt;eps.size();i++)&#123;</span><br><span class="line">            Ep ep &#x3D; eps.get(i);</span><br><span class="line">            g.drawImage(ep.img,ep.x,ep.y,ep.h,ep.w,null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘画子弹</span><br><span class="line">        for(int i&#x3D;0;i&lt;fs.size();i++) &#123;</span><br><span class="line">            Fire fire &#x3D; fs.get(i);</span><br><span class="line">            g.drawImage(fire.img, fire.x, fire.y, fire.h, fire.w, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;游戏结束时，绘画结束界面</span><br><span class="line">        if(gameover)&#123;</span><br><span class="line">            g.setColor(Color.RED);</span><br><span class="line">            g.setFont(new Font(&quot;楷体&quot;,Font.BOLD,40));</span><br><span class="line">            g.drawString(&quot;我大意了啊~&quot;,150,300);</span><br><span class="line">            g.setColor(Color.CYAN);</span><br><span class="line">            g.setFont(new Font(&quot;楷体&quot;,Font.BOLD,20));</span><br><span class="line">            g.drawString(&quot;单击任意位置，即可重新开始游戏。&quot;,80,350);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>App.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;12</span><br><span class="line"> * Time: 18:56</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class App &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * static 方法 特点</span><br><span class="line">     * 所有对象都共用</span><br><span class="line">     * 并且，不需要创建对象就可以直接调用</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static BufferedImage getImg(String path)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            &#x2F;*</span><br><span class="line">              Java的IO流（输入输出流）</span><br><span class="line">              App.class获取App类的路径</span><br><span class="line">              getResource()方法获取资源</span><br><span class="line">             *&#x2F;</span><br><span class="line">            BufferedImage img &#x3D; ImageIO.read(App.class.getResource(path));</span><br><span class="line">            return img;</span><br><span class="line">        &#125; catch (IOException e)&#123;</span><br><span class="line">            &#x2F;&#x2F;找不到图片则输出将异常情况输出</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>Hero.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.security.PublicKey;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;12</span><br><span class="line"> * Time: 20:23</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Hero extends FlyObject&#123;</span><br><span class="line">    int hp;                       &#x2F;&#x2F;英雄机的血量</span><br><span class="line">    public Hero()&#123;</span><br><span class="line">        img&#x3D;App.getImg(&quot;&#x2F;img&#x2F;hero.png&quot;);</span><br><span class="line">        &#x2F;&#x2F;英雄机的坐标（x，y），此处是英雄机图片的左上角的坐标</span><br><span class="line">        x&#x3D;200;</span><br><span class="line">        y&#x3D;500;</span><br><span class="line">        hp&#x3D;5;</span><br><span class="line">        &#x2F;&#x2F;确定所绘制的英雄机的宽、高（此处分别等于图片的宽和高）</span><br><span class="line">        w&#x3D;img.getWidth();</span><br><span class="line">        h&#x3D;img.getHeight();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 让英雄机移动到“鼠标位置“</span><br><span class="line">    public void moveToMouse(int mx,int my)&#123;</span><br><span class="line">        x&#x3D;mx-w&#x2F;2;               &#x2F;&#x2F;让英雄机的中心点（而不是左上角）位于鼠标位置</span><br><span class="line">        y&#x3D;my-w&#x2F;2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;*</span><br><span class="line">      键盘控制时所调用的函数</span><br><span class="line">      其中的if条件判断是为了确保英雄机始终处于屏幕内</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void moveUp()&#123;</span><br><span class="line">        y-&#x3D;20;</span><br><span class="line">        if(y&lt;0)</span><br><span class="line">            y&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void moveDown()&#123;</span><br><span class="line">        y+&#x3D;20;</span><br><span class="line">        if(y&gt;768)</span><br><span class="line">            y&#x3D;768;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void moveLeft()&#123;</span><br><span class="line">        x-&#x3D;20;</span><br><span class="line">        if(x&lt;0)</span><br><span class="line">            x&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void moveRight()&#123;</span><br><span class="line">        x+&#x3D;20;</span><br><span class="line">        if(x&gt;512)</span><br><span class="line">            x&#x3D;512;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>Ep.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;12</span><br><span class="line"> * Time: 21:54</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Ep extends FlyObject&#123;</span><br><span class="line">    int speed;      &#x2F;&#x2F;敌机的移动速度</span><br><span class="line">    int hp&#x3D;6;       &#x2F;&#x2F;敌机的血量</span><br><span class="line">    int type;       &#x2F;&#x2F;敌机的类型（用于确定Boss机，奖品等）</span><br><span class="line">    public Ep()&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取随机数</span><br><span class="line">        Random rd&#x3D;new Random();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;将随机数取整（rd.nextInt()范围是[0,15)），所以index范围是[1,16)即[1,15]</span><br><span class="line">        int index&#x3D;rd.nextInt(15)+1;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;确定路径，如果index在1~9，则在index前加0，否则不加</span><br><span class="line">        String path&#x3D;&quot;&#x2F;img&#x2F;ep&quot;+(index&lt;10?&quot;0&quot;:&quot;&quot;)+index+&quot;.png&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;通过工具类App 获得图片</span><br><span class="line">        img&#x3D;App.getImg(path);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制大小和图片的大小一致</span><br><span class="line">        w&#x3D;img.getWidth();</span><br><span class="line">        h&#x3D;img.getHeight();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;位置横坐标范围为[0,512-w)</span><br><span class="line">        &#x2F;&#x2F;纵坐标为-h ，让其开始位置在屏幕外</span><br><span class="line">        x&#x3D;rd.nextInt(512-w);</span><br><span class="line">        y&#x3D;-h;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">          图片的编号与大小正相关</span><br><span class="line">          此处想让大飞机速度慢</span><br><span class="line">                  小飞机速度块</span><br><span class="line">          因此，让敌机速度与编号成反相关</span><br><span class="line">         *&#x2F;</span><br><span class="line">        speed&#x3D;17-index;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;记录飞机型号</span><br><span class="line">        type&#x3D;index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;敌飞向下移动</span><br><span class="line">    public void move() &#123;</span><br><span class="line">        y+&#x3D;speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;判断敌机是否被击中</span><br><span class="line">    public boolean shootBy(Fire fire) &#123;</span><br><span class="line">        &#x2F;&#x2F;画图即可判断清楚条件</span><br><span class="line">        boolean shoot &#x3D; x&lt;&#x3D;fire.x+fire.w &amp;&amp;</span><br><span class="line">                     x&gt;&#x3D;fire.x-w       &amp;&amp;</span><br><span class="line">                     y&lt;&#x3D;fire.y+fire.h  &amp;&amp;</span><br><span class="line">                     y&gt;&#x3D;fire.y-h;</span><br><span class="line">        return  shoot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hitBy(Hero hero) &#123;</span><br><span class="line">        &#x2F;&#x2F;与ShootBy(Fire fire)类似</span><br><span class="line">        boolean hit &#x3D; x&lt;&#x3D;hero.x+hero.w &amp;&amp;</span><br><span class="line">                x&gt;&#x3D;hero.x-w &amp;&amp;</span><br><span class="line">                y&lt;&#x3D;hero.y+hero.h &amp;&amp;</span><br><span class="line">                y&gt;&#x3D;hero.y-h;</span><br><span class="line">        return hit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>FlyObject.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;12</span><br><span class="line"> * Time: 21:59</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class FlyObject &#123;</span><br><span class="line">    BufferedImage img;</span><br><span class="line">    &#x2F;&#x2F;定义飞行物的横坐标</span><br><span class="line">    int x;</span><br><span class="line">    &#x2F;&#x2F;定义飞行物的纵坐标</span><br><span class="line">    int y;</span><br><span class="line">    &#x2F;&#x2F;定义飞行物的宽</span><br><span class="line">    int w;</span><br><span class="line">    &#x2F;&#x2F;定义飞行物的高</span><br><span class="line">    int h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>Fire.java</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package ui;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by IntelliJ IDEA.</span><br><span class="line"> * User: Zengc</span><br><span class="line"> * Date: 2020&#x2F;11&#x2F;13</span><br><span class="line"> * Time: 11:25</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class Fire extends FlyObject&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;英雄机的横纵坐标(hx，hy)</span><br><span class="line">    public Fire(int hx,int hy)&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;通过工具类App 获得子弹的图片</span><br><span class="line">        img&#x3D;App.getImg(&quot;&#x2F;img&#x2F;fire.png&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制的大小为图片大小的1&#x2F;4</span><br><span class="line">        w&#x3D;img.getWidth()&#x2F;4;</span><br><span class="line">        h&#x3D;img.getHeight()&#x2F;4;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;子弹的起始位置在英雄机的位置</span><br><span class="line">        x&#x3D;hx;</span><br><span class="line">        y&#x3D;hy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void move() &#123;</span><br><span class="line">        y-&#x3D;10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用Java语言编写一个飞机大战小游戏</summary>
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础知识</title>
    <link href="http://example.com/2020/10/19/Linux/"/>
    <id>http://example.com/2020/10/19/Linux/</id>
    <published>2020-10-19T14:34:00.000Z</published>
    <updated>2020-10-24T12:37:00.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="易混易错"><a href="#易混易错" class="headerlink" title="易混易错"></a>易混易错</h1><ol><li>$(),$(()),${}的区别</li><li>单引号，双引号，反引号的用法区别</li></ol><h1 id="Liux-常用命令"><a href="#Liux-常用命令" class="headerlink" title="Liux 常用命令"></a>Liux 常用命令</h1><h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><ol><li><p>命令格式</p><p>命令格式</p><p>命令格式：命令 [选项] [参数]</p><p>例：ls -la /etc</p></li><li><p>目录处理命令</p><ol><li><p>显示目录文件命令ls</p><p>ls [选项] 文件或目录</p><p>选项 ：</p><ul><li>-a 显示所有文件，包括隐藏文件</li><li>-l 详细信息显示</li><li>-d 查看目录属性</li></ul><p>详细信息部分内容：-rw-r–r–</p><ul><li><p>- 文件类型（-表示二进制文件 d表示目录 l表示软连接文件）</p></li><li><p>rw- r– r–</p><p>u      g    o</p><p>u所有者 g所属组 o其他人</p><p>r读 w写 x执行</p></li></ul></li><li><p>创建新目录命令mkdir（<strong>m</strong>ake <strong>dir</strong>ectories）</p><p>mkdir [选项] [目录名]</p><p>选项：-p 递归创建</p></li><li><p>切换目录命令cd（<strong>c</strong>hange <strong>d</strong>irectory）</p><p>cd [目录]</p><p>cd /etc/passwd    切换到绝对路径</p><p>cd .. 回到上一级目录</p></li><li><p>显示当前目录命令pwd（<strong>p</strong>rint working <strong>d</strong>irectory）</p><p>pwd</p></li><li><p>删除空目录命令rmdir（<strong>r</strong>e<strong>m</strong>ove empty <strong>dir</strong>ectory）</p><p>rmdir [目录名]</p></li><li><p>复制文件或目录命令cp（<strong>c</strong>o<strong>p</strong>y）</p><p>cp [选项] 原文件或目录 目标目录</p><p>选项：</p><ul><li>-r 复制目录</li><li>-p 保留文件属性</li></ul></li><li><p>剪切文件或改名命令mv（<strong>m</strong>o<strong>v</strong>e）</p><p>mv 原文件或目录 目标目录</p></li><li><p>删除文件命令rm（<strong>r</strong>e<strong>m</strong>ove）</p><p>rm [选项] 文件或目录</p><p>选项：</p><ul><li>-r 删除目录</li><li>-f 强制执行</li></ul></li></ol></li><li><p>文件处理命令</p><ol><li><p>创建空文件命令touch</p><p>touch [文件名]</p></li><li><p>显示文件内容命令cat</p><p>cat [选项] [文件名]</p><p>选项：</p><ul><li>-n 显示行号</li></ul></li><li><p>显示文件内容（反向列示）tac</p><p>最后一行输出到第一行…</p></li><li><p>分页显示文件内容命令more</p><p>more [文件名]</p><p>（空格）或f    翻页</p><p>（Enter）        换行</p><p>Q或q                退出</p></li><li><p>分页显示文件内容命令less</p><p>less [文件名]</p><p>（空格）或f    翻页</p><p>（Enter）        换行</p><p>Q或q                退出</p><p>PageUp            向上翻页</p><p>“↑”                    向上换行</p><p>可以在less命令后页面使用/关键词查找，按n跳下一个</p></li><li><p>显示文件前面几行命令head</p><p>head 文件名</p><p>-n 指定行数</p></li><li><p>显示文件末尾几行命令tail</p><p>tail [选项] 文件名</p><p>选项</p><ul><li><p>-n    指定行数</p></li><li><p>-f    动态显示文件末尾内容</p></li></ul></li></ol></li><li><p>链接命令ln</p><p>生成链接文件命令ln（<strong>l</strong>i<strong>n</strong>k）</p><p>ln [选项] 原文件 目标文件</p><p>-s 创建软连接，不加此选项，则默认创建硬链接</p><p><strong>软链接</strong>特征：类似于Windows的快捷方式</p><ul><li><p>文件详细信息开头是l</p><p>例如：lrwxrwxrwx</p></li><li><p>文件大小只有几kb</p></li><li><p>详细信息里有文件名 —&gt; 源文件</p></li></ul><p><strong>硬链接</strong>特征：</p><ul><li>拷贝cp -p 并且两者同步更新</li><li>通过i节点识别</li><li>不能跨分区</li><li>不能针对目录使用</li></ul></li></ol><h2 id="权限管理命令"><a href="#权限管理命令" class="headerlink" title="权限管理命令"></a>权限管理命令</h2><ol><li><p>权限管理命令chmod（<strong>ch</strong>ange the permissions <strong>mod</strong>e of a file）</p><p>用法一：chmod [{ugoa}{+-=}{rwx}] [文件或目录]</p><p>用法二：chmod [mode=421] [文件或目录] </p><p>-R 递归修改，默认只修改当前文件/文件夹的权限，加-R即可修改文件夹下所有文件或目录权限</p><p>举例：</p><ul><li>用法一：chmod u+w /etc/passwd 给文件所有者添加写权限</li><li>用法二：chmod 755 /etc/passwd 对应权限为rwxr-xr-x（u7g5o5）</li></ul><table><thead><tr><th>代表字符</th><th>权限</th><th>对文件的含义</th><th>对目录的含义</th></tr></thead><tbody><tr><td>r</td><td>读权限</td><td>可以查看文件内容</td><td>可以列出目录中的内容</td></tr><tr><td>w</td><td>写权限</td><td>可以修改文件内容</td><td>可以在目录中创建、删除文件</td></tr><tr><td>x</td><td>执行权限</td><td>可以执行文件</td><td>可以进入目录</td></tr></tbody></table></li><li><p>其他权限管理命令</p><ol><li><p>chown命令（<strong>ch</strong>ange file <strong>own</strong>ership）</p><p>改变文件或目录的所有者命令chmod</p><p>chown [用户] [文件或目录]</p></li><li><p>chgrp命令（<strong>ch</strong>ange file <strong>gr</strong>ou<strong>p</strong> ownership）</p><p>改变文件或目录的所属组</p><p>charg [用户组] [文件或目录]</p></li><li><p>umask命令</p><p>显示、设置文件的缺省权限（创建目录时，系统默认对其赋予的权限，对于文件，为了安全考虑，系统默认取消执行权限，其他的权限和目录一样）</p><p>显示：umask [-S] 以rwx形式显示新建文件缺省权限</p><p>设置：umask 数字</p><p>此处数字应为rwxrwxrwx对权限（用rwx表示）取”异或”的值(按rwx权值421转化成数字)</p><p>举例：</p><p>我想设置缺省权限为rwxr-xr–</p><p>rwxrwxrwx与</p><p>rwxr-xr–取异或得</p><p>— -w- -wx</p><p>转化成权值应为023</p></li></ol></li></ol><h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><h2 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h2><h2 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h2><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><h1 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h1><h1 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h1><h1 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h1><h2 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h2><ol><li><p>简介</p><ul><li>Linux主要通过用户配置文件来查看和修改用户信息</li><li>通过命令行修改的信息重启不会保存，而保存到配置文件中则会永久生效。</li></ul></li><li><p>用户信息文件/etc/passwd</p><p>root​：x:0:0:root:/root:/bin/bash</p><ol><li><p>第一字段：用户名</p></li><li><p>第二字段：密码标志（x表示有密码，不可见，真正的密码（加密）保存在/etc/shadow中）</p></li><li><p>第三字段：UID（用户ID）</p><p>​    0 超级用户</p><p>​    1-499    系统用户（伪用户）</p><p>​    500-65535    普通用户</p></li><li><p>第四字段：GID（用户初始组ID）</p><p>​    初始组：用户一创建就会生成的同名的组 。</p><p>​    附加组：用户创建之后还可以继续附加的组</p></li><li><p>第五字段：用户说明</p></li><li><p>第六字段：家目录</p><ol><li>普通用户：/home/用户名/</li><li>超级用户：/root/</li></ol></li><li><p>第七字段：登陆之后的Shell</p></li></ol></li><li><p>影子文件/etc/shadow</p><p>root:*&amp;89dsuf8:16066:0:99999:7:::</p><ol><li><p>第一字段：用户名</p></li><li><p>第二 字段：加密密码</p><p>如果密码是”!!”或”*”代表没有密码，不能登录</p></li><li><p>第三字段：密码最后修改日期</p><p>是用时间戳表示，即从1970年1月1日开始，每过一天加1</p><p>时间戳换算成日期代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date  -d &quot;2020-10-23 16066 days&quot;</span><br></pre></td></tr></table></figure></li><li><p>两次修改密码所需要的间隔时间（和第三字段相比 ）</p></li><li><p>密码有效期（和第三字段相比 ）</p></li><li><p>密码修改到期前的警告天数（和第五字段相比）</p></li><li><p>密码到期后的宽限天数（和第五字段相比）</p><p>0代表密码过期立即失效</p><p>-1代表密码永远不会失效</p></li><li><p>账号失效时间（用时间戳表示）</p><p>到账号失效时间，即使未过有效期，用户账号也会失效</p><p>日期换算为时间戳代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $(($(date --date=&quot;2020/10/23&quot;+%s)/86400+1))</span><br></pre></td></tr></table></figure></li><li><p>保留（暂时没用）</p></li></ol></li><li><p>组信息文件/etc/group和组密码文件/etc/gshadow</p><p>组信息文件 /etc/group</p><ol><li>第一字段：组名</li><li>第二字段：组密码标志</li><li>第三字段 ：GID</li><li>第四字段：组中附加用户</li></ol><p>组密码文件 /etc/gshadow（使用较少）</p><ol><li>第一字段：组名</li><li>第二字段：组密码</li><li>第三字段：组管理员用户名</li><li>第四字段：组中附加用户</li></ol></li></ol><h2 id="用户管理相关文件"><a href="#用户管理相关文件" class="headerlink" title="用户管理相关文件"></a>用户管理相关文件</h2><ol><li><p>用户家目录</p><p>普通用户：/home/用户名/，所有者和所属组都是此用户，权限是700</p><p>超级用户：/root/，所有者和所属组都是root用户，权限是550</p><p>将一个普通用户变为超级用户：将普通用户的UID改成0，而不是改用户的组id GID</p></li><li><p>用户的邮箱（创建用户时自动创建）</p><p>/var/spool/mail/用户名/</p></li><li><p>用户模板目录</p><p>/etc/skel</p><p>创建新用户时，会自动创建一部分文件，这部分文件就是来源于这个目录，可以修改。</p></li></ol><h2 id="用户管理命令-1"><a href="#用户管理命令-1" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><ol><li><p>用户添加命令useradd</p><ol><li><p>useradd [选项] 用户名</p><p>​    选项：</p><ol><li>-u     UID    手工指定用户的UID号</li><li>-d     家目录 手工指定用户的家目录</li><li>-c     用户说明 手工指定用户的说明</li><li>-g     组名 手工指定用户的初始组 </li><li>-G     手工指定用户的附加组</li><li>-s     shell 手工指定用户的登录shell，默认为/bin/bash</li></ol></li><li><p>添加一个用户，之前的六个文件都会修改</p></li><li><p>用户默认值文件/etc/default/useradd</p><ul><li>HOME=/home    #用户的家目录</li><li>INACTIVE=-1    #密码过期宽限天数（对应 shadow文件第七字段）</li><li>EXPIRE=    #密码失效时间（对应…第八字段）</li><li>SHELL=/bin/bash    #默认的shell</li><li>SKEL=/etc/skel    #模板目录</li><li>CREATE_MAIL_SPOOL=yes    是否建立邮箱</li></ul></li><li><p>用户默认值文件/etc/login.defs</p><ul><li>PASS_MAX_DAYS 99999    #密码有效期（对应…5）</li><li>PASS_MIN_DAYS 0    #密码修改间隔 （4）</li><li>PASS_MIN_LEN 5    #密码最小5位（PAM） （5位过于简单，现在是PAM认证8位）</li><li>PASS_WARN_AGE 7    #密码到期警告 （6）</li><li>UID_MIN 500    #UID的范围</li><li>UID_MAX 60000</li><li>ENCRYPR_METHOD SHA512     #加密模式</li></ul></li></ol></li><li><p>修改用户密码passwd</p><ol><li><p>passwd命令</p><p>#passwd [选项 ] 用户名</p><p>或$passwd  [选项 ]</p><p>选项：</p><ul><li>-S    查询 用户密码的密码状态，仅root用户可用</li><li>-l    暂时锁定用户。仅root用户可用</li><li>-u    解锁用户。仅root用户可用</li><li>–stdin    可以通过管道符输出的数据作为用户的密码</li></ul><p>注意：超级用户改某用户密码加用户名，普通用户改自己的密码不加用户名！</p></li></ol></li><li><p>修改用户信息usermod 修改用户密码状态chage</p><ol><li><p>usermod    修改用户信息</p><p>usermod [选项] 用户名</p><p>选项：</p><ol><li>-u    UID 修改用户的UID号</li><li>-c    用户说明    修改用户的说明信息</li><li>-G    组名    修改用户的附加组</li><li>-L    临时锁定用户（Lock）</li><li>-U    解锁用户（Unlock）</li></ol></li><li><p>chage    修改用户密码状态</p><p>chage    [选项] 用户名</p><p>选项：</p><ol><li>-l    列出用户的详细密码状态</li><li>-d    日期    最后一次修改密码的日期（shadow3字段 ）</li><li>-m    天数    两次密码修改间隔（4）</li><li>-M    天数    密码有效期（5）</li><li>-W    天数    密码过期前的警告天数（6）</li><li>-I    天数    密码过期后宽限天数（7）</li><li>-E    日期    账号失效时间（8）</li></ol><p>平时只用到 chage -d 0 用户名 </p><p>将密码修改日期归0了，用户一登陆就要修改密码</p></li></ol></li><li><p>删除用户userdel</p><p>userdel [选项] 用户名</p><p>选项：</p><p>​        -r    删除用户的同时删除用户家目录</p></li><li><p>查看用户ID</p><p>id 用户名</p><p>输出uid，gid，同组用户</p></li><li><p>用户切换命令su</p><p>su [选项] 用户名 </p><p>​    选项：</p><ul><li>-    选项只使用 ‘-’ （一定要加）代表连带用户的环境 变量一起切换</li><li>-c    仅执行一次命令，而不切换用户身份</li></ul></li></ol><h2 id="用户组管理命令"><a href="#用户组管理命令" class="headerlink" title="用户组管理命令"></a>用户组管理命令</h2><ol><li><p>添加用户组</p><p>groupadd [选项] 组名</p><p>选项：</p><ul><li>-g    GID    指定组ID</li></ul></li><li><p>修改用户组</p><p>groupmod [选项] 组名</p><p>选项：</p><ul><li>-g    GID    修改组ID</li><li>-n    新组名    修改组名</li></ul></li><li><p>删除用户组</p><p>groupdel 组名</p></li><li><p>把用户添加入组或从组中删除</p><p>gpasswd    [选项] 组名</p><p>选项：</p><ul><li>-a    用户名    把用户加入组</li><li>-d    用户名    把用户从组中删除</li></ul></li></ol><h1 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h1><h1 id="文件系统管理"><a href="#文件系统管理" class="headerlink" title="文件系统管理"></a>文件系统管理</h1><h1 id="Shell基础"><a href="#Shell基础" class="headerlink" title="Shell基础"></a>Shell基础</h1><h2 id="Shell概述"><a href="#Shell概述" class="headerlink" title="Shell概述"></a>Shell概述</h2><p>Shell是命令行解释器，也是功能强大的编程语言</p><p>Linux支持的Shell列在文件/etc/shells里面，常用：bash，sh，csh</p><h2 id="Shell脚本执行方式"><a href="#Shell脚本执行方式" class="headerlink" title="Shell脚本执行方式"></a>Shell脚本执行方式</h2><ol><li><p>输出命令 echo</p><p>echo [选项] [输出内容]</p><p>​            -e：支持反斜线控制的字符转换</p><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\\</td><td>输出\本身</td></tr><tr><td>\a</td><td>输出警告声</td></tr><tr><td>\b</td><td>退格键（向左删除）</td></tr><tr><td>\n</td><td>换行</td></tr><tr><td>\t</td><td>制表符（Tab）</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>常用如上</td><td></td></tr><tr><td>\0nnn</td><td>按照八进制ASCII表输出，其中0是数字0，nnn是三位八进制数</td></tr><tr><td>\xhh</td><td>按照十六进制ASCII表输出，其中hh是两位十六进制数</td></tr><tr><td>有趣的如下</td><td></td></tr><tr><td>\e[1;31m 内容 \e[0m</td><td>输出颜色，30m=黑色，31m=红色，32m=绿色，33m=黄色，34m=蓝色，35m=洋红，36m=青色，37m=白色</td></tr></tbody></table></li><li><p>编写第一个Shell脚本</p><p>使用vi/vim/gedit编辑器编辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hello.sh</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo -e &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure></li><li><p>脚本执行方法一：</p><p>赋予执行权限，直接运行</p><p>​    赋予执行权限：chmod 755 hello.sh</p><p>​    另外，ll命令（即ls -l）显示当前目录下的每个文件或者子目录的详细信息</p><p>运行：</p><p>1)可以用绝对路径：</p><p>​        <code>/root/sh/hello.sh</code></p><p>2)也可以用相对路径</p><p>​        <code>./hello.sh</code></p></li><li><p>脚本执行方法二：</p><p>通过bash调用执行脚本</p><p><code>bash hello.sh</code></p></li></ol><h2 id="Bash的基本功能"><a href="#Bash的基本功能" class="headerlink" title="Bash的基本功能"></a>Bash的基本功能</h2><ol><li><p>历史命令与命令补全</p><ol><li>history [选项] [历史命令保存文件]</li></ol><p>​                -c                                            清空历史命令</p><p>​                -w                                            把缓存中的历史命令写入历史命令<a href="~/.bash_history" title="保存文件">^保存文件</a>中</p></li></ol><ol start="2"><li><p>历史命令默认会保存1000条，可以在环境变量配置文件/etc/profile中，修改环境变量HISTSIZE</p></li><li><p>历史命令的调用</p></li></ol><ul><li>使用上、下箭头调用以前的历史命令</li><li>使用”!n”重复执行第n条命令</li><li>“!!”重复执行上一条命令</li><li>“!字串”重复执行最后一条以该字串开头的命令</li></ul><ol start="4"><li><p>在输入命令或文件时，按Tab键会自动补全</p><p>当有多个文件开头相同时，无法触发Tab补全功能，可以连按两下Tab键，输出开头相同的文件或命令</p></li></ol><ol start="2"><li><p>命令别名与常用快捷键</p><ol><li><p>命令别名</p><ol><li><p>设定命令别名    alias 别名=‘原命令’</p></li><li><p>查询命令别名    alias</p></li><li><p>命令执行时的顺序</p><ol><li>执行用绝对路径或相对路径执行的命令</li><li>执行别名</li><li>执行Bash的内部命令</li><li>按照$PATH环境变量定义的目录查找顺序的找到的第一个命令</li></ol></li><li><p>让别名永久生效</p><p>用vi 打开/root/.bashrc ，在其中添加需要添加的别名</p></li><li><p>删除别名</p><p><code>unalias 别名</code></p></li></ol></li><li><p>Bash常用快捷键</p><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>ctrl+C</td><td>强制终止当前命令</td></tr><tr><td>ctrl+L</td><td>清屏，相当于clear</td></tr><tr><td>ctrl+U</td><td>删除或剪切当行光标前的命令</td></tr><tr><td>ctrl+K</td><td>删除或剪切当行光标后的命令</td></tr><tr><td>ctrl+Y</td><td>粘贴ctrl+U或者ctrl+K剪切的内容</td></tr><tr><td>ctrl+R</td><td>在历史命令中搜索。按下ctrl+R之后，会出现搜索界面。</td></tr><tr><td>ctrl+D</td><td>退出当前终端</td></tr><tr><td>ctrl+Z</td><td>暂停，放到后台</td></tr></tbody></table></li></ol></li></ol><ol start="3"><li><p>输入输出重定向</p><ol><li><p>标准输入输出</p><table><thead><tr><th>设备</th><th>文件描述符</th><th>类型</th></tr></thead><tbody><tr><td>键盘</td><td>0</td><td>标准输入</td></tr><tr><td>显示器</td><td>1</td><td>标准输出</td></tr><tr><td>显示器</td><td>2</td><td>标准错误输出</td></tr></tbody></table></li><li><p>输出重定向</p><table><thead><tr><th>类型</th><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>标准输出重定向</td><td>命令 &gt; 文件</td><td>以覆盖的方式，把命令正确输出输出到制定文件或设备中</td></tr><tr><td>标准输出重定向</td><td>命令 &gt;&gt; 文件</td><td>以追加的方式，把命令正确输出输出到制定文件或设备中</td></tr><tr><td>标准错误输出重定向</td><td>命令 2&gt; 文件</td><td>以覆盖的方式，把命令错误输出输出到制定文件或设备中</td></tr><tr><td>标准错误输出</td><td>命令 2&gt;&gt; 文件</td><td>以覆盖的方式，把命令错误输出输出到制定文件或设备中</td></tr></tbody></table><p>正确输出和错误输出同时保存</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; 文件 2&gt;&amp; 1</td><td>以覆盖的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令 &gt;&gt; 文件 2&gt;&amp; 1</td><td>以追加的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令 &amp;&gt; 文件</td><td>以覆盖的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令 &amp;&gt;&gt; 文件</td><td>以追加的方式，把正确输出和错误输出都保存到同一个文件中</td></tr><tr><td>命令&gt;&gt;文件1 2&gt;&gt;文件2</td><td>以追加的方式，把正确输出输出到文件1，错误输出都输出到文件2中</td></tr></tbody></table></li><li><p>输入重定向</p><p>wc [选项] [文件名]        统计输入的字节数、单词数、行数</p><p>​         -c         统计字节数</p><p>​         -w        统计单词数</p><p>​         -l         统计行数</p><p>命令 &lt; 文件名    [选项]（不能三个选项都写）统计文件中的 字节数、单词数、行数</p></li></ol></li><li><p>多命令顺序执行与管道符</p><ol><li><p>多命令顺序执行</p><table><thead><tr><th>符号</th><th>格式</th><th>作用</th></tr></thead><tbody><tr><td>;</td><td>命令1;命令2</td><td>无逻辑联系</td></tr><tr><td>&amp;&amp;</td><td>命令1&amp;&amp;命令2</td><td>当命令1执行正确，才会执行命令2，当命令1执行不正确，命令2则不会执行</td></tr><tr><td>||</td><td>命令1||命令2</td><td>当命令1执行不正确，命令2执行，命令1执行正确 ，不会执行 命令2</td></tr></tbody></table><p>举个栗子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls &amp;&amp; echo &quot;yes&quot; || echo &quot;no&quot;</span><br></pre></td></tr></table></figure><p>注意：ls || echo “no” &amp;&amp; echo “yes”    不能实现以上效果。如果命令错误，会输出no和yes</p><p>dd if=输入文件 of=输出文件 bs=字节数 count =个数</p><p>​    选项：    if                         指定源文件或源设备</p><p>​                    of                        制定目标文件或目标设备</p><p>​                    bs=字节数          指定一次输入/输出多少字节，即把多少                                                    字节看作一个数据块</p><p>​                    count                  制定输入/输出多少个数据块</p></li><li><p>管道符</p><p>命令1 | 命令2            命令1的正确输出作为命令2的操作对象</p><p>more        使文件的内容分屏显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -a /etc/ | more</span><br></pre></td></tr></table></figure><p>netstat  -an             查询所有的网络连接（需要安装net -tools）</p><p>grep [选项] “搜索内容” 文件名     在文件中搜包含”搜索内容“的内容</p><p>​            -i                            忽略 大小写</p><p>​            -n                            输出行号</p><p>​            -v                            反向查找</p><p>​            –color=auto          搜索出的关键词用颜色表示</p><p>netstat -an | grep “ESTABLISHED”</p></li></ol></li><li><p>通配符与其他特殊符号</p><ol><li><p>通配符</p><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td>？</td><td>匹配任意一个字符</td></tr><tr><td>*</td><td>匹配0个或任意多个字符</td></tr><tr><td>[]</td><td>匹配[]中任意一个字符</td></tr><tr><td>[-]</td><td>例如：[a-z]匹配a-z中任意一个字符</td></tr><tr><td>[^]</td><td>例如：[^123]匹配任意一个123以外的字符</td></tr></tbody></table></li><li><p>Bash中其他特殊符号</p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>‘ ‘</td><td>单引号，在单引号中符号都没有特殊含义</td></tr><tr><td>“”</td><td>双引号，在双引号中符号都没有特殊含义，但是”$“ 、”`”和”\“是例外，分别拥有”调用变量的值”、”引用命令”、”转义字符”的特殊含义</td></tr><tr><td>``</td><td>反引号，其中是系统命令</td></tr><tr><td>$()</td><td>和反引号作用一样，推荐使用$()，易于区分</td></tr><tr><td>#</td><td>#开头表示注释</td></tr><tr><td>$</td><td>用于调用变量的值，echo $a 最好用’’或者””括起来，否则变量a中的空格不能输出。</td></tr><tr><td>\</td><td>转义符</td></tr></tbody></table></li></ol></li></ol><h2 id="Bash的变量"><a href="#Bash的变量" class="headerlink" title="Bash的变量"></a>Bash的变量</h2><ol><li><p>变量设置规则</p><ol><li>变量名称由字母、数字和下划线组成，不能是数字开头</li><li>变量默认类型是字符串型的</li><li>变量用等号连接值，等号左右两侧不能有空格</li><li>变量值中如果有空格，需要用单引号或者双引号括起来</li><li>如果需要增加变量的值，那么可以进行变量值的叠加。不过变量需用双引号包含”$变量名”或者用${变量名}包含</li><li>如果是命令的结果作为变量值赋予变量，则需要使用反引号或者$()包含命令</li><li>环境变量名建议大写，易于区分</li></ol></li><li><p>变量分类</p><ul><li>用户自定义变量</li><li>环境变量：和系统操作环境相关的数据</li><li>位置参数变量：主要用来向脚本传递参数或数据，变量名不能自定义，变量作用固定</li><li>预定义变量：Bash中已经定义的变量，变量名不能自定义，变量作用也是固定的</li></ul></li><li><p>本地变量</p><ul><li><p>定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;lij&quot;</span><br></pre></td></tr></table></figure></li><li><p>叠加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aa=123</span><br><span class="line">aa=&quot;$aa&quot;456</span><br><span class="line">aa=$&#123;aa&#125;789</span><br></pre></td></tr></table></figure></li><li><p>变量调用 $+变量名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $name</span><br></pre></td></tr></table></figure></li><li><p>变量查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set</span><br></pre></td></tr></table></figure></li><li><p>变量删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br></pre></td></tr></table></figure></li></ul></li><li><p>环境变量</p><ol><li><p>环境变量的生效范围</p><p>用户自定义变量只在当前Shell中生效，环境变量在当前Shell和所有子Shell中生效。</p><p>如果把环境变量写入相应的配置文件，那么这个环境变量就会在所有的Shell中生效</p><p>命令pstree可以查看进程树</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p><ol><li><p>声明变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export 变量名=变量值</span><br></pre></td></tr></table></figure></li><li><p>查询变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure></li><li><p>删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset</span><br></pre></td></tr></table></figure></li></ol></li><li><p>系统常见环境变量</p><ol><li><p>PATH：系统查找命令的路径</p></li><li><p>PSI:定义系统提示符的变量</p><table><thead><tr><th>提示符</th><th>作用</th></tr></thead><tbody><tr><td>\d</td><td>显示日期，格式为”星期  月 日“</td></tr><tr><td>\h</td><td>显示简写主机名，默认 主机名”localhost“</td></tr><tr><td>\t</td><td>显示24小时制时间，格式是“HH:MM:DD”</td></tr><tr><td>\T</td><td>显示12小时制时间，格式是“HH:MM:SS”</td></tr><tr><td>\A</td><td>显示24小时制时间，格式是“HH:MM”</td></tr><tr><td>\u</td><td>显示当前用户名</td></tr><tr><td>\w</td><td>显示当前所在目录的完整名称</td></tr><tr><td>\W</td><td>显示当前命令的最后一个目录</td></tr><tr><td>\#</td><td>执行的第几个命令</td></tr><tr><td>\$</td><td>提示符。如果是root用户会显示#，如果是普通用户则是$</td></tr></tbody></table></li></ol></li></ol></li><li><p>位置参数变量</p><table><thead><tr><th>位置参数变量</th><th>作用</th></tr></thead><tbody><tr><td>$n</td><td>第n个参数，$0表示命令本身，10以上的参数用大括号包含，如：${10}</td></tr><tr><td>$*</td><td>代表所有参数，将所有参数视为一个整体</td></tr><tr><td>$@</td><td>代表所以参数，将每个参数区分对待</td></tr><tr><td>$#</td><td>代表命令行参数的个数</td></tr></tbody></table></li><li><p>预定义变量</p><table><thead><tr><th>预定义变量</th><th>作用</th></tr></thead><tbody><tr><td>$?</td><td>返回最后一次执行的命令的返回状态，0代表运行正确，其他表示错误</td></tr><tr><td>$$</td><td>表示当前进程的PID</td></tr><tr><td>$!</td><td>表示最后一个进程的PID</td></tr></tbody></table><ul><li><p>接受键盘输入</p><p>read [选项]  [变量名]</p><p>​            -p                            给用户的提示信息     </p><p>​            -t    秒数                等待输入的时间（秒），默认无限</p><p>​            -n    字符数            read命令接受到了指定的字符数就会执行</p><p>​            -s                            隐藏输入的数据，如密码</p></li></ul></li></ol><h2 id="Bash的运算符"><a href="#Bash的运算符" class="headerlink" title="Bash的运算符"></a>Bash的运算符</h2><ol><li><p>数值运算和运算符</p><ol><li><p>declare声明变量类型</p><p>declare [+/-] [选项] 变量名</p><p>​    选项：     -          给变量设定类型属性</p><p>​                    +         取消变量的类型属性</p><p>​                    -i        将变量声明为整数型</p><p>​                    -x        将变量设为系统变量</p><p>​                    -p        显示指定变量的被声明类型</p></li><li><p>数值运算的方法：</p><ol><li><p>declare声明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     a=1</span><br><span class="line">     b=2</span><br><span class="line">declare -i c=$a+$b</span><br></pre></td></tr></table></figure></li><li><p>expr或let数值运算工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  a=1</span><br><span class="line">  b=2</span><br><span class="line">  d=$(expr $a + $b)</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">&quot;+&quot;</span>左右两侧都必须有空格</span></span><br></pre></td></tr></table></figure></li><li><p>$((运算式))或$[运算式]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  a=1</span><br><span class="line">  b=2</span><br><span class="line">  e=$(($a+$b))</span><br><span class="line">f=$[$a+$b]</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><ol start="3"><li><p>运算符</p><table><thead><tr><th>优先级</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>13（高）</td><td>-，+</td><td>单目负、单目正</td></tr><tr><td>12</td><td>!，~</td><td>逻辑非、按位取反或补码</td></tr><tr><td>11</td><td>*，/，%</td><td>乘、除、取模</td></tr><tr><td>10</td><td>+，-</td><td>加、减</td></tr><tr><td>9</td><td>&lt;&lt;，&gt;&gt;</td><td>按位左移，按位右移</td></tr><tr><td>8</td><td>&lt;=，&gt;=，&lt;，&gt;</td><td>小于或等于，大于或等于，小于，大于</td></tr><tr><td>7</td><td>==，!=</td><td>等于，不等于</td></tr><tr><td>6</td><td>&amp;</td><td>按位与</td></tr><tr><td>5</td><td>^</td><td>按位异或</td></tr><tr><td>4</td><td>|</td><td>按位或</td></tr><tr><td>3</td><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>2</td><td>||</td><td>逻辑或</td></tr><tr><td>1（低）</td><td>=，+=，-=，*=，/=，%=，&amp;=，^=，|=，&lt;&lt;=，&gt;&gt;=</td><td>赋值、运算且赋值</td></tr></tbody></table></li></ol><ol start="2"><li><p>变量测试与内容替换</p><p>使用时再看[Shell基础-Bash变量-变量测试与内容替换][2]</p></li></ol><h2 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h2><ol><li><p>环境变量配置文件简介</p><p>环境变量配置文件改变后一般要重启才会生效</p><ol><li><p>source命令，执行后环境变量配置文件的改变就会生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source 配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash">相当于</span></span><br><span class="line">. 配置文件</span><br></pre></td></tr></table></figure></li><li><p>简介</p><p>主要是系统默认环境变量 比如：PATH、HISTSIZE、PS1、HOSTNAME等默认环境变量</p></li></ol></li><li><p>环境变量配置文件作用</p><p>主要文件有</p><ul><li>/etc/profile</li><li>/etc/profile.d/*.sh</li><li>~/.bash_profile</li><li>~/.bashrc</li><li>/etc/bashrc</li></ul><p>作用见[Shell基础-环境变量配置文件][3]</p></li><li><p>其他配置文件和登录信息</p><ol><li><p>注销时生效的环境变量配置文件</p><p>~/.bash_logout</p></li><li><p>其他配置文件</p><p>~/bash_history</p></li><li><p>Shell登录信息</p><p>本地终端欢迎信息：    /etc/issue</p><table><thead><tr><th>转义符</th><th>作用</th></tr></thead><tbody><tr><td>\d</td><td>显示当前系统日期</td></tr><tr><td>\s</td><td>显示操作系统名称</td></tr><tr><td>\l</td><td>显示登录的终端号，常用</td></tr><tr><td>\m</td><td>显示硬件体系机构，如i386、i686等</td></tr><tr><td>\n</td><td>显示主机名</td></tr><tr><td>\o</td><td>显示域名</td></tr><tr><td>\r</td><td>显示内核版本</td></tr><tr><td>\t</td><td>显示当前系统时间</td></tr><tr><td>\u</td><td>显示当前登录用户的序列号</td></tr></tbody></table><p>登陆后欢迎信息：/etc/motd</p><p>​    本地和远程登陆，都可以显示</p></li></ol></li></ol><h1 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h1><h2 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式"></a>基础正则表达式</h2><ol><li><p>正则表达式与通配符的区别</p><ul><li><p>正则表达式是用来在文件中匹配符合条件的字符串，是包含匹配，grep、awk、sed等命令可以支持正则。</p></li><li><p>匹配符是用来匹配符合条件的文件名，是完全匹配，ls、find、cp命令不支持正则表达式，只能使用shell的通配符来进行匹配。</p></li></ul></li><li><p>基础正则表达式（可与1.1.3中的通配符相比较）</p><table><thead><tr><th>元字符</th><th>作用</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个字符0或多次</td></tr><tr><td>.</td><td>匹配换行符以外的任意一个字符</td></tr><tr><td>^</td><td>匹配行首，如^hi会匹配hi开头的字符串</td></tr><tr><td>$</td><td>匹配行尾</td></tr><tr><td>[]</td><td>匹配中括号中的任意一个值</td></tr><tr><td>[^]</td><td>匹配中括号中以外任意一个值</td></tr><tr><td>\</td><td>转义符</td></tr><tr><td>\{n\}</td><td>表示前面的字符出现了n次</td></tr><tr><td>\{n,\}</td><td>表示前面的字符至少出现了n次</td></tr><tr><td>\{n,m\}</td><td>表示前面的字符出现了n至m次，如[a-z\{2,3\}表示匹配2到3位小写字母</td></tr></tbody></table></li></ol><h2 id="字符截取命令"><a href="#字符截取命令" class="headerlink" title="字符截取命令"></a>字符截取命令</h2><ol><li><p>grep 字段提取命令（按行），常与cut命令（搜列）合用。</p><p>grep 【选项】 “模式” 文件</p><p>选项：</p><ul><li>-E        模式是拓展（Extend）的正则表达式</li><li>-i         忽略大小写（ignore case）</li><li>-v        只选中不匹配的行</li><li>-n        显示行号</li><li>-w        ”完全匹配“（包含关键字的字符串不匹配）</li></ul><p>模式：即要在每行搜索的关键字</p></li><li><p>cut 字段提取命令（按列）</p><p>cut [选项] 文件名</p><p>选项：</p><p>-f            列号            提取第几列</p><p>-d            分隔符        按照指定分隔符分割列</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd |grep /bin/bash | grep -v root | cut -d &quot;:&quot; -f 1</span><br></pre></td></tr></table></figure><p>检索文件/etc/passwd中，包含“/bin/bash”的行，再去掉包含”root”的行，最后用”:”分割后的第一列</p><p>缺点：不能实现准确用空格分隔列，awk命令可以实现，但是awk命令虽强大但复杂，尽量用cut命令。</p></li><li><p>awk命令</p><ol><li><p>printf命令（格式化输出语句）</p><ul><li><p>printf    ‘输出类型输出格式’    输出内容</p></li><li><p>注意输出类型和输出格式需要用单引号或者双引号括起来</p></li><li><p>​    输出类型：</p><ul><li>​    %ns            输出字符串（占n个字符）</li><li>​    %ni            输出整数（占n个位置）</li><li>​    %m.nf        输出浮点数（小数点前m位，小数点后n位）</li></ul></li><li><p>举例说明：</p><p>‘%ns%s%s\n’的作用：控制字符串输出，每三个字符串为一行，且第一个字符串占n个位置（在每行第一个字符串前用空格补齐，少了补空格，多了不”溢出“）</p></li><li><p>输出格式：</p><ul><li>\a        输出警告信息</li></ul></li><li><p>\b         输出退格键（backspace）</p><ul><li>\f        清除屏幕</li><li>\n        换行</li><li>\r        回车</li><li>\t        水平输出退格键（Tab键）</li><li>\v        垂直输出退格键（Tab键）</li></ul></li><li><p>Linux默认支持printf，不支持print，awk命令支持两者，print命令输出后当行自带换行，printf命令不带换行</p></li></ul></li><li><p>awk命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;条件1&#123;动作1&#125;条件2&#123;动作2&#125;条件3&#123;动作3&#125;...&#x27; 文件名</span><br></pre></td></tr></table></figure><p>条件:    一般使用关系表达式作为条件</p><p>动作：格式化输出/流程控制语句</p><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#x27;&#123;printf $2 &quot;\t&quot; $6 &quot;\n&quot;&#125;&#x27; student.txt</span><br></pre></td></tr></table></figure><p>以上命令条件省略，意为任何情况都执行。该命令输出student.txt文件中第二列和第六列</p><p>BEGIN、END和FS内置变量</p><ul><li>三者都是awk语句中的条件</li><li>首先，要了解awk语句执行时，是先读取文件的第一行语句再进入”条件”和”动作”</li><li>BEGIN对应的”动作”在读取文件第一行之后再执行</li><li>END对应的”动作”在所有的数据都处理完之后再执行</li><li>FS内置变量是用来定义awk中的分隔符，默认为空格或制表符</li></ul></li></ol></li><li><p>sed命令</p><ul><li><p>sed是一种轻量级流编辑器，相对于传统文本编辑器（windows中的记事本、linux中的vim gredit等），sed命令可以不用在文件中打开再编辑，而是可以在命令行实现对数据的选取、替换、删除、新增。</p></li><li><p>sed [选项] ‘[动作]’ 文件名</p><p>一般sed命令会将所有数据都输出到屏幕</p><p>选项名：</p><ul><li>-n    sed命令只会把处理过的数据输出到屏幕</li><li>-e    允许对输入数据应用多条sed命令编辑 </li><li>-i    用sed修改后的结果直接修改文件中的数据，而不是由屏幕输出</li></ul><p>动作：</p><ul><li>a    追加，在当前行添加一行或多行，添加多行时，除最后一行外，每行末尾需要添加”\“，代表数据数据未完结</li><li>c    行替换，用c后面的字符串替换，可用”\“</li><li>i    插入可加”\“</li><li>d    删除指定行</li><li>p    打印当前行</li><li>s    字串替换，”行范围s/旧字串/新字串/g”</li></ul></li><li><p>如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e &#x27;s/Liming//g;s/Gao//g&#x27; student.txt</span><br></pre></td></tr></table></figure><p>上述命令，同时把”Liming”和”Gao”替换为空</p></li></ul></li></ol><h2 id="字符处理命令"><a href="#字符处理命令" class="headerlink" title="字符处理命令"></a>字符处理命令</h2><ol><li><p>排序命令sort</p><p>sort [选项] 文件名</p><p>选项：-f    忽略大小写</p><p>​            -n    以数值型进行排序</p><p>​            -r    反向排序</p><p>​            -t    指定分隔符</p><p>​            -k n[,m]    按照指定的字段范围排序。从第n字段开始，m字段结束（默认到行尾）</p></li><li><p>统计命令wc</p><p>wc [选项] 文件名</p><p>选项：    -l    只统计行数</p><p>​                -w    只统计单词数</p><p>​                -m    只统计字符数</p></li></ol><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ol><li><p>两种判断格式</p><ul><li>test -e /root/install/.log</li><li>[ -e /root/install.log ]</li></ul></li><li><p>按照文件类型进行判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-b 文件</td><td>判断文件是否存在，并且是否是块文件（是则为真）</td></tr><tr><td>-c 文件</td><td>判断文件是否存在，并且是否是字符设备文件（是则为真）</td></tr><tr><td><font color=0099ff> -d 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否是目录文件（是则为真）</font></td></tr><tr><td><font color=0099ff>-e 文件</font></td><td><font color=0099ff>判断文件是否存在（存在则为真）</font></td></tr><tr><td><font color=0099ff>-f 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否是普通文件（是则为真）</font></td></tr><tr><td>-L 文件</td><td>判断文件是否存在，并且是否是符号链接文件（是则为真）</td></tr><tr><td>-p 文件</td><td>判断文件是否存在，并且是否是管道文件（是则为真）</td></tr><tr><td>-s 文件</td><td>判断文件是否存在，并且是否非空（非空则为真）</td></tr><tr><td>-S 文件</td><td>判断文件是否存在，并且是否是为套接文件（是则为真）</td></tr></tbody></table></li><li><p>按照文件权限进行判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td><font color=0099ff>-r 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否该文件拥有读权限（有则为真）</font></td></tr><tr><td><font color=0099ff>-w 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否该文件拥有写权限（有则为真）</font></td></tr><tr><td><font color=0099ff>-x 文件</font></td><td><font color=0099ff>判断文件是否存在，并且是否该文件拥有执行权限（有则为真）</font></td></tr><tr><td>-u 文件</td><td>判断文件是否存在，并且是否该文件拥有SUID权限（有则为真）</td></tr><tr><td>-g 文件</td><td>判断文件是否存在，并且是否该文件拥有SGID权限（有则为真）</td></tr><tr><td>-k 文件</td><td>判断文件是否存在，并且是否该文件拥有SBit权限（有则为真）</td></tr></tbody></table></li><li><p>两个文件之间进行比较</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>文件1 -nt 文件2</td><td>判断文件1的修改时间是否比文件2的新（如果新则为真）</td></tr><tr><td>文件1 -ot 文件2</td><td>判断文件1的修改时间是否比文件2的旧（如果旧则为真）</td></tr><tr><td>文件1 -et 文件2</td><td>判断文件1是否和文件2的Inode一致，可以理解为两个文件是否是同一个文件。这个判断用于硬链接是很好的方法（如果新则为真）</td></tr></tbody></table></li><li><p>两个整数之间比较</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>整数1 -eq 整数2</td><td>判断整数1是否和整数2相等（相等为真）</td></tr><tr><td>整数1 -ne 整数2</td><td>判断整数1是否和整数2不相等（不相等为真）</td></tr><tr><td>整数1 -gt 整数2</td><td>判断整数1是否大于整数2（大于为真）</td></tr><tr><td>整数1 -lt 整数2</td><td>判断整数1是否小于整数2（小于为真）</td></tr><tr><td>整数1 -ge 整数2</td><td>判断整数1是否大于或等于整数2（大于或等于为真）</td></tr><tr><td>整数1 -le 整数2</td><td>判断整数1是否小于或等于整数2（小于或等于为真）</td></tr></tbody></table></li><li><p>字符串之间的判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>-z 字符串</td><td>判断字符串是否为空（为空返回真）</td></tr><tr><td>-n 字符串</td><td>判断字符串是否为非空（非空返回真）</td></tr><tr><td>字串1 == 字串2</td><td>判断字符串1是否和字符串2相等（相等返回真）</td></tr><tr><td>字串1 ！=字串2</td><td>判断字符串1是否和字符串2不相等（不相等返回真）</td></tr></tbody></table></li><li><p>多重条件判断</p><table><thead><tr><th>测试选项</th><th>作用</th></tr></thead><tbody><tr><td>判断1 -a 判断2</td><td>逻辑与，判断1和判断2都成立，返回真</td></tr><tr><td>判断1 -o 判断2</td><td>逻辑或，判断1和判断2有一个成立，返回真</td></tr><tr><td>！判断</td><td>逻辑非，和原来判断结果相反</td></tr></tbody></table></li></ol><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><ol><li><p>if语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line"><span class="meta">#</span><span class="bash">条件判断式两边的括号不能少，<span class="string">&quot;]&quot;</span>后是分号</span></span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">作用：判断根分区使用率是否达80以上</span></span><br><span class="line">rate=$(df -h | grep &quot;/dev/sda2&quot; | awk &#x27;&#123;print $5&#125;&#x27; | cut -d &quot;%&quot; -f 1)</span><br><span class="line">if [ $rate -ge 80 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Warning! /dev/sda2 is full!!!&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>双分支if条件语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式1 ]</span><br><span class="line">then</span><br><span class="line">程序1</span><br><span class="line">else</span><br><span class="line">程序2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>举例：</p><ul><li>备份数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash/</span></span><br><span class="line">ntpdate asia.pool.ntp.org &amp;&gt;/dev/null</span><br><span class="line"><span class="meta">#</span><span class="bash">同步系统时间</span></span><br><span class="line">date=$(date +%y%m%d)</span><br><span class="line"><span class="meta">#</span><span class="bash">把当前系统时间按照“年月日”格式赋予变量date</span></span><br><span class="line">size=$(du -sh /var/lib/musql)</span><br><span class="line"><span class="meta">#</span><span class="bash">统计mysql数据库的大小，并赋值给size变量</span></span><br><span class="line">if [ -d /tmp/dbbak ]</span><br><span class="line">then</span><br><span class="line">echo &quot;Date : $date!&quot; &gt; /tmp/dbbak/binfo.txt</span><br><span class="line">cd /tmp/tbbak</span><br><span class="line">tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt; /dev/null</span><br><span class="line">rm -rf /tmp/dbbak/dbinfo.txt</span><br><span class="line">else</span><br><span class="line">mkdir /tmp/dbbak</span><br><span class="line">echo &quot;Date : $date!&quot; &gt; /tmp/dbbak/binfo.txt</span><br><span class="line">cd /tmp/tbbak</span><br><span class="line">tar -zcf mysql-lib-$date.tar.gz /var/lib/mysql dbinfo.txt &amp;&gt; /dev/null</span><br><span class="line">rm -rf /tmp/dbbak/dbinfo.txt</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>判断apche是否启动</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">port=$(nmap -sT 192.168.1.156 | grep tcp | grep http | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line"><span class="meta">#</span><span class="bash">使用nmap命令扫描服务器，并截取apache服务的状态，赋予变量port</span></span><br><span class="line">if [ &quot;$port&quot;==&quot;open&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$(date) http is ok!&quot; &gt;&gt; /tmp/autostart-acc.log</span><br><span class="line">else</span><br><span class="line">/etc/rc.d/init.d/httpd start &amp;&gt; /dev/null</span><br><span class="line">echo &quot;$(date) restart httpd !!&quot; &gt;&gt; /tmp/autostart-err.log</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>多分支if条件语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式1 ]</span><br><span class="line">then</span><br><span class="line">程序语句1</span><br><span class="line">elif [ 条件判断式2 ]</span><br><span class="line">then</span><br><span class="line">程序语句2</span><br><span class="line">elif [ ... ]</span><br><span class="line">then</span><br><span class="line">...</span><br><span class="line">else</span><br><span class="line">程序语句n</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>case语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">case &quot;$变量名&quot; in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">如果变量的值等于值2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">......</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值，则执行此语句</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>for语句</p><p>用法一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>用法二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (( i=1;i&lt;=循环次数;i++ ))</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>举例：</p><ul><li>批量解压缩脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">批量解压缩脚本</span></span><br><span class="line">cd /lamp</span><br><span class="line">ls *.tar.gz &gt; ls.log</span><br><span class="line">for i in $(cat ls.log)</span><br><span class="line">do</span><br><span class="line">tar -zxf $i &amp;&gt;/dev/null</span><br><span class="line">done</span><br><span class="line">rm -rf /lamp/ls.log</span><br></pre></td></tr></table></figure><ul><li>批量添加指定数量的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">批量添加指定数量的用户</span></span><br><span class="line">read -p &quot;Please input user name:&quot; -t 30 name</span><br><span class="line">read -p &quot;Please input the number of users:&quot; -t 30 num</span><br><span class="line">read -p &quot;Please input the password of users:&quot; -t 30 pass</span><br><span class="line">if [ ! -z &quot;$name&quot; -a ! -z &quot;$num&quot; -a ! -z &quot;$pass&quot; ]</span><br><span class="line">then </span><br><span class="line">y=$(echo $num | sed &#x27;s/[0-9]//g&#x27;)</span><br><span class="line">if [ -z &quot;$y&quot; ]</span><br><span class="line">then</span><br><span class="line">for((i=1;i&lt;=$num;i++))</span><br><span class="line">do</span><br><span class="line">/usr/sbin/useradd $name$i &amp;&gt;/dev/null</span><br><span class="line">echo $pass | /usr/bin/passwd --stdin $name$i&amp;&gt;/dev/null</span><br><span class="line">done</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>while语句</p><p>只要条件判断式成立，循环就会一直继续。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>until语句</p><p>和while循环语句相反，只要条件判断式<strong>不</strong>成立，则继续循环。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ol><h1 id="Linux服务管理"><a href="#Linux服务管理" class="headerlink" title="Linux服务管理"></a>Linux服务管理</h1><h1 id="Linux系统管理"><a href="#Linux系统管理" class="headerlink" title="Linux系统管理"></a>Linux系统管理</h1><h1 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h1><h1 id="启动管理"><a href="#启动管理" class="headerlink" title="启动管理"></a>启动管理</h1><h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><h1 id="易错易混参考答案"><a href="#易错易混参考答案" class="headerlink" title="易错易混参考答案"></a>易错易混参考答案</h1><ol><li><p>$()是调用系统命令</p><p>${}用法一：包含变量，用于变量的叠加</p><p>${}用法二：用于位置参数变量当表示第 10个参数时表示为${10}</p><p>$[]里面写数值运算表达式，与$(())有同效</p></li><li><p>单引号，取消单引号中的特殊符号的特殊含义</p><p>双引号，取消双引号中的特殊符号（美元符”$”,反引号”`”,反斜线”\“ ）的特殊含义</p><p>反引号，和$()一样，是调用系统命令</p></li></ol><p>[1]:</p><p>[2]:</p><p>[3]:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;易混易错&quot;&gt;&lt;a href=&quot;#易混易错&quot; class=&quot;headerlink&quot; title=&quot;易混易错&quot;&gt;&lt;/a&gt;易混易错&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;$(),$(()),${}的区别&lt;/li&gt;
&lt;li&gt;单引号，双引号，反引号的用法区别&lt;/li&gt;
&lt;/ol&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IDEA相关配置</title>
    <link href="http://example.com/2020/10/18/IDEA%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/"/>
    <id>http://example.com/2020/10/18/IDEA%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-10-18T05:11:00.000Z</published>
    <updated>2020-10-18T05:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA相关设置"><a href="#IDEA相关设置" class="headerlink" title="IDEA相关设置"></a>IDEA相关设置</h1><p><strong>本篇</strong></p><p>Appearance &amp;Behavior 外观和行为</p><p>Keymap 快捷键</p><p>Editor 编辑器设置</p><p>Plugins 插件</p><p>Version Control 版本控制</p><p>Build，Execution，Deployment 构建，执行，部署</p><p>Language &amp; Frameworks 语言和框架</p><p>Tools 工具集</p><h2 id="看着爽"><a href="#看着爽" class="headerlink" title="看着爽"></a>看着爽</h2><h3 id="1-字体设置"><a href="#1-字体设置" class="headerlink" title="1.字体设置"></a>1.字体设置</h3><p>File-&gt;settings-&gt;Editor-&gt;Font-&gt;</p><h3 id="2-主题设置"><a href="#2-主题设置" class="headerlink" title="2.主题设置"></a>2.主题设置</h3><p>File-&gt;settings-&gt;Apperance &amp; Behavior-&gt;Appearance-&gt;</p><h3 id="3-设置鼠标悬浮提示"><a href="#3-设置鼠标悬浮提示" class="headerlink" title="3.设置鼠标悬浮提示"></a>3.设置鼠标悬浮提示</h3><p>File-&gt;settings-&gt;Editor-&gt;Code Editing-&gt;勾选Show quick documenttation</p><h3 id="4-显示方法分割符"><a href="#4-显示方法分割符" class="headerlink" title="4.显示方法分割符"></a>4.显示方法分割符</h3><p>File-&gt;settings-&gt;Editor-&gt;General-&gt;Appearance-&gt;</p><h2 id="用着爽"><a href="#用着爽" class="headerlink" title="用着爽"></a>用着爽</h2><h3 id="1-忽略大小写-提示"><a href="#1-忽略大小写-提示" class="headerlink" title="1.忽略大小写 提示"></a>1.忽略大小写 提示</h3><p>File-&gt;settings-&gt;Editor-&gt;General-&gt;Code Completion-&gt;取消勾选 Match case</p><h3 id="2-自动导包，自动优化导包"><a href="#2-自动导包，自动优化导包" class="headerlink" title="2.自动导包，自动优化导包"></a>2.自动导包，自动优化导包</h3><p>File-&gt;settings-&gt;Editor-&gt;general-&gt;Auto Import-&gt;勾选Add unambiguous imports on the fly:快速添加导入</p><p>File-&gt;settings-&gt;Editor-&gt;general-&gt;Auto Import-&gt;勾选Optimize imports on the fly:快速优化导入（删除无用的导入包）</p><h3 id="3-IDEA统一编码文件编码"><a href="#3-IDEA统一编码文件编码" class="headerlink" title="3.IDEA统一编码文件编码"></a>3.IDEA统一编码文件编码</h3><p>当前工程编码设置</p><p>File-&gt;settings-&gt;Editor -&gt;File Encodings</p><p>Global Encoding     Project Encodings       Default encoding for properties files 全都设置UTF-8</p><p>勾选 Transpatrent native-to-ascii conversion</p><p>全局编码设置</p><p>File-&gt;New projects settings -&gt;settings for new projects-&gt;settings-&gt;editor-&gt;file encodings</p><p>把transparent native-to-ascII conversion 勾选上即可。</p><h3 id="4-Intellij-idea-用快捷键自动生成序列化id"><a href="#4-Intellij-idea-用快捷键自动生成序列化id" class="headerlink" title="4.Intellij idea 用快捷键自动生成序列化id"></a>4.Intellij idea 用快捷键自动生成序列化id</h3><p>Intellij idea用快捷键自动生成序列化id</p><p>类实现了Serializable接口之后，鼠标放在类上之后就能生成SerialVersionUID </p><p>设置：settings -&gt;Editor-&gt;inspections-&gt;serialization issues -&gt;选择图中的选项。serilizable class without ‘serialVersioinUID’</p><h2 id="好用的快捷键"><a href="#好用的快捷键" class="headerlink" title="好用的快捷键"></a>好用的快捷键</h2><ol><li><p>alt+enter 修复代码</p></li><li><p>ctrl+D 复制一行到下一行</p></li><li><p>ctrl+C ctrl+V ctrl+X 都不必用鼠标选择，直接将光标放在目标行，就能实现</p></li><li><p>ctrl+alt+L 美化代码</p></li><li><p>ctrl+alt+o 优化导包（上一部分已实现自动优化导包）</p></li><li><p>快速补全分号 ctrl+shift+enter</p></li><li><p>修改快捷键</p><p>File-&gt;settings-&gt;Keymap</p></li><li><p>建议修改的</p><p>（find in path）常用 推荐修改 alt+R</p><p>（generate）常用 推荐修改 alt+e</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>1.shift+alt+ctrl加鼠标点击，进行多行同时操作</p><p>2.分屏操作</p><p>2.模板使用</p><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1np4y1y7CP?from=search&seid=209557586085212775" title="【 楠老分享 】这样设置你的IDEA，经久耐看，用的爽到飞起，java开发利器秒变AK47][1]">bilibili: 【 楠老分享 】这样设置你的IDEA，经久耐看，用的爽到飞起，java开发利器秒变AK47</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA相关设置&quot;&gt;&lt;a href=&quot;#IDEA相关设置&quot; class=&quot;headerlink&quot; title=&quot;IDEA相关设置&quot;&gt;&lt;/a&gt;IDEA相关设置&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;本篇&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Appearance &amp;amp;Beh</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown 基本语句用法</title>
    <link href="http://example.com/2020/10/15/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2020/10/15/markdown%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-10-14T16:00:00.000Z</published>
    <updated>2020-10-24T12:17:31.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-基本语句用法"><a href="#Markdown-基本语句用法" class="headerlink" title="Markdown 基本语句用法"></a>Markdown 基本语句用法</h2><h5 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h5><blockquote><p>使用**&lt;u&gt;内容&lt;u&gt;**可以产生下划线效果如下    效果如下：</p><p><u>内容</u></p></blockquote><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5><blockquote><p>使用**~<del>内容\</del>**可以产生删除线效果    效果如下</p><p><del>内容</del></p></blockquote><h5 id="字体和颜色"><a href="#字体和颜色" class="headerlink" title="字体和颜色"></a>字体和颜色</h5><blockquote><p> 直接上代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face&#x3D;&quot;字体名称&quot; size&#x3D;字体大小 color&#x3D;颜色编号&gt;内容&lt;&#x2F;font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><font color=#0099ff size=7 face="黑体">color=#0099ff size=7 face=”黑体”</font></p><p>常用字体颜色见链接<a href="https://www.cnblogs.com/Dyleaf/p/7195718.html" title="markdown 字体颜色">markdown 字体颜色</a></p><h5 id="代码-amp-代码块"><a href="#代码-amp-代码块" class="headerlink" title="代码&amp;代码块"></a>代码&amp;代码块</h5><blockquote><p>使用**`内容`**可以将内容以代码形式显示    效果如下</p><p><code>内容</code></p><p>使用```可以将内容以代码块形式显示    效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWrold</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> System.out.printf(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h5><blockquote><p>使用**内容1**或者__内容2__可以强调内容部分    效果如下</p><p><strong>内容1</strong></p><p><strong>内容2</strong></p></blockquote><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><blockquote><p>使用*内容1*或者_内容2_可以以_斜体_形式表现文字</p></blockquote><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><blockquote><p><em>~`””&gt;\等符号被赋予了特殊的含义。当我们输入这些符号的时候，为了避免误解 成他们的特殊含义。我们应该在它们前面加入 *<em>\</em></em>  以便于取消他们的特殊功能。如下：</p></blockquote><blockquote><p>当我们想要输入**内容**里面的时，避免系统自动认为是强调<strong>内容</strong>，我们应该输入<strong>\*\*内容\*\*</strong></p></blockquote><h5 id="上标与下标"><a href="#上标与下标" class="headerlink" title="上标与下标"></a>上标与下标</h5><blockquote><p>上标表示为&lt;sup&gt;内容&lt;/sup&gt;，如：2&lt;sup&gt;3&lt;/sup&gt;=8 效果如下：</p><p>2<sup>3</sup>=8</p><p>下标表示为&lt;sub&gt;内容&lt;/sub&gt;, 如：H&lt;sub&gt;2&lt;/sub&gt;o 效果如下:</p><p>H<sub>2</sub>o</p></blockquote><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><blockquote><p>将图片拖动到typora编辑器内即可</p><p><img src="F:\MYBlog\themes\Bufferfly\source\img\favicon.png" alt="favicon"></p></blockquote><h5 id="插入URL链接"><a href="#插入URL链接" class="headerlink" title="插入URL链接"></a>插入URL链接</h5><blockquote><p>用&lt;&gt;包裹链接即可 <strong><url></strong> 例如：&lt;www.baidu.com&gt; 效果如下：</p><p>&lt;<a href="http://www.baidu.com&gt;/">www.baidu.com&gt;</a></p></blockquote><h5 id="目录列表"><a href="#目录列表" class="headerlink" title="目录列表"></a>目录列表</h5><blockquote><p>输入**[toc]** 然后回车即可自动生成目录，并且会自动更新</p></blockquote><h5 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h5><blockquote><p>使用<strong>***</strong>或者**—** 然后回车，来生成水平分割线，效果如下：</p><hr><hr></blockquote><h5 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h5><blockquote><p>第一处写[^内容]</p><p>第二处写[^内容]:注解    不要写块引用后    直接上效果</p><p>比如<a href="%E5%85%B6%E5%AE%9E%E5%B9%B6%E4%B8%8D%E6%98%AFemoj:kissing:">^随便写写 </a></p></blockquote><h5 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h5><blockquote><p>使用&gt;加空格回车即可    例如：</p></blockquote><blockquote></blockquote><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>|姓名|性别|毕业学校|工资|加回车</p><table><thead><tr><th>姓名</th><th>性别</th><th>毕业学校</th><th>工资</th></tr></thead><tbody><tr><td>zc</td><td>男</td><td>hutb</td><td>8000</td></tr><tr><td>lj</td><td>男</td><td>hutb</td><td>5000</td></tr><tr><td>tt</td><td>女</td><td>hut</td><td>7999</td></tr></tbody></table><h5 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h5><blockquote><p>使用如下的代码创建任务列表，在[]中输入x表示完成，也可以通过点击选择完成或者没完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 英语六级</span><br><span class="line">- [ ] 软考中级证书</span><br><span class="line">- [x] 个人博客网站</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><input disabled="" type="checkbox">  英语六级</p></li><li><p><input disabled="" type="checkbox">  软考中级证书</p></li><li><p><input checked="" disabled="" type="checkbox">  个人博客网站</p></li></ul><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><blockquote><p>输入+, -, *,创建无序的列表，使用任意数字开头加”**. 回车**“，其中有一个空格，创建有序列表，例如：</p></blockquote><blockquote><p>* 啊？</p><p>* 就这？</p><p>* 九折水瓶？</p></blockquote><ul><li>啊？</li><li>就这？</li><li>九折水瓶？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 第一个</span><br><span class="line">2. 第二个</span><br></pre></td></tr></table></figure><ol><li>第一个</li><li>第二个</li></ol><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.jianshu.com/p/092de536d948" title="Typora For Markdown 语法">简书：Typora For Markdown 语法</a></p><p><a href="https://zhuanlan.zhihu.com/p/67153848?utm_source=wechat_session" title="让 Markdown 写作更简单 Typora 完全使用指南">知乎：让 Markdown 写作更简单 Typora 完全使用指南</a></p><p><a href="https://www.cnblogs.com/tocy/p/markdown-footnote_link.html" title="Markdown链接及脚注">博客网：Markdown链接及脚注</a></p><p><a href="https://www.cnblogs.com/Dyleaf/p/7195718.html" title="markdown 字体颜色">博客园：markdown 字体颜色)</a></p><p><a href="https://www.cnblogs.com/Dyleaf/p/7195718.html" title="markdown 字体颜色"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Markdown-基本语句用法&quot;&gt;&lt;a href=&quot;#Markdown-基本语句用法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基本语句用法&quot;&gt;&lt;/a&gt;Markdown 基本语句用法&lt;/h2&gt;&lt;h5 id=&quot;下划线&quot;&gt;&lt;a href=</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
